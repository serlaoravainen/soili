{
  "generatedAt": "2025-09-01T22:31:58.029Z",
  "root": "soili",
  "counts": {
    "files": 47,
    "bytes": 333554,
    "skipped": 0
  },
  "config": {
    "include": [
      "src/**/*",
      "app/**/*",
      "packages/**/*",
      "supabase/functions/**/*",
      "supabase/migrations/**/*.sql",
      "supabase/**/*.sql",
      "supabase/seed.sql",
      "supabase/types/**/*"
    ],
    "exclude": [
      "**/node_modules/**",
      ".next/**",
      "dist/**",
      "build/**",
      "out/**",
      ".git/**",
      ".vercel/**",
      "coverage/**",
      "**/*.map",
      "**/*.min.*",
      "**/*.lock",
      "**/*.png",
      "**/*.jpg",
      "**/*.jpeg",
      "**/*.gif",
      "**/*.webp",
      "**/*.svg",
      "**/*.ico",
      "**/*.pdf",
      "**/*.zip",
      "supabase/.branches/**",
      "supabase/.temp/**",
      "supabase/config.toml",
      "scripts/**"
    ],
    "redact": [
      "(?i)\\b(api[_-]?key|secret|token|password)\\b\\s*[:=]\\s*['\\\"][^'\\\"]+['\\\"]",
      "(?m)^(RESEND|SUPABASE|VAPID|STRIPE|GOOGLE|AWS|OPENAI)_[A-Z0-9_]+\\s*=\\s*.+$",
      "\\b[A-Za-z0-9_-]{48,}\\b"
    ],
    "maxPreviewBytes": 250000,
    "chunkBytes": 64000,
    "maxFileBytes": 3000000,
    "formatDump": true,
    "repoRawBase": "https://raw.githubusercontent.com/<owner>/<repo>/<commit>"
  },
  "files": [
    {
      "path": "src/app/ServiceWorkerRegister.tsx",
      "size": 484,
      "sha256": "631fcf19ef166715c1aed3a81c53a16a19c326ea125dd1d4eaa7d9f1c1d09b91",
      "lang": "tsx",
      "lines": 20,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/ServiceWorkerRegister.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport { useEffect } from \"react\";\n\nexport default function ServiceWorkerRegister() {\n  useEffect(() => {\n    if (!(\"serviceWorker\" in navigator)) return;\n    const onLoad = () => {\n      navigator.serviceWorker.register(\"/sw.js\").catch((e) => {\n        // älä kaada UI:ta\n        console.error(\"[sw register]\", e);\n      });\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  return null;\n}\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 20
        }
      ]
    },
    {
      "path": "src/app/globals.css",
      "size": 5653,
      "sha256": "45ad32c69d21d05c8e114bb7dcee571ed26789588c71258172a932bb0b2849b5",
      "lang": "css",
      "lines": 191,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/globals.css",
      "chunks": [
        {
          "i": 0,
          "text": "@import \"tailwindcss\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --font-size: 14px;\n  --background: #ffffff;\n  --foreground: oklch(0.145 0 0);\n  --card: #ffffff;\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: #030213;\n  --primary-foreground: oklch(1 0 0);\n  --secondary: oklch(0.95 0.0058 264.53);\n  --secondary-foreground: #030213;\n  --muted: #ececf0;\n  --muted-foreground: #717182;\n  --accent: #e9ebef;\n  --accent-foreground: #030213;\n  --destructive: #d4183d;\n  --destructive-foreground: #ffffff;\n  --border: rgba(0, 0, 0, 0.1);\n  --input: transparent;\n  --input-background: #f3f3f5;\n  --switch-background: #cbced4;\n  --font-weight-medium: 500;\n  --font-weight-normal: 400;\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: #030213;\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --font-weight-medium: 500;\n  --font-weight-normal: 400;\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-input-background: var(--input-background);\n  --color-switch-background: var(--switch-background);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n/**\n * Base typography. This is not applied to elements which have an ancestor with a Tailwind text class.\n */\n@layer base {\n  :where(:not(:has([class*=\" text-\"]), :not(:has([class^=\"text-\"])))) {\n    h1 {\n      font-size: var(--text-2xl);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    h2 {\n      font-size: var(--text-xl);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    h3 {\n      font-size: var(--text-lg);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    h4 {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    p {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-normal);\n      line-height: 1.5;\n    }\n\n    label {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    button {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    input {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-normal);\n      line-height: 1.5;\n    }\n  }\n}\n\nhtml {\n  font-size: var(--font-size);\n}",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 191
        }
      ]
    },
    {
      "path": "src/app/layout.tsx",
      "size": 1547,
      "sha256": "b05c936691def23d0b10af74a505e9b973399b100fe5ac64c46fd79b60d09e72",
      "lang": "tsx",
      "lines": 56,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/layout.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "import type { Metadata } from \"next\";\nimport Script from \"next/script\"\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\nimport ServiceWorkerRegister from \"./ServiceWorkerRegister\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"fi\" suppressHydrationWarning>\n\n      <head>\n        {/* Aseta html.class (light/dark) ennen React-hydraatiota */}\n        <Script id=\"theme-init\" strategy=\"beforeInteractive\">\n          {`(function () {\n            try {\n              var key = 'soili-theme';\n              var mode = localStorage.getItem(key) || 'system';\n              var prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n              var effective = mode === 'system' ? (prefersDark ? 'dark' : 'light') : mode;\n              var c = document.documentElement.classList;\n              c.remove('light','dark');\n              c.add(effective);\n            } catch (_) {}\n          })();`}\n        </Script>\n      </head>\n\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        {children}\n        <ServiceWorkerRegister />\n      </body>\n    </html>\n  );\n}\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 56
        }
      ]
    },
    {
      "path": "src/app/page.tsx",
      "size": 2102,
      "sha256": "863f7484cf1ebcb308bfbdc6b93bb2f3e48ceb9b3db992db3c28bfb02ab30ef7",
      "lang": "tsx",
      "lines": 59,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/page.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport React, { useState } from 'react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';\nimport { Toaster } from './components/ui/sonner';\nimport Toolbar from './components/Toolbar';\nimport ScheduleTable from './components/ScheduleTable';\nimport AbsenceControlPanel from './components/AbsenceControlPanel';\nimport EmployeeList from './components/EmployeeList';\nimport { Calendar, Users, Clock } from 'lucide-react';\n\nexport default function App() {\n  const [activeTab, setActiveTab] = useState('schedule');\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Toast notifications */}\n      <Toaster position=\"top-right\" />\n      \n      <div className=\"container mx-auto p-6 space-y-6\">\n        {/* Toolbar - always visible */}\n        <Toolbar />\n        \n        {/* Main Navigation */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 lg:w-[400px] mx-auto\">\n            <TabsTrigger value=\"schedule\" className=\"flex items-center gap-2\">\n              <Calendar className=\"w-4 h-4\" />\n              Vuorotaulukko\n            </TabsTrigger>\n            <TabsTrigger value=\"employees\" className=\"flex items-center gap-2\">\n              <Users className=\"w-4 h-4\" />\n              Työntekijät\n            </TabsTrigger>\n            <TabsTrigger value=\"absences\" className=\"flex items-center gap-2\">\n              <Clock className=\"w-4 h-4\" />\n              Poissaolot\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Schedule Table Tab */}\n          <TabsContent value=\"schedule\" className=\"space-y-6\">\n            <ScheduleTable />\n          </TabsContent>\n\n          {/* Employee Management Tab */}\n          <TabsContent value=\"employees\" className=\"space-y-6\">\n            <EmployeeList />\n          </TabsContent>\n\n          {/* Absence Control Panel Tab */}\n          <TabsContent value=\"absences\" className=\"space-y-6\">\n            <AbsenceControlPanel />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 59
        }
      ]
    },
    {
      "path": "src/lib/dateUtils.ts",
      "size": 984,
      "sha256": "ac4a55bccc8a3540a4052f3d652aff2dee2421aff36bd6f223f1d94c49370067",
      "lang": "typescript",
      "lines": 30,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/lib/dateUtils.ts",
      "chunks": [
        {
          "i": 0,
          "text": "// dateutils.ts\nexport type WeekStartDay = \"monday\" | \"sunday\";\n\n// Paikallinen keskiyö -> YYYY-MM-DD ilman UTC-heittelyä\nexport function toLocalISO(date: Date) {\n  const d = new Date(date);\n  d.setHours(0, 0, 0, 0);\n  const yyyy = d.getFullYear();\n  const mm = String(d.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(d.getDate()).padStart(2, \"0\");\n  return `${yyyy}-${mm}-${dd}`;\n}\n\nexport function addDaysLocalISO(iso: string, add: number) {\n  const [y, m, da] = iso.split(\"-\").map(Number);\n  const d = new Date(y, m - 1, da); // paikallinen\n  d.setDate(d.getDate() + add);\n  return toLocalISO(d);\n}\n\nexport function alignToWeekStart(iso: string, weekStart: WeekStartDay) {\n  const [y, m, da] = iso.split(\"-\").map(Number);\n  const d = new Date(y, m - 1, da); // paikallinen\n  const day = d.getDay(); // 0 = su, 1 = ma\n  const startIndex = weekStart === \"monday\" ? 1 : 0;\n  const diff = (day - startIndex + 7) % 7;\n  d.setDate(d.getDate() - diff);\n  return toLocalISO(d);\n}\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 30
        }
      ]
    },
    {
      "path": "src/lib/logger.ts",
      "size": 1735,
      "sha256": "cb0a9981a5d5647dea71e1188b132580d199d07ebe0e13a24a49df0b0d476afc",
      "lang": "typescript",
      "lines": 58,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/lib/logger.ts",
      "chunks": [
        {
          "i": 0,
          "text": "/* Timanttinen virhe-normalisointi: EI enää console.error({}) -roskaa */\ntype NormalizedError = {\n  name: string\n  message: string\n  stack?: string\n  status?: number\n  cause?: unknown\n  extra?: Record<string, unknown>\n};\n\nfunction isResponseLike(x: unknown): x is Response & { url?: string } {\n  return typeof x === \"object\" && x !== null && \"status\" in x && \"ok\" in x;\n}\n\nexport function normalizeError(err: unknown): NormalizedError {\n  if (isResponseLike(err)) {\n    return {\n      name: \"HTTPError\",\n      message: `HTTP ${err.status} ${err.statusText ?? \"\"}`.trim(),\n      status: err.status,\n      extra: { url: (err as any).url },\n    };\n  }\n  if (err instanceof Error) {\n    const cause = (err as any).cause;\n    return {\n      name: err.name || \"Error\",\n      message: err.message || \"Unknown error\",\n      stack: err.stack,\n      cause,\n    };\n  }\n  if (typeof err === \"object\" && err !== null) {\n    const anyErr = err as Record<string, unknown>;\n    const name = typeof anyErr.name === \"string\" ? anyErr.name : \"UnknownObjectError\";\n    const message = typeof anyErr.message === \"string\" ? anyErr.message : JSON.stringify(anyErr);\n    return { name, message, extra: anyErr };\n  }\n  if (typeof err === \"string\") {\n    return { name: \"StringError\", message: err };\n  }\n  return { name: \"Unknown\", message: String(err) };\n}\n\nexport function logError(context: string, err: unknown) {\n  const n = normalizeError(err);\n  console.error(`[${context}] ${n.name}: ${n.message}`, {\n    status: n.status,\n    cause: n.cause,\n    extra: n.extra,\n    stack: n.stack,\n  });\n}\n\nexport function logInfo(context: string, data?: unknown) {\n  if (data === undefined) console.info(`[${context}]`);\n  else console.info(`[${context}]`, data);\n}",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 58
        }
      ]
    },
    {
      "path": "src/lib/pushClient.ts",
      "size": 1652,
      "sha256": "590f9a9f65af6842bcc271abe6ceef5e9eb756d19848c0eaed7dbab87bc5bf3a",
      "lang": "typescript",
      "lines": 51,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/lib/pushClient.ts",
      "chunks": [
        {
          "i": 0,
          "text": "// src/lib/pushClient.ts\nimport { supabase } from \"@/lib/supaBaseClient\";\n\nconst PUBLIC_VAPID = process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY || \"\";\n\nfunction urlBase64ToUint8Array(base64String: string) {\n  const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\n  const raw = atob(base64);\n  const output = new Uint8Array(raw.length);\n  for (let i = 0; i < raw.length; ++i) output[i] = raw.charCodeAt(i);\n  return output;\n}\n\nexport async function ensureServiceWorker() {\n  if (!(\"serviceWorker\" in navigator)) throw new Error(\"Service Worker ei tuettu\");\n  const reg = await navigator.serviceWorker.register(\"/sw.js\");\n  await navigator.serviceWorker.ready;\n  return reg;\n}\n\nexport async function requestPermissionAndSubscribe(): Promise<boolean> {\n  if (!PUBLIC_VAPID) { console.error(\"NEXT_PUBLIC_VAPID_PUBLIC_KEY puuttuu\"); return false; }\n\n  const perm = await Notification.requestPermission();\n  if (perm !== \"granted\") return false;\n\n  const reg = await ensureServiceWorker();\n  const sub = await reg.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: urlBase64ToUint8Array(PUBLIC_VAPID),\n  });\n\n  // talleta supabaseen\nconst json: PushSubscriptionJSON = sub.toJSON();\nconst endpoint: string = json.endpoint!;\nconst p256dh: string | undefined = json.keys?.p256dh;\nconst auth: string | undefined = json.keys?.auth;\n\nconst { error } = await supabase\n  .from(\"push_subscriptions\")\n  .upsert({ endpoint, p256dh, auth, is_active: true }, { onConflict: \"endpoint\" });\n\nif (error) {\n  console.error(error);\n  return false;\n}\nreturn true;\n\n}\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 51
        }
      ]
    },
    {
      "path": "src/lib/sendEmail.ts",
      "size": 526,
      "sha256": "1e06ad3d35092436766a8a12ef51587579b571fceb6ec3bbdec2863c18fa9df9",
      "lang": "typescript",
      "lines": 20,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/lib/sendEmail.ts",
      "chunks": [
        {
          "i": 0,
          "text": "export type SendEmailPayload = {\n  to: string | string[];\n  subject: string;\n  text?: string;\n  html?: string;\n  replyTo?: string;\n};\n\nexport async function sendEmail(payload: SendEmailPayload) {\n  const res = await fetch(\"/api/sendEmail\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(payload),\n  });\n  const data = await res.json().catch(() => ({}));\n  if (!res.ok) {\n    throw new Error(`Email send failed (${res.status}) ${JSON.stringify(data)}`);\n  }\n  return data;\n}",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 20
        }
      ]
    },
    {
      "path": "src/lib/settingsDb.ts",
      "size": 2630,
      "sha256": "77806229a96c16119e442badefeb3ffc2b186b0f5b143c93fd7f0959e5018d92",
      "lang": "typescript",
      "lines": 70,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/lib/settingsDb.ts",
      "chunks": [
        {
          "i": 0,
          "text": "// src/lib/settingsDb.ts\nimport type { Settings } from \"@/lib/settingsSchema\";\n\n\n function resolveFunctionsBase(): string {\n   const direct = process.env.NEXT_PUBLIC_SUPABASE_FUNCTIONS_URL?.trim();\n   if (direct) return direct.replace(/\\/+$/, \"\");\n   const supaUrl = process.env.NEXT_PUBLIC_SUPABASE_URL?.trim();\n   if (!supaUrl) throw new Error(\"Missing NEXT_PUBLIC_SUPABASE_URL\");\n   if (supaUrl.includes(\"localhost\") || supaUrl.includes(\"127.0.0.1\")) {\n     if (typeof window !== \"undefined\") {\n       const h = window.location.hostname;\n       if (h && h !== \"localhost\" && h !== \"127.0.0.1\") {\n         return `http://${h}:54321/functions/v1`;\n       }\n     }\n     return \"http://127.0.0.1:54321/functions/v1\";\n   }\n   return supaUrl.replace(\".supabase.co\", \".functions.supabase.co\");\n }\n const FN_URL = `${resolveFunctionsBase()}/app_settings`;\n\n async function getAuthToken(): Promise<string | undefined> {\n   // Next.js clientissä: hae token supabasen kautta\n   try {\n     const { createClient } = await import(\"@supabase/supabase-js\");\n     const supabase = createClient(\n       process.env.NEXT_PUBLIC_SUPABASE_URL!,\n       process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n     );\n     const { data: { session } } = await supabase.auth.getSession();\n     return session?.access_token;\n   } catch {\n     return undefined;\n   }\n }\n\nexport async function saveNotificationSettingsToDb(notifs: Settings[\"notifications\"]) {\n  if (typeof window !== \"undefined\") console.log(\"[app_settings] FN_URL:\", FN_URL);\n   const token = await getAuthToken();\n   const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n   const res = await fetch(FN_URL, {\n     method: \"PUT\",\n     mode: \"cors\",\n     headers: {\n       \"content-type\": \"application/json\",\n       ...(token || anon ? { Authorization: `Bearer ${token ?? anon}` } : {}),\n     },\n     body: JSON.stringify({ notifications: notifs }),\n   });\n   if (!res.ok) {\n     const j = await res.json().catch(() => ({}));\n     throw new Error(j?.error ?? `Failed to save settings (${res.status})`);\n   }\n}\n export async function loadNotificationSettingsFromDb():\n   Promise<Settings[\"notifications\"]> {\n   const token = await getAuthToken();\n   const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n   const res = await fetch(FN_URL, {\n     method: \"GET\",\n     headers: { ...(token || anon ? { Authorization: `Bearer ${token ?? anon}` } : {}) },\n   });\n   if (!res.ok) {\n     const j = await res.json().catch(() => ({}));\n     throw new Error(j?.error ?? `Failed to load settings (${res.status})`);\n   }\n   const j = await res.json();\n   return j.notifications as Settings[\"notifications\"];\n }",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 70
        }
      ]
    },
    {
      "path": "src/lib/settingsSchema.ts",
      "size": 4034,
      "sha256": "296faedaaf98b64a1c3232a2c7f2c7ffa9be4f2c3e0e665a3b124a2c9d9596b4",
      "lang": "typescript",
      "lines": 137,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/lib/settingsSchema.ts",
      "chunks": [
        {
          "i": 0,
          "text": "// lib/settingsSchema.ts\nimport { z } from \"zod\";\n\nexport const themeValues = [\"light\", \"dark\", \"system\"] as const;\nexport type Theme = typeof themeValues[number];\n\nexport const languageValues = [\"fi\", \"en\", \"sv\"] as const;\nexport type Language = typeof languageValues[number];\n\nexport const weekStartValues = [\"monday\", \"sunday\"] as const;\nexport type WeekStartDay = typeof weekStartValues[number];\n\nexport const timeFormatValues = [\"24h\", \"12h\"] as const;\nexport type TimeFormat = typeof timeFormatValues[number];\n\nexport const dateFormatValues = [\"dd.mm.yyyy\", \"mm/dd/yyyy\", \"yyyy-mm-dd\"] as const;\nexport type DateFormat = typeof dateFormatValues[number];\n\nexport type TimePeriod = 7 | 10 | 14 | 30;\n\nexport const GeneralSettingsSchema = z.object({\n  theme: z.enum(themeValues),\n  language: z.enum(languageValues),\n  weekStartDay: z.enum(weekStartValues),\n  timeFormat: z.enum(timeFormatValues),\n  dateFormat: z.enum(dateFormatValues),\n  defaultTimePeriod: z.union([z.literal(7), z.literal(10), z.literal(14), z.literal(30)]),\n  workingHours: z.object({\n    start: z.string().regex(/^\\d{2}:\\d{2}$/),\n    end: z.string().regex(/^\\d{2}:\\d{2}$/),\n    breakDuration: z.number().int().min(0).max(240),\n  }),\n  autoSave: z.boolean(),\n  autoSaveInterval: z.number().int().min(10).max(300),\n});\n\nexport const AutoGenSettingsSchema = z.object({\n  defaultHours: z.number().min(1).max(12),\n  distributeEvenly: z.boolean(),\n  respectWorkingHours: z.boolean(),\n  skipWeekends: z.boolean(),\n  skipHolidays: z.boolean(),\n  maxConsecutiveDays: z.number().int().min(1).max(14),\n  minRestHours: z.number().int().min(8).max(24),\n});\n\nexport const ExportSettingsSchema = z.object({\n  companyName: z.string().max(120),\n  includeNames: z.boolean(),\n  includeEmails: z.boolean(),\n  includeDepartments: z.boolean(),\n  includeInactiveEmployees: z.boolean(),\n  includeEmptyShifts: z.boolean(),\n  includeHourTotals: z.boolean(),\n});\n\nexport const NotificationSettingsSchema = z.object({\n  emailNotifications: z.boolean(),\n  adminNotificationEmails: z.array(z.string().email()).max(50).default([]),\n  absenceRequests: z.boolean(),\n  scheduleChanges: z.boolean(),\n  employeeUpdates: z.boolean(),\n  systemUpdates: z.boolean(),\n  dailyDigest: z.boolean(),\n  digestTime: z.string().regex(/^\\d{2}:\\d{2}$/),\n});\n\nexport const SystemSettingsSchema = z.object({\n  version: z.string(),\n  lastBackup: z.string().nullable().optional(),\n  maintenanceMode: z.boolean(),\n  debugMode: z.boolean(),\n  maxEmployees: z.number().int().min(1).max(1000),\n  dataRetentionDays: z.number().int().min(30).max(3650),\n});\n\nexport const SettingsSchema = z.object({\n  general: GeneralSettingsSchema,\n  autoGeneration: AutoGenSettingsSchema,\n  export: ExportSettingsSchema,\n  notifications: NotificationSettingsSchema,\n  system: SystemSettingsSchema,\n});\n\nexport type Settings = z.infer<typeof SettingsSchema>;\n\n// Oletukset\nexport const DEFAULT_SETTINGS: Settings = {\n  general: {\n    theme: \"light\",\n    language: \"fi\",\n    weekStartDay: \"monday\",\n    timeFormat: \"24h\",\n    dateFormat: \"dd.mm.yyyy\",\n    defaultTimePeriod: 30,\n    workingHours: { start: \"08:00\", end: \"17:00\", breakDuration: 30 },\n    autoSave: true,\n    autoSaveInterval: 60,\n  },\n  autoGeneration: {\n    defaultHours: 8,\n    distributeEvenly: false,\n    respectWorkingHours: true,\n    skipWeekends: true,\n    skipHolidays: false,\n    maxConsecutiveDays: 5,\n    minRestHours: 11,\n  },\n  export: {\n    companyName: \"Yritys Oy\",\n    includeNames: true,\n    includeEmails: false,\n    includeDepartments: true,\n    includeInactiveEmployees: false,\n    includeEmptyShifts: true,\n    includeHourTotals: true,\n  },\n  notifications: {\n    emailNotifications: true,\n    absenceRequests: true,\n    adminNotificationEmails: [],\n    scheduleChanges: true,\n    employeeUpdates: false,\n    systemUpdates: false,\n    dailyDigest: false,\n    digestTime: \"08:00\",\n  },\n  system: {\n    version: \"1.0.0\",\n    lastBackup: null,\n    maintenanceMode: false,\n    debugMode: false,\n    maxEmployees: 100,\n    dataRetentionDays: 365,\n  },\n};\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 137
        }
      ]
    },
    {
      "path": "src/lib/supaBaseClient.ts",
      "size": 213,
      "sha256": "50e3390541d690ecab3af0d93049f7cf7590cf322f77ff1a03901a9f826e68fd",
      "lang": "typescript",
      "lines": 7,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/lib/supaBaseClient.ts",
      "chunks": [
        {
          "i": 0,
          "text": "import { createClient } from \"@supabase/supabase-js\";\n\nconst url = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\nexport const supabase = createClient(url, anon);\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 7
        }
      ]
    },
    {
      "path": "src/lib/theme.ts",
      "size": 703,
      "sha256": "353d0508a52528960c4a3f52d96e6595b0cf166c0952c2e5cde2a61ef41604b4",
      "lang": "typescript",
      "lines": 21,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/lib/theme.ts",
      "chunks": [
        {
          "i": 0,
          "text": "// src/lib/theme.ts\nexport type ThemeMode = \"light\" | \"dark\" | \"system\";\n\n/**\n * Asettaa dokumentin teeman: light/dark tai järjestelmän mukaan.\n * Ei heitä virheitä – toimii myös SSR:ssa guardien ansiosta.\n */\nexport function applyTheme(mode: ThemeMode) {\n  if (typeof window === \"undefined\" || typeof document === \"undefined\") return;\n  try {\n    localStorage.setItem(\"soili-theme\", mode);\n  } catch {\n    // ignore storage errors\n  }\n  const prefersDark = window.matchMedia?.(\"(prefers-color-scheme: dark)\")?.matches ?? false;\n  const eff = mode === \"system\" ? (prefersDark ? \"dark\" : \"light\") : mode;\n  const c = document.documentElement.classList;\n  c.remove(\"light\",\"dark\");\n  c.add(eff);\n}\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 21
        }
      ]
    },
    {
      "path": "src/store/useScheduleStore.ts",
      "size": 10106,
      "sha256": "0ef590c5dcd26e825e3def78d9e415fb89b49ee89547c01bfe88f9f548f715b3",
      "lang": "typescript",
      "lines": 359,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/store/useScheduleStore.ts",
      "chunks": [
        {
          "i": 0,
          "text": "// src/store/useScheduleStore.ts\n\"use client\";\n\nimport { create } from \"zustand\";\nimport { devtools } from \"zustand/middleware\";\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/lib/supaBaseClient\";\nimport { persist, createJSONStorage } from \"zustand/middleware\";\n\n\n\n// KÄYTÄ YHTÄ TOTUUTTA: ota tyypit yhdestä paikasta\nimport type { Employee, DateInfo } from \"@/app/types\";\n\n// Sama DateCell kuin muualla\nexport type DateCell = DateInfo & { iso: string };\n\n// Yhden solun persistomuoto\nexport type ShiftRow = {\n  employee_id: string;\n  work_date: string; // YYYY-MM-DD\n  type: \"normal\" | \"locked\" | \"absent\" | \"holiday\";\n  hours: number | null; // null sallitaan, mutta tallennetaan 0:ksi kun kirjoitetaan DB:hen\n};\n// Suodattimien tyyppi\nexport type Filters = {\n  departments: string[];\n  showActive: boolean;\n  showInactive: boolean;\n  searchTerm: string;\n};\n\n// Sisäinen muutos, jota kerätään saveAll:lle\ntype PendingChange = {\n  employee_id: string;\n  work_date: string;\n  hours: number; // 0 => poista, >0 => upsert \"normal\"\n};\n\ntype State = {\n\n  // Hydratoitu perusdata\n  employees: Employee[];\n  dates: DateCell[];\n\n  // Vuorot mapattuna\n  shiftsMap: Record<string, ShiftRow>;\n\n  // Muutokset jotka pitää tallentaa\n  pending: Record<string, PendingChange>;\n\n  // Undo/redo pino\n  undoStack: PendingChange[];\n  redoStack: PendingChange[];\n\n  // UI-signaalit\n  dirty: boolean;\n\n  // Filtterit\n  filters: Filters;\n  setFilters: (patch: Partial<Filters>) => void;\n  resetFilters: () => void;\n\n  startDateISO: string;\n  days: 7 | 10 | 14 | 30;\n\n  setRange: (startISO: string, days: State[\"days\"]) => void;\n  setStartDate: (startDateISO: string) => void;\n  shiftRange: (deltaDays: number) => void;\n  hasHydrated: boolean;\n  _setHydrated: (v: boolean) => void;\n\n  // Toiminnot\n  hydrate: (payload: {\n    employees: Employee[];\n    dates: DateCell[];\n    shifts: ShiftRow[];\n  }) => void;\n\n  applyCellChange: (p: { employee_id: string; work_date: string; hours: number | null }) => void;\n\n  saveAll: () => Promise<void>;\n\n  undo: () => void;\n  redo: () => void;\n};\n\nfunction keyOf(empId: string, iso: string) {\n  return `${empId}|${iso}`;\n}\n\nfunction todayLocalISO() {\n  const d = new Date();\n  d.setHours(0, 0, 0, 0);\n  const yyyy = d.getFullYear();\n  const mm = String(d.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(d.getDate()).padStart(2, \"0\");\n  return `${yyyy}-${mm}-${dd}`;\n}\n\nexport const useScheduleStore = create<State>()(\n  persist(\n  devtools((set, get) => ({\n    employees: [],\n    dates: [],\n    shiftsMap: {},\n    pending: {},\n    undoStack: [],\n    redoStack: [],\n    dirty: false,\n    hasHydrated: false,\n    _setHydrated: (v) => set({ hasHydrated: v }),\n    \n     // ---Filtterit (init + setterit juureen)---\n     filters: { departments: [], showActive: false, showInactive: false, searchTerm: \"\" },\n     setFilters: (partial) =>\n       set((state) => ({ filters: { ...state.filters, ...partial } })),\n     resetFilters: () =>\n       set({ filters: { departments: [], showActive: false, showInactive: false, searchTerm: \"\" } }),\n\nstartDateISO: todayLocalISO(),\ndays: 10 as State[\"days\"],\n\n    hydrate: ({ employees, dates, shifts }) => {\n      // Rakennetaan map shifteistä\n      const map: Record<string, ShiftRow> = {};\n      for (const s of shifts) {\n        map[keyOf(s.employee_id, s.work_date)] = {\n          ...s,\n          hours: s.hours ?? 0,\n          // Varmista että type on unionista (tai normal jos tuntematon)\n          type:\n            s.type === \"normal\" ||\n            s.type === \"locked\" ||\n            s.type === \"absent\" ||\n            s.type === \"holiday\"\n              ? s.type\n              : \"normal\",\n        };\n      }\n      set({\n        employees,\n        dates,\n        shiftsMap: map,\n        pending: {},\n        undoStack: [],\n        redoStack: [],\n        dirty: false,\n      });\n    },\n\n    applyCellChange: ({ employee_id, work_date, hours }) => {\n      const h = typeof hours === \"number\" ? hours : 0;\n      const k = keyOf(employee_id, work_date);\n      const { shiftsMap, pending, undoStack } = get();\n\n      // Laske edellinen arvo (käytetään undo:ssa)\n      const prev = shiftsMap[k];\n\n      // Päivitä live-näkymään:\n      const nextMap = { ...shiftsMap };\n      if (h <= 0) {\n        // 0h => poista vuoro näkyvistä\n        delete nextMap[k];\n      } else {\n        // >0h => laita normal-h vuoro\n        nextMap[k] = {\n          employee_id,\n          work_date,\n          type: \"normal\",\n          hours: h,\n        };\n      }\n\n      // Päivitä pending: 0h => merkkaa poistoksi, muuten upsertiksi\n      const nextPending = { ...pending, [k]: { employee_id, work_date, hours: h } };\n\n      set({\n        shiftsMap: nextMap,\n        pending: nextPending,\n        undoStack: [...undoStack, { employee_id, work_date, hours: prev?.hours ?? 0 }],\n        redoStack: [],\n        dirty: true,\n      });\n    },\n\nsetRange: (startISO, days) => set({ startDateISO: startISO, days }),\nsetStartDate: (startDateISO: string) => set({ startDateISO }),\nshiftRange: (deltaDays: number) => {\n  const { startDateISO, days } = get();\n  const d = new Date(startDateISO + \"T00:00:00Z\");\n  d.setUTCDate(d.getUTCDate() + deltaDays);\n  set({ startDateISO: d.toISOString().slice(0, 10), days });\n},\n\nsaveAll: async () => {\n  const { pending } = get();\n  const changes = Object.values(pending);\n  if (!changes.length) {\n    toast.info(\"Ei tallennettavia muutoksia\");\n    return;\n  }\n\n  const upserts: ShiftRow[] = [];\n  const deletes: { employee_id: string; work_date: string }[] = [];\n\n  for (const c of changes) {\n    if (c.hours <= 0) {\n      deletes.push({ employee_id: c.employee_id, work_date: c.work_date });\n    } else {\n      upserts.push({\n        employee_id: c.employee_id,\n        work_date: c.work_date,\n        type: \"normal\",\n        hours: c.hours,\n      });\n    }\n  }\n\n  try {\n    // 1) Upsertit ensin (turvallista ja idempotenttia)\n    if (upserts.length) {\n      const { error } = await supabase\n        .from(\"shifts\")\n        .upsert(upserts, { onConflict: \"employee_id,work_date\" });\n      if (error) throw error;\n    }\n\n    // 2) Poistot **ilman ristiin-IN-bugia**: ryhmittele työntekijöittäin\n    if (deletes.length) {\n      const byEmp = new Map<string, string[]>();\n      for (const d of deletes) {\n        const arr = byEmp.get(d.employee_id) ?? [];\n        arr.push(d.work_date);\n        byEmp.set(d.employee_id, arr);\n      }\n\n      // Chunkkaa päivämääriä per employee_id, jotta IN-listat eivät kasva liikaa\n      for (const [empId, dates] of byEmp.entries()) {\n        const chunkSize = 1000;\n        for (let i = 0; i < dates.length; i += chunkSize) {\n          const sub = dates.slice(i, i + chunkSize);\n          const { error } = await supabase\n            .from(\"shifts\")\n            .delete()\n            .eq(\"employee_id\", empId) // kriittinen: kohdistus yhteen employeeen\n            .in(\"work_date\", sub);    // vain kyseisen employee_id:n päivät\n          if (error) throw error;\n        }\n      }\n    }\n\n    set({ pending: {}, dirty: false });\n    toast.success(\"Tallennettu\");\n  } catch (e) {\n    console.error(e);\n    toast.error(\"Tallennus epäonnistui\");\n    // Älä nollaa pendingiä epäonnistumisessa\n  }\n},\n\n\n    undo: () => {\n      const { undoStack, shiftsMap, pending, redoStack } = get();\n      if (!undoStack.length) return;\n      const last = undoStack[undoStack.length - 1];\n\n      const k = keyOf(last.employee_id, last.work_date);\n      const current = shiftsMap[k]; // mitä on nyt UI:ssa\n\n      // Palauta entinen tuntimäärä\n      const nextMap = { ...shiftsMap };\n      if (!last.hours || last.hours <= 0) {\n        delete nextMap[k];\n      } else {\n        nextMap[k] = {\n          employee_id: last.employee_id,\n          work_date: last.work_date,\n          type: \"normal\",\n          hours: last.hours,\n        };\n      }\n\n      // Päivitä pending vastaamaan undo-tilaa\n      const nextPending = { ...pending, [k]: { employee_id: last.employee_id, work_date: last.work_date, hours: last.hours ?? 0 } };\n\n      // Siirrä nykyinen tila redo-pinon itemiksi\n      const redoItem: PendingChange = {\n        employee_id: last.employee_id,\n        work_date: last.work_date,\n        hours: current?.hours ?? 0,\n      };\n\n      set({\n        shiftsMap: nextMap,\n        pending: nextPending,\n        undoStack: undoStack.slice(0, -1),\n        redoStack: [...redoStack, redoItem],\n        dirty: true,\n      });\n    },\n\n    redo: () => {\n      const { redoStack, shiftsMap, pending, undoStack } = get();\n      if (!redoStack.length) return;\n      const next = redoStack[redoStack.length - 1];\n\n      const k = keyOf(next.employee_id, next.work_date);\n      const prev = shiftsMap[k];\n\n      const nextMap = { ...shiftsMap };\n      if (!next.hours || next.hours <= 0) {\n        delete nextMap[k];\n      } else {\n        nextMap[k] = {\n          employee_id: next.employee_id,\n          work_date: next.work_date,\n          type: \"normal\",\n          hours: next.hours,\n        };\n      }\n\n      const nextPending = { ...pending, [k]: { ...next } };\n\n      set({\n        shiftsMap: nextMap,\n        pending: nextPending,\n        redoStack: redoStack.slice(0, -1),\n        undoStack: [...undoStack, { employee_id: next.employee_id, work_date: next.work_date, hours: prev?.hours ?? 0 }],\n        dirty: true,\n      });\n    },\n  })),\n    {\n      name: \"schedule-ui\", // avain localStorageen\n      version: 1,\n      storage:\n        typeof window !== \"undefined\"\n          ? createJSONStorage(() => localStorage)\n          : undefined,\n      // persistoi vain nämä (ei esim. shiftsMap tms.)\n      partialize: (state) => ({\n        startDateISO: state.startDateISO,\n        days: state.days,\n      }),\n      // Kun persist-hydraus valmistuu -> merkitse valmiiksi\n      onRehydrateStorage: () => (_state, error) => {\n        if (error) {\n          console.error(\"schedule-ui rehydrate failed\", error);\n          return;\n        }\n        // Ei 'set' scope:ssa -> kutsu action store-instanssin kautta\n        _state?._setHydrated?.(true);\n      },\n  }\n  )\n);\n\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 359
        }
      ]
    },
    {
      "path": "src/store/useSettingsStore.ts",
      "size": 6866,
      "sha256": "294dc83e38274572455d1850345f9353dccf732e12b7b0fedbc586d2b416199c",
      "lang": "typescript",
      "lines": 240,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/store/useSettingsStore.ts",
      "chunks": [
        {
          "i": 0,
          "text": "// stores/useSettingsStore.ts\nimport { create } from \"zustand\";\nimport { persist, subscribeWithSelector } from \"zustand/middleware\";\nimport {\n  Settings,\n  SettingsSchema,\n  DEFAULT_SETTINGS,\n  Theme,\n} from \"@/lib/settingsSchema\";\n\ntype State = {\n  settings: Settings;\n\n  setAll: (s: Settings) => void;\n  reset: () => void;\n\n  updateGeneral: <K extends keyof Settings[\"general\"]>(\n    key: K,\n    value: Settings[\"general\"][K]\n  ) => void;\n\n  updateAutoGen: <K extends keyof Settings[\"autoGeneration\"]>(\n    key: K,\n    value: Settings[\"autoGeneration\"][K]\n  ) => void;\n\n  updateExport: <K extends keyof Settings[\"export\"]>(\n    key: K,\n    value: Settings[\"export\"][K]\n  ) => void;\n\n  updateNotifications: <K extends keyof Settings[\"notifications\"]>(\n    key: K,\n    value: Settings[\"notifications\"][K]\n  ) => void;\n\n  updateSystem: <K extends keyof Settings[\"system\"]>(\n    key: K,\n    value: Settings[\"system\"][K]\n  ) => void;\n\n  importFromJson: (raw: unknown) =>\n    | { ok: true }\n    | { ok: false; error: string };\n\n  exportToFile: () => void;\n  hasHydrated: boolean;\n  _setHydrated: (v: boolean) => void;\n};\n\n// ✅ OIKEA KOKOONPANO: persist(subscribeWithSelector(config), options)\nexport const useSettingsStore = create<State>()(\n  persist(\n    subscribeWithSelector<State>((set, get) => ({\n      settings: DEFAULT_SETTINGS,\n\n      setAll: (s) => set({ settings: s }),\n      reset: () => set({ settings: DEFAULT_SETTINGS }),\n\n      updateGeneral: (key, value) =>\n        set((st) => ({\n          settings: {\n            ...st.settings,\n            general: { ...st.settings.general, [key]: value },\n          },\n        })),\n\n      updateAutoGen: (key, value) =>\n        set((st) => ({\n          settings: {\n            ...st.settings,\n            autoGeneration: {\n              ...st.settings.autoGeneration,\n              [key]: value,\n            },\n          },\n        })),\n\n      updateExport: (key, value) =>\n        set((st) => ({\n          settings: {\n            ...st.settings,\n            export: { ...st.settings.export, [key]: value },\n          },\n        })),\n\n      updateNotifications: (key, value) =>\n        set((st) => ({\n          settings: {\n            ...st.settings,\n            notifications: {\n              ...st.settings.notifications,\n              [key]: value,\n            },\n          },\n        })),\n\n      updateSystem: (key, value) =>\n        set((st) => ({\n          settings: {\n            ...st.settings,\n            system: { ...st.settings.system, [key]: value },\n          },\n        })),\n\n      importFromJson: (raw) => {\n        let data: unknown = raw;\n        if (typeof raw === \"string\") {\n          try {\n            data = JSON.parse(raw);\n          } catch {\n            return {\n              ok: false as const,\n              error: \"Virheellinen JSON: ei voitu jäsentää.\",\n            };\n          }\n        }\n\n        const parsed = SettingsSchema.safeParse(data);\n        if (!parsed.success) {\n          const msg = parsed.error.issues\n            .map((i) => `${i.path.join(\".\") || \"(root)\"}: ${i.message}`)\n            .join(\"; \");\n          return { ok: false as const, error: msg };\n        }\n\n        set({ settings: parsed.data });\n        return { ok: true as const };\n      },\n\n      exportToFile: () => {\n        const data = JSON.stringify(get().settings, null, 2);\n        const blob = new Blob([data], { type: \"application/json\" });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = \"soili-settings.json\";\n        document.body.appendChild(a);\n        a.click();\n        a.remove();\n        URL.revokeObjectURL(url);\n      },\n\n      hasHydrated: false,\n      _setHydrated: (v) => set({ hasHydrated: v }),\n\n    })),\n    {\n      name: \"soili-settings-v2\",\n          version: 2,\nmigrate: (persisted: unknown): State => {\n  try {\n    // jos dataa ei ole → palauta default state\n    if (!persisted || typeof persisted !== \"object\") {\n      return { settings: DEFAULT_SETTINGS, hasHydrated: false, _setHydrated: () => {}, setAll: () => {}, reset: () => {}, updateGeneral: () => {}, updateAutoGen: () => {}, updateExport: () => {}, updateNotifications: () => {}, updateSystem: () => {}, importFromJson: () => ({ ok: false, error: \"not implemented\" }), exportToFile: () => {} } as State;\n    }\n\n    const st = persisted as State;\n    if (!st?.settings) {\n      return { ...st, settings: DEFAULT_SETTINGS };\n    }\n\n    const prevNotifs: Partial<Settings[\"notifications\"]> | undefined =\n      st.settings.notifications;\n\n    const nextNotifs: Settings[\"notifications\"] = {\n      ...prevNotifs,\n      adminNotificationEmails: Array.isArray(\n        prevNotifs?.adminNotificationEmails\n      )\n        ? prevNotifs!.adminNotificationEmails!\n        : [],\n      emailNotifications:\n        prevNotifs?.emailNotifications ?? DEFAULT_SETTINGS.notifications.emailNotifications,\n      absenceRequests:\n        prevNotifs?.absenceRequests ?? DEFAULT_SETTINGS.notifications.absenceRequests,\n      scheduleChanges:\n        prevNotifs?.scheduleChanges ?? DEFAULT_SETTINGS.notifications.scheduleChanges,\n      employeeUpdates:\n        prevNotifs?.employeeUpdates ?? DEFAULT_SETTINGS.notifications.employeeUpdates,\n      systemUpdates:\n        prevNotifs?.systemUpdates ?? DEFAULT_SETTINGS.notifications.systemUpdates,\n      dailyDigest:\n        prevNotifs?.dailyDigest ?? DEFAULT_SETTINGS.notifications.dailyDigest,\n      digestTime:\n        prevNotifs?.digestTime ?? DEFAULT_SETTINGS.notifications.digestTime,\n    };\n\n    return {\n      ...st,\n      settings: {\n        ...st.settings,\n        notifications: nextNotifs,\n      },\n    };\n  } catch {\n    // fallback jos jotain hajoaa → default state\n    return { settings: DEFAULT_SETTINGS } as State;\n  }\n},\n\n\n      onRehydrateStorage: () => (_state, error) => {\n        if (error) {\n          console.error(\"settings-store rehydrate failed\", error);\n          return;\n        }\n        _state?._setHydrated?.(true);\n      },\n    }\n  )\n);\n\n// (valinnainen) teema- ja push-sivuvaikutukset:\nif (typeof window !== \"undefined\") {\n  const applyTheme = (theme: Theme) => {\n    const root = document.documentElement;\n    const prefersDark =\n      window.matchMedia?.(\"(prefers-color-scheme: dark)\").matches;\n    const eff = theme === \"system\" ? (prefersDark ? \"dark\" : \"light\") : theme;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(eff);\n  };\n\n  applyTheme(useSettingsStore.getState().settings.general.theme);\n\n  useSettingsStore.subscribe(\n    (s) => s.settings.general.theme,\n    (theme) => applyTheme(theme)\n  );\n}\n\n// Apukoukku jos haluat kytkeä autosaven muualle\nexport function useAutoSaveConfig() {\n  return useSettingsStore((s) => ({\n    enabled: s.settings.general.autoSave,\n    intervalSec: s.settings.general.autoSaveInterval,\n  }));\n}\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 240
        }
      ]
    },
    {
      "path": "src/app/components/AbsenceControlPanel.tsx",
      "size": 14007,
      "sha256": "3db75bfed5f5d1f54f7f5c120a65a8a86aa2f11c5bcec1649bd044ce89fb826e",
      "lang": "tsx",
      "lines": 360,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/AbsenceControlPanel.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { Avatar, AvatarFallback } from './ui/avatar';\nimport { Textarea } from './ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from './ui/dialog';\nimport { \n  Clock, \n  CheckCircle, \n  XCircle, \n  Calendar,\n  MessageSquare,\n  User,\n  AlertTriangle\n} from 'lucide-react';\nimport { AbsenceRequest } from '../types';\nimport { toast } from 'sonner';\nimport { supabase } from '@/lib/supaBaseClient';\nimport { notifyAbsenceDecision } from '@/features/absences/notify';\nimport { useSettingsStore } from \"@/store/useSettingsStore\";\n\nconst AbsenceControlPanel = () => {\n  const [requests, setRequests] = useState<AbsenceRequest[]>([]);\n  const [adminResponse, setAdminResponse] = useState('');\n\n  const emailEnabled =\n  useSettingsStore((s) => s.settings?.notifications?.emailNotifications ?? true);\n\n  // --- FETCH FROM SUPABASE ---\n  useEffect(() => {\n    const fetchAbsences = async () => {\nconst { data, error } = await supabase\n  .from('absences')\n  .select(`\n    id,\n    employee_id,\n    start_date,\n    end_date,\n    reason,\n    message,\n    status,\n    submitted_at,\n    employees:employees!absences_employee_id_fkey ( name )\n  `)\n  .order('submitted_at', { ascending: false });\n\nif (error) {\n  console.error(error);\n  toast.error('Poissaolojen haku epäonnistui');\n  return;\n}\n\ntype AbsenceRow = {\n  id: string;\n  employee_id: string;\n  start_date: string;\n  end_date: string | null;\n  reason: string | null;\n  message: string | null;\n  status: 'pending' | 'approved' | 'declined';\n  submitted_at: string;\n  employees?: { name: string }[] | { name: string } | null;\n};\n\nconst mapped: AbsenceRequest[] = (data as AbsenceRow[]).map((r) => {\n  const employeeName = Array.isArray(r.employees)\n    ? r.employees[0]?.name\n    : r.employees?.name;\n\n  return {\n    id: r.id,\n    employeeId: r.employee_id,\n    employeeName: employeeName ?? 'Tuntematon',\n    startDate: r.start_date,\n    endDate: r.end_date ?? '',\n    reason: r.reason ?? '',\n    status: r.status,\n    submittedAt: r.submitted_at,\n    message: r.message ?? '',\n  };\n});\n\n\n      setRequests(mapped);\n      \n    };\n\n    fetchAbsences();\n  }, []);\n\n  // --- STATUS HELPERS (UI) ---\n  const getStatusBadge = (status: AbsenceRequest['status']) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" className=\"bg-amber-50 text-amber-700 border-amber-300\"><Clock className=\"w-3 h-3 mr-1\" />Odottaa</Badge>;\n      case 'approved':\n        return <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-300\"><CheckCircle className=\"w-3 h-3 mr-1\" />Hyväksytty</Badge>;\n      case 'declined':\n        return <Badge variant=\"outline\" className=\"bg-red-50 text-red-700 border-red-300\"><XCircle className=\"w-3 h-3 mr-1\" />Hylätty</Badge>;\n    }\n  };\n\n  // --- SUPABASE UPDATES ---\nconst handleApprove = async (requestId: string) => {\n  // Optimistinen päivitys\n  setRequests(prev => prev.map(r => r.id === requestId ? { ...r, status: 'approved' } : r));\n\n  const target = requests.find(r => r.id === requestId);\n  const { error } = await supabase.from('absences').update({ status: 'approved' }).eq('id', requestId);\n  if (error) {\n    console.error('[ABSENCE APPROVE ERROR]', error.code, error.message, error.details);\n    // revert\n    setRequests(prev => prev.map(r => r.id === requestId ? { ...r, status: 'pending' } : r));\n    toast.error('Hyväksyntä epäonnistui');\n    return;\n  }\n  // Lähetä sähköposti + loki notify.ts:n kautta (ei kaadeta hyväksyntää, jos maili epäonnistuu)\n  if (emailEnabled && target) {\n    try {\n      await notifyAbsenceDecision({\n        employeeId: target.employeeId,\n        status: \"approved\",\n        startDate: target.startDate,\n        endDate: target.endDate || null,\n        adminMessage: adminResponse?.trim() || undefined,\n      });\n    } catch (e) {\n      console.error(\"[EMAIL APPROVE ERROR]\", e);\n      toast.error(\"Sähköpostin lähetys epäonnistui (hyväksyntä tallessa).\");\n    }\n  }\n  toast.success('Poissaolopyyntö hyväksytty');\n};\n\n\nconst handleDecline = async (requestId: string) => {\n  setRequests(prev => prev.map(r => r.id === requestId ? { ...r, status: 'declined' } : r));\n\n  const target = requests.find(r => r.id === requestId);\n  const { error } = await supabase.from('absences').update({ status: 'declined' }).eq('id', requestId);\n  if (error) {\n    console.error('[ABSENCE DECLINE ERROR]', error.code, error.message, error.details);\n    setRequests(prev => prev.map(r => r.id === requestId ? { ...r, status: 'pending' } : r));\n    toast.error('Hylkäys epäonnistui');\n    return;\n  }\n\n  if (emailEnabled && target) {\n    try {\n      await notifyAbsenceDecision({\n        employeeId: target.employeeId,\n        status: \"declined\",\n        startDate: target.startDate,\n        endDate: target.endDate || null,\n        adminMessage: adminResponse?.trim() || undefined,\n      });\n    } catch (e) {\n      console.error(\"[EMAIL DECLINE ERROR]\", e);\n      toast.error(\"Sähköpostin lähetys epäonnistui (hylkäys tallessa).\");\n    }\n  }\n  toast.success('Poissaolopyyntö hylätty');\n};\n\n\n  // --- DERIVED LISTS (UI pysyy samana) ---\n  const pendingRequests = requests.filter(req => req.status === 'pending');\n  const processedRequests = requests.filter(req => req.status !== 'pending');\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return '';\n    return new Date(dateString).toLocaleDateString('fi-FI', {\n      day: 'numeric',\n      month: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  const formatDateTime = (dateString: string) => {\n    if (!dateString) return '';\n    return new Date(dateString).toLocaleDateString('fi-FI', {\n      day: 'numeric',\n      month: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Pending Requests */}\n      <Card className=\"shadow-lg border-0 bg-gradient-to-r from-background to-secondary/20\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <AlertTriangle className=\"w-6 h-6 text-amber-500\" />\n              <CardTitle className=\"text-xl text-primary\">Odottavat poissaolopyynnöt</CardTitle>\n            </div>\n            <Badge variant=\"secondary\" className=\"px-3 py-1\">\n              {pendingRequests.length} pyyntöä\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {pendingRequests.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Calendar className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n              <p>Ei odottavia poissaolopyyntöjä</p>\n            </div>\n          ) : (\n            pendingRequests.map((request) => (\n              <div key={request.id} className=\"border border-border rounded-lg p-4 bg-background hover:shadow-md transition-shadow\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start space-x-3 flex-1\">\n                    <Avatar className=\"w-10 h-10\">\n                      <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                        {request.employeeName?.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <h4 className=\"font-medium\">{request.employeeName}</h4>\n                        {getStatusBadge(request.status)}\n                      </div>\n                      <div className=\"space-y-1 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center gap-2\">\n                          <Calendar className=\"w-4 h-4\" />\n                          <span>\n                            {formatDate(request.startDate)} \n                            {request.startDate !== request.endDate && ` - ${formatDate(request.endDate)}`}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <User className=\"w-4 h-4\" />\n                          <span>Syy: {request.reason}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Clock className=\"w-4 h-4\" />\n                          <span>Jätetty: {formatDateTime(request.submittedAt || '')}</span>\n                        </div>\n                      </div>\n                      {request.message && (\n                        <div className=\"mt-3 p-3 bg-muted/50 rounded-md\">\n                          <div className=\"flex items-start gap-2\">\n                            <MessageSquare className=\"w-4 h-4 mt-0.5 text-muted-foreground\" />\n                            <p className=\"text-sm\">{request.message}</p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2 ml-4\">\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <div\n                          className=\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-3 cursor-pointer\"\n                        >\n                          <MessageSquare className=\"w-4 h-4 mr-2\" />\n                          Vastaa\n                        </div>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Vastaa poissaolopyyntöön</DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          <div className=\"space-y-2\">\n                            <label className=\"text-sm font-medium\">Viesti työntekijälle:</label>\n                            <Textarea \n                              value={adminResponse}\n                              onChange={(e) => setAdminResponse(e.target.value)}\n                              placeholder=\"Kirjoita viesti...\"\n                              className=\"min-h-[100px]\"\n                            />\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button \n                              onClick={() => {\n                                handleApprove(request.id);\n                                setAdminResponse('');\n                              }}\n                              className=\"flex-1\"\n                            >\n                              <CheckCircle className=\"w-4 h-4 mr-2\" />\n                              Hyväksy\n                            </Button>\n                            <Button \n                              variant=\"destructive\"\n                              onClick={() => {\n                                handleDecline(request.id);\n                                setAdminResponse('');\n                              }}\n                              className=\"flex-1\"\n                            >\n                              <XCircle className=\"w-4 h-4 mr-2\" />\n                              Hylkää\n                            </Button>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                    <Button \n                      size=\"sm\"\n                      onClick={() => handleApprove(request.id)}\n                      className=\"bg-green-600 hover:bg-green-700\"\n                    >\n                      <CheckCircle className=\"w-4 h-4\" />\n                    </Button>\n                    <Button \n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => handleDecline(request.id)}\n                    >\n                      <XCircle className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Processed Requests */}\n      <Card className=\"shadow-md\">\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"text-lg\">Käsitellyt pyynnöt</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {processedRequests.map((request) => (\n              <div key={request.id} className=\"flex items-center justify-between p-3 border border-border rounded-md bg-muted/30\">\n                <div className=\"flex items-center space-x-3\">\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarFallback className=\"text-xs\">\n                      {request.employeeName?.split(' ').map(n => n[0]).join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <p className=\"font-medium text-sm\">{request.employeeName}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {formatDate(request.startDate)} - {request.reason}\n                    </p>\n                  </div>\n                </div>\n                {getStatusBadge(request.status)}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default AbsenceControlPanel;\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 360
        }
      ]
    },
    {
      "path": "src/app/components/EmployeeList.tsx",
      "size": 21543,
      "sha256": "c185c01997f0c6279b0765a18dd5c7d60f4c7fc4def77eccd23500ce53e6c8a5",
      "lang": "tsx",
      "lines": 616,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/EmployeeList.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Badge } from \"./ui/badge\";\nimport { Avatar, AvatarFallback } from \"./ui/avatar\";\nimport { Switch } from \"./ui/switch\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"./ui/dialog\";\nimport { Label } from \"./ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"./ui/select\";\nimport {\n  Users,\n  Plus,\n  Edit3,\n  Trash2,\n  Search,\n  UserCheck,\n  UserX,\n  Mail,\n  Building,\n} from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/lib/supaBaseClient\";\n\n// Sama tyyppi kuin sulla (shifts jätetään tyhjäksi tässä vaiheessa)\ntype Employee = {\n  id: string;\n  name: string;\n  email: string;\n  department: string;\n  isActive: boolean;\n  shifts: Array<unknown>;\n};\n\nconst EmployeeList = () => {\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  // Hakusuodatus\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const [customDepartment, setCustomDepartment] = useState(\"\");\n  const [editCustomDepartment, setEditCustomDepartment] = useState(\"\");\n\n  const [creatingNewDept, setCreatingNewDept] = useState(false);\n  const [editCreatingNewDept, setEditCreatingNewDept] = useState(false);\n\n  // Edit/Add dialogit\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [newEmployee, setNewEmployee] = useState({\n    name: \"\",\n    email: \"\",\n    department: \"\",\n    isActive: true,\n  });\n\n  // 1) HAKU DB:stä\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from(\"employees\")\n        .select(\"id, name, email, department, is_active, created_at\")\n        .order(\"created_at\", { ascending: true });\n\n      if (error) {\n        console.error(error);\n        toast.error(\"Työntekijöiden haku epäonnistui\");\n      } else {\n        // Mapataan snake_case -> camelCase\n\n          type EmployeeRow = {\n          id: string;\n          name: string;\n          email: string;\n          department: string;\n          is_active: boolean;\n          created_at: string; // tai Date, jos haluat käsitellä sitä\n          };\n\n          const mapped: Employee[] = (data ?? []).map((row: EmployeeRow) => ({\n          id: row.id,\n          name: row.name,\n          email: row.email,\n          department: row.department,\n          isActive: !!row.is_active,\n          shifts: [], // ei vielä käytössä\n        }));\n        setEmployees(mapped);\n      }\n      setLoading(false);\n    })();\n  }, []);\n\n  // 2) LISÄYS\nasync function handleAddEmployee() {\n  const name = newEmployee.name.trim();\n  const email = newEmployee.email.trim();\n  const dep = (newEmployee.department ?? \"\").trim();\n\n  if (!name || !email || !dep) {\n    toast.error(\"Täytä kaikki pakolliset kentät\");\n    return;\n  }\n  if (dep.toLowerCase() === \"uusi osasto\") {\n    toast.error(\"Kirjoita osaston nimi.\");\n    return;\n  }\n\n  const { data, error } = await supabase\n    .from(\"employees\")\n    .insert([{\n      name,\n      email,\n      department: dep,\n      is_active: newEmployee.isActive,\n    }])\n    .select(\"id, name, email, department, is_active, created_at\")\n    .single();\n\n    if (error) {\n      console.error(error);\n      toast.error(\"Lisäys epäonnistui\");\n      return;\n    }\n\n    const added: Employee = {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      department: data.department,\n      isActive: !!data.is_active,\n      shifts: [],\n    };\n\n    setEmployees((prev) => [...prev, added]);\n    setNewEmployee({ name: \"\", email: \"\", department: \"\", isActive: true });\n    setIsAddDialogOpen(false);\n    toast.success(`${added.name} lisätty`);\n      \n\n    await supabase.from(\"notifications\").insert({\n      type: \"employee_added\",\n      title: \"Uusi työntekijä lisätty\",\n      message: `${added.name} (${added.department}) lisättiin työntekijälistaan.`,\n    });\n  }\n\n  // 3) POISTO\n  async function handleDeleteEmployee(employeeId: string) {\n    const target = employees.find((e) => e.id === employeeId);\n    const { error } = await supabase.from(\"employees\").delete().eq(\"id\", employeeId);\n    if (error) {\n      console.error(error);\n      toast.error(\"Poisto epäonnistui\");\n      return;\n    }\n    setEmployees((prev) => prev.filter((e) => e.id !== employeeId));\n    toast.success(`${target?.name ?? \"Työntekijä\"} poistettu`);\n  }\n\n  // 4) AKTIIVINEN/EPÄAKTIIVINEN toggle\n  async function handleToggleActive(employeeId: string) {\n    const current = employees.find((e) => e.id === employeeId);\n    if (!current) return;\n\n    const nextActive = !current.isActive;\n    // Optimistic update\n    setEmployees((prev) =>\n      prev.map((e) => (e.id === employeeId ? { ...e, isActive: nextActive } : e))\n    );\n\n    const { error } = await supabase\n      .from(\"employees\")\n      .update({ is_active: nextActive })\n      .eq(\"id\", employeeId);\n\n    if (error) {\n      console.error(error);\n      // Revertoi jos meni pieleen\n      setEmployees((prev) =>\n        prev.map((e) => (e.id === employeeId ? { ...e, isActive: !nextActive } : e))\n      );\n      toast.error(\"Tilan muutos epäonnistui\");\n      return;\n    }\n\n    toast.success(`${current.name} ${nextActive ? \"aktivoitu\" : \"deaktivoitu\"}`);\n  }\n\n  // 5) EDIT / UPDATE\n  function handleEditEmployee(employee: Employee) {\n    setSelectedEmployee(employee);\n  }\n\n  async function handleUpdateEmployee() {\n    if (!selectedEmployee) return;\n\n    const { error } = await supabase\n      .from(\"employees\")\n      .update({\n        name: selectedEmployee.name,\n        email: selectedEmployee.email,\n        department: selectedEmployee.department,\n        is_active: selectedEmployee.isActive,\n      })\n      .eq(\"id\", selectedEmployee.id);\n\n    if (error) {\n      console.error(error);\n      toast.error(\"Päivitys epäonnistui\");\n      return;\n    }\n\n    setEmployees((prev) =>\n      prev.map((e) => (e.id === selectedEmployee.id ? selectedEmployee : e))\n    );\n    setSelectedEmployee(null);\n    toast.success(\"Työntekijätiedot päivitetty\");\n  }\n\n  // Johdetut arvot (kuten ennen)\n  const filteredEmployees = useMemo(() => {\n    const q = searchTerm.toLowerCase();\n    return employees.filter(\n      (e) =>\n        e.name.toLowerCase().includes(q) ||\n        e.email.toLowerCase().includes(q) ||\n        e.department.toLowerCase().includes(q)\n    );\n  }, [employees, searchTerm]);\n\n  const activeEmployees = employees.filter((e) => e.isActive).length;\nconst departments = useMemo(\n  () =>\n    [...new Set(\n      employees\n        .map(e => (e.department ?? \"\").trim())\n        .filter(v => v && v.toLowerCase() !== \"uusi osasto\")\n    )].sort((a, b) => a.localeCompare(b, \"fi\")),\n  [employees]\n);\n\n\n  // —— UI alla: pidetään sun alkuperäinen rakenne ——\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"shadow-lg border-0 bg-gradient-to-r from-background to-secondary/20\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Users className=\"w-6 h-6 text-primary\" />\n              <CardTitle className=\"text-xl text-primary\">Työntekijähallinta</CardTitle>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"secondary\" className=\"px-3 py-1\">\n                <UserCheck className=\"w-4 h-4 mr-2\" />\n                {activeEmployees} aktiivista\n              </Badge>\n\n              <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n                <DialogTrigger asChild>\n                  <div\n                    className=\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2 cursor-pointer\"\n                    onClick={() => setIsAddDialogOpen(true)}\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Lisää työntekijä\n                  </div>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Lisää uusi työntekijä</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"name\">Nimi *</Label>\n                      <Input\n                        id=\"name\"\n                        value={newEmployee.name}\n                        onChange={(e) =>\n                          setNewEmployee((p) => ({ ...p, name: e.target.value }))\n                        }\n                        placeholder=\"Etunimi Sukunimi\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Sähköposti *</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={newEmployee.email}\n                        onChange={(e) =>\n                          setNewEmployee((p) => ({ ...p, email: e.target.value }))\n                        }\n                        placeholder=\"etunimi.sukunimi@company.com\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"department\">Osasto *</Label>\n                      <Select\n  value={\n    creatingNewDept\n      ? \"NEW_DEPT\"\n      : (newEmployee.department || \"\")\n  }\n  onValueChange={(value) => {\n    if (value === \"NEW_DEPT\") {\n      setCreatingNewDept(true);\n      setCustomDepartment(\"\");\n      setNewEmployee(p => ({ ...p, department: \"\" })); // puhdas aloitus\n    } else {\n      setCreatingNewDept(false);\n      setCustomDepartment(\"\");\n      setNewEmployee(p => ({ ...p, department: value }));\n    }\n  }}\n>\n  <SelectTrigger>\n    <SelectValue placeholder=\"Valitse osasto\" />\n  </SelectTrigger>\n  <SelectContent>\n    {departments.map((dept) => (\n      <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n    ))}\n    <SelectItem value=\"NEW_DEPT\">+ Uusi osasto…</SelectItem>\n  </SelectContent>\n</Select>\n\n{creatingNewDept && (\n  <Input\n    placeholder=\"Kirjoita uusi osasto…\"\n    className=\"mt-2\"\n    value={customDepartment}\n    onChange={(e) => {\n      const v = e.target.value;\n      setCustomDepartment(v);\n      setNewEmployee(p => ({ ...p, department: v })); // päivitetään arvo, mutta ei piiloteta inputtia\n    }}\n  />\n)}\n\n\n\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"active\"\n                        checked={newEmployee.isActive}\n                        onCheckedChange={(checked) =>\n                          setNewEmployee((p) => ({ ...p, isActive: checked }))\n                        }\n                      />\n                      <Label htmlFor=\"active\">Aktiivinen työntekijä</Label>\n                    </div>\n                    <div className=\"flex gap-2 pt-4\">\n                      <Button onClick={handleAddEmployee} className=\"flex-1\" disabled={loading}>\n                        Lisää työntekijä\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setIsAddDialogOpen(false)}\n                        className=\"flex-1\"\n                      >\n                        Peruuta\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-4\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              placeholder=\"Hae työntekijöitä nimellä, sähköpostilla tai osastolla...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Employee List */}\n          <div className=\"space-y-3\">\n            {loading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">Ladataan…</div>\n            ) : (\n              filteredEmployees.map((employee) => (\n                <div\n                  key={employee.id}\n                  className=\"border border-border rounded-lg p-4 bg-background hover:shadow-md transition-shadow\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"w-12 h-12\">\n                        <AvatarFallback\n                          className={`${\n                            employee.isActive\n                              ? \"bg-primary text-primary-foreground\"\n                              : \"bg-muted text-muted-foreground\"\n                          }`}\n                        >\n                          {employee.name\n                            .split(\" \")\n                            .map((n) => n[0])\n                            .join(\"\")}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <h4 className=\"font-medium\">{employee.name}</h4>\n                          {employee.isActive ? (\n                            <Badge\n                              variant=\"outline\"\n                              className=\"bg-green-50 text-green-700 border-green-300\"\n                            >\n                              <UserCheck className=\"w-3 h-3 mr-1\" />\n                              Aktiivinen\n                            </Badge>\n                          ) : (\n                            <Badge\n                              variant=\"outline\"\n                              className=\"bg-gray-50 text-gray-700 border-gray-300\"\n                            >\n                              <UserX className=\"w-3 h-3 mr-1\" />\n                              Ei-aktiivinen\n                            </Badge>\n                          )}\n                        </div>\n                        <div className=\"space-y-1 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center gap-2\">\n                            <Mail className=\"w-4 h-4\" />\n                            <span>{employee.email}</span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Building className=\"w-4 h-4\" />\n                            <span>{employee.department}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Label htmlFor={`toggle-${employee.id}`} className=\"text-sm text-muted-foreground\">\n                          Aktiivinen\n                        </Label>\n                        <Switch\n                          id={`toggle-${employee.id}`}\n                          checked={employee.isActive}\n                          onCheckedChange={() => handleToggleActive(employee.id)}\n                        />\n                      </div>\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEditEmployee(employee)}>\n                        <Edit3 className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDeleteEmployee(employee.id)}\n                        className=\"text-destructive hover:text-destructive\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n\n          {!loading && filteredEmployees.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Users className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n              <p>Ei työntekijöitä hakukriteereillä</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Employee Dialog */}\n      <Dialog open={!!selectedEmployee} onOpenChange={() => setSelectedEmployee(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Muokkaa työntekijää</DialogTitle>\n          </DialogHeader>\n          {selectedEmployee && (\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-name\">Nimi</Label>\n                <Input\n                  id=\"edit-name\"\n                  value={selectedEmployee.name}\n                  onChange={(e) =>\n                    setSelectedEmployee((p) => (p ? { ...p, name: e.target.value } : p))\n                  }\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-email\">Sähköposti</Label>\n                <Input\n                  id=\"edit-email\"\n                  type=\"email\"\n                  value={selectedEmployee.email}\n                  onChange={(e) =>\n                    setSelectedEmployee((p) => (p ? { ...p, email: e.target.value } : p))\n                  }\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-department\">Osasto</Label>\n\n<Select\n  value={\n    editCreatingNewDept\n      ? \"NEW_DEPT\"\n      : (selectedEmployee?.department || \"\")\n  }\n  onValueChange={(value) => {\n    if (!selectedEmployee) return;\n    if (value === \"NEW_DEPT\") {\n      setEditCreatingNewDept(true);\n      setEditCustomDepartment(\"\");\n      setSelectedEmployee(p => p ? { ...p, department: \"\" } : p);\n    } else {\n      setEditCreatingNewDept(false);\n      setEditCustomDepartment(\"\");\n      setSelectedEmployee(p => p ? { ...p, department: value } : p);\n    }\n  }}\n>\n  <SelectTrigger>\n    <SelectValue placeholder=\"Valitse osasto\" />\n  </SelectTrigger>\n  <SelectContent>\n    {departments.map((dept) => (\n      <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n    ))}\n    <SelectItem value=\"NEW_DEPT\">+ Uusi osasto…</SelectItem>\n  </SelectContent>\n</Select>\n\n{editCreatingNewDept && (\n  <Input\n    placeholder=\"Kirjoita uusi osasto…\"\n    className=\"mt-2\"\n    value={editCustomDepartment}\n    onChange={(e) => {\n      const v = e.target.value;\n      setEditCustomDepartment(v);\n      setSelectedEmployee(p => p ? { ...p, department: v } : p);\n    }}\n  />\n)}\n\n\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"edit-active\"\n                  checked={selectedEmployee.isActive}\n                  onCheckedChange={(checked) =>\n                    setSelectedEmployee((p) => (p ? { ...p, isActive: checked } : p))\n                  }\n                />\n                <Label htmlFor=\"edit-active\">Aktiivinen työntekijä</Label>\n              </div>\n              <div className=\"flex gap-2 pt-4\">\n                <Button onClick={handleUpdateEmployee} className=\"flex-1\">\n                  Tallenna muutokset\n                </Button>\n                <Button variant=\"outline\" onClick={() => setSelectedEmployee(null)} className=\"flex-1\">\n                  Peruuta\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Department Statistics */}\n      <Card className=\"shadow-md\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Osastotilastot</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {useMemo(() => {\n              const depts = [...new Set(employees.map((e) => e.department))];\n              return depts.map((department) => {\n                const deptEmployees = employees.filter((e) => e.department === department);\n                const activeDeptEmployees = deptEmployees.filter((e) => e.isActive);\n                return (\n                  <div key={department} className=\"text-center p-3 border border-border rounded-lg\">\n                    <h4 className=\"font-medium mb-2\">{department}</h4>\n                    <div className=\"text-2xl font-bold text-primary\">{activeDeptEmployees.length}</div>\n                    <div className=\"text-xs text-muted-foreground\">{deptEmployees.length} yhteensä</div>\n                  </div>\n                );\n              });\n            }, [employees])}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default EmployeeList;\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 616
        }
      ]
    },
    {
      "path": "src/app/components/ScheduleTable.tsx",
      "size": 20632,
      "sha256": "74de566284b518e463ef684c4d0884488899322c835ac566ca0b669a092d1697",
      "lang": "tsx",
      "lines": 608,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ScheduleTable.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Badge } from \"./ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Calendar, Clock, Users, AlertCircle, Lock, Plane, Plus, Filter } from \"lucide-react\";\nimport { ShiftType, Employee, DateInfo } from \"../types\";\nimport { supabase } from \"@/lib/supaBaseClient\";\nimport { toast } from \"sonner\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"./ui/popover\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { useScheduleStore } from \"@/store/useScheduleStore\";\nimport { useSettingsStore } from \"@/store/useSettingsStore\";\nimport { alignToWeekStart } from \"@/lib/dateUtils\";\nimport { logError, logInfo } from \"@/lib/logger\";\n\n\n\n\ntype DateCell = DateInfo & { iso: string };\n\n        type EmployeeRow = {\n          id: string;\n          name: string;\n          email: string;\n          department: string;\n          is_active: boolean;\n        };\n\n        type AbsenceRow = {\n  employee_id: string;\n  start_date: string;\n  end_date: string | null;\n  reason: string | null;\n  status: \"pending\" | \"approved\" | \"declined\";\n};\n\n\n\ninterface ScheduleTableProps {\n  employees?: Employee[]; // säilytetään signatuuri\n}\n\n\nfunction addDaysISO(iso: string, add: number) {\n  // \"T00:00:00\" poistaa aikavyöhykkeen heiton\n  const d = new Date(iso + \"T00:00:00Z\");\n  d.setUTCDate(d.getUTCDate() + add);\n  return d.toISOString().slice(0, 10);\n}\n\nfunction fiWeekdayShort(d: Date) {\n  // su-to klo 0 locale -> FI näyttää ma, ti, ke...\n  return d\n    .toLocaleDateString(\"fi-FI\", { weekday: \"short\" })\n    .replace(\".\", \"\")\n    .toUpperCase()\n    .slice(0, 2);\n}\n\n function fiDayMonth(d: Date) {\n   const day = d.getDate();\n   const month = d.getMonth() + 1;\n   return `${day}.${month}`;\n }\n\n// 🆕 FI-normalisointi (lowercase + diakriittien poisto)\nfunction normalizeFi(s: string) {\n  return (s || \"\")\n    .toLowerCase()\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\");\n}\n\n const DEFAULT_FILTERS = {\n  departments: [] as string[],\n  showActive: false,\n  showInactive: false,\n  searchTerm: \"\",\n}\n\n\nconst ScheduleTable: React.FC<ScheduleTableProps> = () => {\n\nconst startISO = useScheduleStore((s) => s.startDateISO);\nconst days = useScheduleStore((s) => s.days);\nconst weekStartDay = useSettingsStore((s) => s.settings.general.weekStartDay);\n\nconst alignedStart = useMemo(\n  () => alignToWeekStart(startISO, weekStartDay),\n  [startISO, weekStartDay]\n);\n\n\n\nconst shiftsMap = useScheduleStore((s) => s.shiftsMap) ?? {};\nconst filters = useScheduleStore((s) => s.filters) ?? DEFAULT_FILTERS;\n\n//tila-filtteri on aktiivinen, jos vain toinen on päällä\nconst stateFilterActive = filters.showActive !== filters.showInactive;\n\nconst employees = useScheduleStore(s => s.employees);\nconst filteredEmployees = useMemo(() => {\n  const term = normalizeFi((filters.searchTerm ?? \"\").trim());\n  return employees.filter((emp) => {\n    // department\n    if (filters.departments.length > 0 && !filters.departments.includes(emp.department)) {\n      return false;\n    }\n    // active/inactive XOR\n    if (stateFilterActive) {\n      if (filters.showActive && !emp.isActive) return false;\n      if (filters.showInactive && emp.isActive) return false;\n    }\n    // search (nimi + email + osasto)\n    if (term.length > 0) {\n      const hay =\n        normalizeFi(emp.name) +\n        \" \" +\n        normalizeFi(emp.email) +\n        \" \" +\n        normalizeFi(emp.department);\n      if (!hay.includes(term)) return false;\n    }\n    return true;\n  });\n}, [employees, filters, stateFilterActive]);\n  \n  const [loading, setLoading] = useState(true);\n  const [selectedCell, setSelectedCell] = useState<{ employee: string; day: number } | null>(null);\n  const [openPopover, setOpenPopover] = useState<string | null>(null);\n\n\n\n\n  // Päivärivi tuotetaan ISO:sta -> näyttää täsmälleen sun UI:n kaltaisen otsikon\nconst dates: DateCell[] = useMemo(() => {\n  return Array.from({ length: days }).map((_, i): DateCell => {\n    const iso = addDaysISO(alignedStart, i);\n    const d = new Date(iso + \"T00:00:00Z\");\n    return { day: fiWeekdayShort(d), date: fiDayMonth(d), iso };\n  });\n}, [alignedStart, days]);\n\n  // Alignaa heti mountissa ja aina kun viikon aloituspäivä muuttuu,\n  // jotta näkymä on johdonmukainen myös ilman Toolbarin efektiä.\n\n\n  // Vuorot mapattuna: key = `${employee_id}|${work_date}`\n  \n\n// 1) Hae työntekijät + 2) hae vuorot valitulle jaksolle\nuseEffect(() => {\n  (async () => {\n    try {\n      setLoading(true);\n      // Employees\n      const { data: empData, error: empErr } = await supabase\n        .from(\"employees\")\n        .select(\"id, name, email, department, is_active, created_at\")\n        .order(\"created_at\", { ascending: true });\n      if (empErr) throw empErr;\n\n      const mappedEmp: Employee[] = (empData ?? []).map((row: EmployeeRow) => ({\n        id: row.id,\n        name: row.name,\n        email: row.email,\n        department: row.department,\n        isActive: !!row.is_active,\n        shifts: [] as ShiftType[],\n      }));\n\n      const { data: s, error: sErr } = await supabase\n        .from(\"shifts\")\n        .select(\"employee_id, work_date, type, hours\")\n        .gte(\"work_date\", dates[0].iso)\n        .lte(\"work_date\", dates[dates.length - 1].iso)\n        .in(\"employee_id\", mappedEmp.map((e) => e.id));\n      if (sErr) throw sErr;\n\n      useScheduleStore.getState().hydrate({\n        employees: mappedEmp,\n        dates,\n        shifts: (s ?? []).map((r) => ({\n          employee_id: r.employee_id,\n          work_date: r.work_date,\n          type: r.type as \"normal\" | \"locked\" | \"absent\" | \"holiday\",\n          hours: r.hours ?? 0,\n        })),\n      });\n\n      const { data: abs, error: absErr } = await supabase\n        .from(\"absences\")\n        .select(\"employee_id, start_date, end_date, reason, status\")\n        .eq(\"status\", \"approved\")\n        .in(\"employee_id\", mappedEmp.map((e) => e.id));\n      if (absErr) throw absErr;\n\n      const absMap: Record<string, { type: \"absent\" | \"holiday\"; reason: string }> = {};\n      (abs ?? []).forEach((a: AbsenceRow) => {\n        const start = new Date(a.start_date);\n        const end = a.end_date ? new Date(a.end_date) : start;\n        for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\n          const iso = d.toISOString().slice(0, 10);\n          absMap[`${a.employee_id}|${iso}`] = {\n            type: a.reason?.toLowerCase() === \"holiday\" ? \"holiday\" : \"absent\",\n            reason: a.reason ?? \"\",\n          };\n        }\n      });\n      setAbsencesMap(absMap);\n      logInfo(\"ScheduleTable initial fetch OK\");\n    } catch (e) {\n      logError(\"ScheduleTable initial fetch FAILED\", e);\n      toast.error(\"Tietojen haku epäonnistui\");\n    } finally {\n      setLoading(false);\n    }\n  })();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n}, [startISO, days]);\n\n\n\nconst [absencesMap, setAbsencesMap] = useState<Record<string, { type: \"absent\" | \"holiday\"; reason: string }>>({});\n\n  // Lue solun vuoro mapista\nfunction getShift(empId: string, dayIndex: number): ShiftType {\n  const iso = dates[dayIndex].iso;\n  const key = `${empId}|${iso}`;\n  const row = shiftsMap[key];\n  if (!row) return { type: \"empty\" };                 // UI-fallback\n  if (row.type === \"normal\" || row.type === \"locked\") {\n    return { type: row.type, hours: row.hours ?? 0 };\n  }\n  return { type: row.type }; // absent/holiday\n}\n\n  // Yhteensä tunnit / työntekijä\n  const getTotalHours = (employee: Employee) =>\n    dates.reduce((sum, _, i) => {\n      const s = getShift(employee.id, i);\n      return sum + (s.hours || 0);\n    }, 0);\n\n  // Klikkaus: toggle empty <-> normal(8h), upsert DB:hen\n// ScheduleTable.tsx\n\nconst applyCellChange = useScheduleStore(s => s.applyCellChange);\n\nfunction handleCellClick(employeeId: string, dayIndex: number, hours: number | null) {\n  const iso = dates[dayIndex].iso;\n  applyCellChange({\n    employee_id: employeeId,\n    work_date: iso,\n    hours\n  });\n  setSelectedCell({ employee: employeeId, day: dayIndex });\n}\n\n\n\n\n  // UI-helper solun ulkoasuun\n  const getShiftDisplay = (shift: ShiftType) => {\n    switch (shift.type) {\n      case \"normal\":\n        return { content: `${shift.hours}h`, color: \"bg-primary text-primary-foreground\", icon: <Clock className=\"w-3 h-3\" /> };\n      case \"locked\":\n        return { content: `${shift.hours}h`, color: \"bg-amber-500 text-white\", icon: <Lock className=\"w-3 h-3\" /> };\n      case \"absent\":\n        return { content: \"A\", color: \"bg-destructive text-destructive-foreground\", icon: <AlertCircle className=\"w-3 h-3\" /> };\n      case \"holiday\":\n        return { content: \"H\", color: \"bg-blue-500 text-white\", icon: <Plane className=\"w-3 h-3\" /> };\n      default:\n        return { content: \"\", color: \"bg-muted hover:bg-accent\", icon: <Plus className=\"w-3 h-3 opacity-0 group-hover:opacity-50\" /> };\n    }\n  };\n\n  if (loading) {\n    return <div className=\"text-center py-8 text-muted-foreground\">Ladataan…</div>;\n  }\n\n  return (\n  <div className=\"w-full space-y-6\">\n    <Card className=\"shadow-lg border-0 bg-gradient-to-r from-background to-secondary/20\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Calendar className=\"w-6 h-6 text-primary\" />\n            <CardTitle className=\"text-2xl text-primary\">Vuorot</CardTitle>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"secondary\" className=\"px-3 py-1\">\n            <Users className=\"w-4 h-4 mr-2\" />\n            {filteredEmployees.length} työntekijää\n            </Badge>\n            {(filters.departments.length > 0 || stateFilterActive) && (\n              <Badge variant=\"outline\" className=\"px-3 py-1\">\n                <Filter className=\"w-3 h-3 mr-1\" />\n                Suodatettu\n              </Badge>\n              )}\n              </div>\n          </div>\n\n      </CardHeader>\n  {(filters.departments.length > 0 || stateFilterActive || (filters.searchTerm ?? \"\").trim()) && (\n    <div className=\"px-6 pb-2\">\n      <div className=\"text-sm text-muted-foreground bg-accent/40 px-3 py-2 rounded-md inline-flex items-center gap-3 flex-wrap\">\n        <Filter className=\"w-4 h-4\" />\n        <div className=\"flex flex-wrap gap-x-3 gap-y-1\">\n          {stateFilterActive && (\n            <span>{filters.showActive ? \"Vain aktiiviset työntekijät\" : \"Vain ei-aktiiviset työntekijät\"}</span>\n          )}\n          {filters.departments.length > 0 && (\n            <span>Osastot: {filters.departments.join(\", \")}</span>\n          )}\n          {(filters.searchTerm ?? \"\").trim() && (\n            <span>Haku: “{filters.searchTerm.trim()}”</span>\n            )}\n        </div>\n      </div>\n    </div>\n  )}\n\n\n      <CardContent className=\"p-0\">\n        <div className=\"overflow-x-auto\">\n          <div className=\"min-w-full\">\n            {/* Header */}\n            <div className=\"bg-muted/50 border-b\">\n              <div\n              className=\"grid gap-px\"\n              style={{ gridTemplateColumns: `minmax(200px,280px) repeat(${days}, minmax(96px, 1fr))` }}\n              >\n                <div className=\"p-4 bg-background\">\n                  <span className=\"text-sm font-medium text-muted-foreground\">Työntekijä</span>\n                </div>\n                {dates.map((date, index) => (\n                  <div key={index} className=\"p-3 bg-background text-center\">\n                    <div className=\"text-xs font-medium text-muted-foreground\">{date.day}</div>\n                    <div className=\"text-sm font-semibold mt-1\">{date.date}</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Employee Rows */}\n              <div className=\"divide-y divide-border\">\n              {filteredEmployees.length === 0 ? (\n                <div className=\"p-12 text-center text-muted-foreground\">\n                  <Filter className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>Ei työntekijöitä näytettäväksi nykyisillä suodattimilla</p>\n                  <p className=\"text-sm mt-1\">Muuta suodattimia nähdäksesi työntekijöitä</p>\n                </div>\n              ) : filteredEmployees.map((employee) => (\n\n                <div\n                  key={employee.id}\n                  className=\"grid gap-px hover:bg-accent/30 transition-colors\"\n                  style={{ gridTemplateColumns: `minmax(200px,280px) repeat(${days}, minmax(96px, 1fr))` }}\n                >\n                  <div className=\"p-4 bg-background flex items-center justify-between\">\n                    <div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"font-medium\">{employee.name}</span>\n                        {!employee.isActive && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">Ei-aktiivinen</Badge>\n                        )}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">{employee.department}</div>\n                    </div>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {getTotalHours(employee)}h\n                    </Badge>\n                  </div>\n\n{dates.map((_, dayIndex) => {\n  const shift = getShift(employee.id, dayIndex);\n  const shiftDisplay = getShiftDisplay(shift);\n  const isSelected =\n    selectedCell?.employee === employee.id && selectedCell?.day === dayIndex;\n\n  const key = `${employee.id}|${dates[dayIndex].iso}`;\n  const absence = absencesMap[key];\n\n  return (\n    <Popover\n  key={dayIndex}\n  open={openPopover === `${employee.id}-${dayIndex}`}\n  onOpenChange={(o) =>\n    setOpenPopover(o ? `${employee.id}-${dayIndex}` : null)\n  }\n>\n  <PopoverTrigger asChild>\n    <div\n      className={`\n        h-16 p-2 m-0 rounded-none border-0 group\n        flex items-center justify-center\n        ${isSelected ? \"ring-2 ring-ring ring-offset-2\" : \"\"}\n        transition-all duration-200 hover:scale-105 hover:shadow-md\n        ${\n          absence\n            ? absence.type === \"holiday\"\n              ? \"bg-blue-100 cursor-not-allowed\"\n              : \"bg-red-100 cursor-not-allowed\"\n            : shiftDisplay.color + \" cursor-pointer\"\n        }\n      `}\n    >\n      <div className=\"flex flex-col items-center space-y-1\">\n        {absence ? (\n          <>\n            <span\n              className={`text-xs font-medium ${\n                absence.type === \"holiday\" ? \"text-blue-600\" : \"text-red-600\"\n              }`}\n            >\n              {absence.type === \"holiday\" ? \"L\" : \"A\"}\n            </span>\n            <span className=\"text-[10px]\">\n              {absence.type === \"holiday\" ? \"Loma\" : \"Poissaolo\"}\n            </span>\n          </>\n        ) : (\n          <>\n            {shiftDisplay.icon}\n            {shiftDisplay.content && (\n              <span className=\"text-xs font-medium\">\n                {shiftDisplay.content}\n              </span>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  </PopoverTrigger>\n\n  {/* Näytä PopoverContent vain jos ei ole absence */}\n{!absence && (\n  <PopoverContent className=\"w-64 p-3 space-y-3\" side=\"bottom\" align=\"center\">\n    <div className=\"text-sm font-medium text-center\">\n      {employee.name} – {dates[dayIndex].day} {dates[dayIndex].date}\n    </div>\n\n    {/* Pikavalinnat */}\n    <div className=\"grid grid-cols-2 gap-2\">\n      {[4, 6, 7.5, 8].map((h) => (\n        <Button\n          key={h}\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => {\n            handleCellClick(employee.id, dayIndex, h);\n            setOpenPopover(null);\n          }}\n          className=\"justify-center\"\n        >\n          {h}h\n        </Button>\n      ))}\n    </div>\n\n    {/* Muu-arvo + Tallenna */}\n    <div className=\"flex items-center gap-2\">\n      <Input\n        type=\"number\"\n        step=\"0.5\"\n        placeholder=\"esim. 5.5\"\n        className=\"h-8\"\n        onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\n          if (e.key === \"Enter\") {\n            const val = parseFloat(e.currentTarget.value);\n            if (!isNaN(val)) {\n              handleCellClick(employee.id, dayIndex, val);\n              setOpenPopover(null);\n            }\n          }\n        }}\n      />\n      <Button\n        size=\"sm\"\n        onClick={(e) => {\n          const input = e.currentTarget.parentElement?.querySelector(\"input\") as HTMLInputElement | null;\n          const val = input ? parseFloat(input.value) : NaN;\n          if (!isNaN(val)) {\n            handleCellClick(employee.id, dayIndex, val);\n            setOpenPopover(null);\n          }\n        }}\n      >\n        ✓\n      </Button>\n    </div>\n\n    {/* Poista vuoro */}\n    <div className=\"flex justify-center\">\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() => {\n          handleCellClick(employee.id, dayIndex, 0);\n          setOpenPopover(null);\n        }}\n        className=\"text-destructive\"\n      >\n        Poista (0h)\n      </Button>\n    </div>\n\n    <div className=\"text-xs text-muted-foreground text-center\">\n      Vinkki: 0h poistaa vuoron.\n    </div>\n  </PopoverContent>\n)}\n\n</Popover>\n\n  );\n})}\n\n                </div>\n              ))}\n            </div>\n\n            {/* Summary Row */}\n            <div className=\"bg-accent/50 border-t-2 border-primary/20\">\n              <div\n              className=\"grid gap-px\"\n              style={{ gridTemplateColumns: `minmax(200px,280px) repeat(${days}, minmax(96px, 1fr))` }}\n              >\n\n                <div className=\"p-4 bg-background\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Users className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"font-medium text-sm\">\n                      Yhteensä ({filteredEmployees.length} työntekijää)\n                    </span>\n                  </div>\n                </div>\n                {dates.map((_, dayIndex) => {\n                  const dayTotal = filteredEmployees.reduce((total, emp) => {\n                    const s = getShift(emp.id, dayIndex);\n                    return total + (s?.hours || 0);\n                  }, 0);\n\n                  const filledCount = filteredEmployees.filter(\n                    (emp) => getShift(emp.id, dayIndex)?.type !== \"empty\"\n                  ).length;\n\n                  return (\n                    <div key={dayIndex} className=\"p-3 bg-background text-center\">\n                      <div className=\"text-sm font-semibold text-primary\">{dayTotal}h</div>\n                      <div className=\"text-xs text-muted-foreground\">{filledCount} henkilöä</div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n\n    {/* Legend */}\n    <Card className=\"shadow-md\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex flex-wrap gap-4 items-center justify-center\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-primary rounded-sm flex items-center justify-center\">\n              <Clock className=\"w-2.5 h-2.5 text-primary-foreground\" />\n            </div>\n            <span className=\"text-sm\">Normaali vuoro</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-amber-500 rounded-sm flex items-center justify-center\">\n              <Lock className=\"w-2.5 h-2.5 text-white\" />\n            </div>\n            <span className=\"text-sm\">Lukittu vuoro</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-destructive rounded-sm flex items-center justify-center\">\n              <AlertCircle className=\"w-2.5 h-2.5 text-destructive-foreground\" />\n            </div>\n            <span className=\"text-sm\">Poissaolo</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-blue-500 rounded-sm flex items-center justify-center\">\n              <Plane className=\"w-2.5 h-2.5 text-white\" />\n            </div>\n            <span className=\"text-sm\">Loma</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n\n    {/* Footer Note */}\n    <div className=\"text-center text-xs text-muted-foreground bg-muted/30 p-3 rounded-lg\">\n      Vinkki: klikkaa solua → valitse tunnit. 0h poistaa vuoron.\n    </div>\n  </div>\n);\n}\n\nexport default ScheduleTable;\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 608
        }
      ]
    },
    {
      "path": "src/app/components/SettingsDialog.tsx",
      "size": 20556,
      "sha256": "14627cf85ed1c20836a9f4da1e8d1ecf3c294bb203e72d7305c575f3f09d2428",
      "lang": "tsx",
      "lines": 472,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/SettingsDialog.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "// components/SettingsDialog.tsx\n\"use client\";\n\nimport { useState } from \"react\";\nimport { toast } from \"sonner\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"./ui/popover\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"./ui/tabs\";\nimport { ScrollArea } from \"./ui/scroll-area\";\nimport { Separator } from \"./ui/separator\";\nimport { Button } from \"./ui/button\";\nimport { Switch } from \"./ui/switch\";\nimport { Slider } from \"./ui/slider\";\nimport { Label } from \"./ui/label\";\nimport { Input } from \"./ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"./ui/select\";\nimport {\n  Settings as SettingsIcon, Download, Upload, RotateCcw, Paintbrush, Zap, FileSpreadsheet,\n  Bell, Shield, Sun, Moon, Monitor, Globe, HardDrive, Database, Trash2\n} from \"lucide-react\";\n\n import { useSettingsStore } from \"@/store/useSettingsStore\";\n import { saveNotificationSettingsToDb } from \"@/lib/settingsDb\";\n import { applyTheme } from \"@/lib/theme\";\nimport type {\n  Theme, Language, WeekStartDay, DateFormat\n} from \"@/lib/settingsSchema\";\n\nexport default function SettingsDialog() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const settings = useSettingsStore((s) => s.settings);\n  const updateGeneralSettings = useSettingsStore((s) => s.updateGeneral);\n  const updateAutoGenerationSettings = useSettingsStore((s) => s.updateAutoGen);\n  const updateExportSettings = useSettingsStore((s) => s.updateExport);\n  const updateNotificationSettings = useSettingsStore((s) => s.updateNotifications);\n  const updateSystemSettings = useSettingsStore((s) => s.updateSystem);\n  const resetSettings = useSettingsStore((s) => s.reset);\n  const importFromJson = useSettingsStore((s) => s.importFromJson);\n  const exportToFile = useSettingsStore((s) => s.exportToFile);\n\n  const handleExportSettings = () => exportToFile();\n\n  const handleImportSettings = () => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \"application/json\";\n    input.onchange = async () => {\n      if (!input.files?.[0]) return;\n      try {\n        const text = await input.files[0].text();\n        const json = JSON.parse(text);\n        const res = importFromJson(json);\n        if (!res.ok) {\n          toast.error(`Virhe tiedostossa: ${res.error}`);\n          return;\n        }\n        toast.success(\"Asetukset tuotu\");\n      } catch {\n        toast.error(\"Tiedoston luku epäonnistui\");\n      }\n    };\n    input.click();\n  };\n\n  const handleResetSettings = () => {\n    resetSettings();\n    toast.success(\"Asetukset palautettu oletuksiin\");\n  };\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <div\n          className=\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-9 w-9 cursor-pointer\"\n          onClick={() => setIsOpen(!isOpen)}\n          aria-label=\"Asetukset\"\n        >\n          <SettingsIcon className=\"w-4 h-4\" />\n        </div>\n      </PopoverTrigger>\n\n      <PopoverContent className=\"w-[680px] p-0\" align=\"end\" sideOffset={5}>\n        {/* Header */}\n        <div className=\"p-4 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-medium\">Asetukset</h3>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleExportSettings} className=\"h-6 px-2 text-xs\">\n                <Download className=\"w-3 h-3 mr-1\" /> Vie\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleImportSettings} className=\"h-6 px-2 text-xs\">\n                <Upload className=\"w-3 h-3 mr-1\" /> Tuo\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleResetSettings}\n                className=\"h-6 px-2 text-xs text-destructive hover:text-destructive\"\n              >\n                <RotateCcw className=\"w-3 h-3 mr-1\" /> Palauta\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Body */}\n        <ScrollArea className=\"max-h-[600px]\">\n          <Tabs defaultValue=\"general\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-5 p-1 m-2\">\n              <TabsTrigger value=\"general\" className=\"text-xs\">\n                <Paintbrush className=\"w-3 h-3 mr-1\" /> Yleiset\n              </TabsTrigger>\n              <TabsTrigger value=\"auto-generation\" className=\"text-xs\">\n                <Zap className=\"w-3 h-3 mr-1\" /> Auto-gen\n              </TabsTrigger>\n              <TabsTrigger value=\"export\" className=\"text-xs\">\n                <FileSpreadsheet className=\"w-3 h-3 mr-1\" /> Vienti\n              </TabsTrigger>\n              <TabsTrigger value=\"notifications\" className=\"text-xs\">\n                <Bell className=\"w-3 h-3 mr-1\" /> Ilmoitukset\n              </TabsTrigger>\n              <TabsTrigger value=\"system\" className=\"text-xs\">\n                <Shield className=\"w-3 h-3 mr-1\" /> Järjestelmä\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Yleiset */}\n            <TabsContent value=\"general\" className=\"p-4 space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Teema</Label>\n                   <Select\n                 value={settings.general.theme}\n                 onValueChange={(v: Theme) => {\n                  updateGeneralSettings(\"theme\", v);\n                  applyTheme(v);\n                  }}\n                 >\n\n                    <SelectTrigger className=\"h-8\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"light\"><div className=\"flex items-center gap-2\"><Sun className=\"w-3 h-3\" />Vaalea</div></SelectItem>\n                      <SelectItem value=\"dark\"><div className=\"flex items-center gap-2\"><Moon className=\"w-3 h-3\" />Tumma</div></SelectItem>\n                      <SelectItem value=\"system\"><div className=\"flex items-center gap-2\"><Monitor className=\"w-3 h-3\" />Järjestelmä</div></SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Kieli</Label>\n                  <Select\n                    value={settings.general.language}\n                    onValueChange={(v: Language) => updateGeneralSettings(\"language\", v)}\n                  >\n                    <SelectTrigger className=\"h-8\"><SelectValue /></SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"fi\"><div className=\"flex items-center gap-2\"><Globe className=\"w-3 h-3\" />Suomi</div></SelectItem>\n                      <SelectItem value=\"en\"><div className=\"flex items-center gap-2\"><Globe className=\"w-3 h-3\" />English</div></SelectItem>\n                      <SelectItem value=\"sv\"><div className=\"flex items-center gap-2\"><Globe className=\"w-3 h-3\" />Svenska</div></SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Viikon alkupäivä</Label>\n                  <Select\n                    value={settings.general.weekStartDay}\n                    onValueChange={(v: WeekStartDay) => updateGeneralSettings(\"weekStartDay\", v)}\n                  >\n                    <SelectTrigger className=\"h-8\"><SelectValue /></SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"monday\">Maanantai</SelectItem>\n                      <SelectItem value=\"sunday\">Sunnuntai</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                </div>\n              {/* Coming soon */}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Päivämäärämuoto</Label>\n                  <Select\n                    value={settings.general.dateFormat}\n                    onValueChange={(v: DateFormat) => updateGeneralSettings(\"dateFormat\", v)}\n                  >\n                    <SelectTrigger className=\"h-8\"><SelectValue /></SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"dd.mm.yyyy\">PP.KK.VVVV</SelectItem>\n                      <SelectItem value=\"mm/dd/yyyy\">KK/PP/VVVV</SelectItem>\n                      <SelectItem value=\"yyyy-mm-dd\">VVVV-KK-PP</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n            {/* Oletusaikajakso poistettu MVP:stä */}\n              </div>\n\n\n            </TabsContent>\n\n            {/* Auto-gen */}\n            <TabsContent value=\"auto-generation\" className=\"p-4 space-y-4\">\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">\n                  Oletustuntimäärä: {settings.autoGeneration.defaultHours}h\n                </Label>\n                <Slider\n                  value={[settings.autoGeneration.defaultHours]}\n                  onValueChange={([v]) => updateAutoGenerationSettings(\"defaultHours\", v)}\n                  min={1}\n                  max={12}\n                  step={0.5}\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Automaattisesti luodut vuorot käyttävät tätä tuntimäärää\n                </p>\n              </div>\n\n              <Separator />\n\n              {([\n                [\"Jaa vuorot tasaisesti\", \"Jakaa vuorot mahdollisimman tasaisesti\", \"distributeEvenly\"],\n                [\"Noudata työaikoja\", \"Luo vuoroja vain työaikojen sisällä\", \"respectWorkingHours\"],\n                [\"Ohita viikonloput\", \"Älä luo vuoroja lauantaille ja sunnuntaille\", \"skipWeekends\"],\n                [\"Ohita pyhäpäivät\", \"Älä luo vuoroja merkityille pyhäpäiville\", \"skipHolidays\"],\n              ] as const).map(([title, subtitle, key]) => (\n                <div className=\"flex items-center justify-between\" key={key}>\n                  <div>\n                    <Label className=\"text-sm font-medium\">{title}</Label>\n                    <p className=\"text-xs text-muted-foreground\">{subtitle}</p>\n                  </div>\n                  <Switch\n                    checked={settings.autoGeneration[key]}\n                    onCheckedChange={(c) => updateAutoGenerationSettings(key, c)}\n                  />\n                </div>\n              ))}\n\n            </TabsContent>\n\n            {/* Vienti */}\n            <TabsContent value=\"export\" className=\"p-4 space-y-4\">\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Yrityksen nimi</Label>\n                <Input\n                  value={settings.export.companyName}\n                  onChange={(e) => updateExportSettings(\"companyName\", e.target.value)}\n                  placeholder=\"Yritys Oy\"\n                  className=\"h-8\"\n                />\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Sisällytä Excel-vientiin</Label>\n                {([\n                  [\"Työntekijöiden nimet\", \"includeNames\"],\n                  [\"Sähköpostiosoitteet\", \"includeEmails\"],\n                  [\"Osastotiedot\", \"includeDepartments\"],\n                  [\"Ei-aktiiviset työntekijät\", \"includeInactiveEmployees\"],\n                  [\"Tyhjät vuorot\", \"includeEmptyShifts\"],\n                  [\"Tuntisummat\", \"includeHourTotals\"],\n                ] as const).map(([label, key]) => (\n                  <div className=\"flex items-center justify-between\" key={key}>\n                    <Label className=\"text-sm\">{label}</Label>\n                    <Switch\n                      checked={settings.export[key]}\n                      onCheckedChange={(c) => updateExportSettings(key, c)}\n                    />\n                  </div>\n                ))}\n              </div>\n            </TabsContent>\n\n            {/* Ilmoitukset */}\n            <TabsContent value=\"notifications\" className=\"p-4 space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"text-sm font-medium\">Sähköposti-ilmoitukset</Label>\n                  <Switch\n                    checked={settings.notifications.emailNotifications}\n                    onCheckedChange={(c) => updateNotificationSettings(\"emailNotifications\", c)}\n                  />\n                </div>\n                <div className=\"space-y-2 pl-1\">\n                  <Label className=\"text-sm font-medium\">Admin-sähköpostit</Label>\n                  <Input\n                    placeholder=\"esim. admin@firma.fi, toinen@firma.fi\"\n                    value={(settings.notifications.adminNotificationEmails ?? []).join(\", \")}\n                    onChange={(e) => {\n                      const emails = e.currentTarget.value\n                        .split(\",\")\n                        .map((s) => s.trim())\n                        .filter(Boolean);\n                      updateNotificationSettings(\"adminNotificationEmails\", emails);\n                    }}\n                    className=\"h-8\"\n                  />\n                  {(!settings.notifications.adminNotificationEmails ||\n                    settings.notifications.adminNotificationEmails.length === 0) && (\n                    <p className=\"text-xs text-amber-600\">\n                      Vinkki: lisää vähintään yksi osoite, muuten ilmoitusta ei lähetetä.\n                    </p>\n                  )}\n                </div>\n              </div>\n              <Separator />\n\n\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium\">Ilmoitussisältö</Label>\n                {([\n                  [\"Poissaolopyynnöt\", \"absenceRequests\"],\n                  [\"Vuoromuutokset\", \"scheduleChanges\"],\n                  [\"Työntekijämuutokset\", \"employeeUpdates\"],\n                  [\"Järjestelmäpäivitykset\", \"systemUpdates\"],\n                ] as const).map(([label, key]) => (\n                  <div className=\"flex items-center justify-between\" key={key}>\n                    <Label className=\"text-sm\">{label}</Label>\n                    <Switch\n                      checked={settings.notifications[key]}\n                      onCheckedChange={(c) => updateNotificationSettings(key, c)}\n                    />\n                  </div>\n                ))}\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Päivittäinen yhteenveto</Label>\n                    <p className=\"text-xs text-muted-foreground\">Lähetä päivittäin yhteenveto</p>\n                  </div>\n                  <Switch\n                    checked={settings.notifications.dailyDigest}\n                    onCheckedChange={(c) => updateNotificationSettings(\"dailyDigest\", c)}\n                  />\n                </div>\n\n                {settings.notifications.dailyDigest && (\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm\">Lähetysaika</Label>\n                    <Input\n                      type=\"time\"\n                      value={settings.notifications.digestTime}\n                      onChange={(e) => updateNotificationSettings(\"digestTime\", e.target.value)}\n                      className=\"h-8 w-32\"\n                    />\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            {/* Järjestelmä */}\n            <TabsContent value=\"system\" className=\"p-4 space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Versio:</span>\n                  <span>{settings.system.version}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Viimeisin varmuuskopio:</span>\n                  <span>{settings.system.lastBackup || \"Ei koskaan\"}</span>\n                </div>\n              </div>\n\n              <Separator />\n\n              {([\n                [\"Huoltotila\", \"Estä muiden käyttäjien pääsy\", \"maintenanceMode\"],\n                [\"Debug-tila\", \"Näytä kehittäjätiedot\", \"debugMode\"],\n              ] as const).map(([title, sub, key]) => (\n                <div className=\"flex items-center justify-between\" key={key}>\n                  <div>\n                    <Label className=\"text-sm font-medium\">{title}</Label>\n                    <p className=\"text-xs text-muted-foreground\">{sub}</p>\n                  </div>\n                  <Switch\n                    checked={settings.system[key]}\n                    onCheckedChange={(c) => updateSystemSettings(key, c)}\n                  />\n                </div>\n              ))}\n\n              <Separator />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Max työntekijöitä</Label>\n                  <Input\n                    type=\"number\"\n                    min={1}\n                    max={1000}\n                    value={settings.system.maxEmployees}\n                    onChange={(e) => updateSystemSettings(\"maxEmployees\", Number(e.target.value) || 100)}\n                    className=\"h-8\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-sm font-medium\">Datan säilytysaika (pv)</Label>\n                  <Input\n                    type=\"number\"\n                    min={30}\n                    max={3650}\n                    value={settings.system.dataRetentionDays}\n                    onChange={(e) => updateSystemSettings(\"dataRetentionDays\", Number(e.target.value) || 365)}\n                    className=\"h-8\"\n                  />\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button variant=\"outline\" size=\"sm\" className=\"justify-start\">\n                  <HardDrive className=\"w-3 h-3 mr-2\" /> Luo varmuuskopio\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"justify-start\">\n                  <Database className=\"w-3 h-3 mr-2\" /> Puhdista välimuisti\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"justify-start\">\n                  <Download className=\"w-3 h-3 mr-2\" /> Lataa lokit\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"justify-start text-destructive hover:text-destructive\">\n                  <Trash2 className=\"w-3 h-3 mr-2\" /> Tyhjennä data\n                </Button>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </ScrollArea>\n\n{/* Footer */}\n<div className=\"p-4 border-t border-border\">\n  <div className=\"flex justify-between items-center\">\n    <p className=\"text-xs text-muted-foreground\">\n      Asetukset tallennetaan automaattisesti\n    </p>\n    <Button\n      size=\"sm\"\n      onClick={async () => {\n        try {\n          await saveNotificationSettingsToDb(\n            useSettingsStore.getState().settings.notifications\n          );\n          toast.success(\"Asetukset tallennettu\");\n        } catch (e: unknown) {\n          const msg = e instanceof Error ? e.message : String(e);\n          console.error(\"[app_settings upsert failed]\", msg);\n          toast.error(`Asetusten tallennus DB:hen epäonnistui: ${msg}`);\n        } finally {\n          setIsOpen(false);\n        }\n      }}\n    >\n      Valmis\n    </Button>\n  </div>\n</div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 472
        }
      ]
    },
    {
      "path": "src/app/components/Toolbar.tsx",
      "size": 32064,
      "sha256": "cfea0914be5a2ae6d9493642cd4389841b4d5783a16dcaafabf1bd0af7319f8f",
      "lang": "tsx",
      "lines": 938,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/Toolbar.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport { useScheduleStore } from \"@/store/useScheduleStore\";\nimport React, { useMemo, useRef, useState, useEffect } from \"react\";\nimport { Button } from \"./ui/button\";\nimport { Card, CardContent } from \"./ui/card\";\nimport { Checkbox } from \"./ui/checkbox\";\nimport { Badge } from \"./ui/badge\";\nimport { Separator } from \"./ui/separator\";\nimport NotificationsPopover from \"./ui/NotificationsPopover\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"./ui/popover\";\nimport SettingsDialog from \"./SettingsDialog\";\nimport { useSettingsStore } from \"@/store/useSettingsStore\";\nimport {\n  Upload,\n  RefreshCw,\n  Calendar as CalIcon,\n  FileSpreadsheet,\n  FileText,\n  Wand2,\n  Save,\n  Undo,\n  Redo,\n  Filter,\n  Search,\n  Check,\n  ChevronDown,\n  X,\n  Building,\n  Users\n} from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/lib/supaBaseClient\";\nimport { addDaysLocalISO } from \"@/lib/dateUtils\";\n\n\n// ——— Valikoiva, tyypitetty poiminta hashydrate-funktiolle ilman anyä ———\ntype HashydrateFn = (() => void) | undefined;\nconst selectHashydrate = <T extends object>(s: T): HashydrateFn =>\n  (s as unknown as { hashydrate?: () => void }).hashydrate;\n\n\n\n\nfunction formatTime(d = new Date()) {\n  return d.toLocaleTimeString(\"fi-FI\", { hour: \"2-digit\", minute: \"2-digit\" });\n}\n\n\n  function getISOWeek(dateIso: string) {\n  const d = new Date(dateIso + \"T00:00:00\");\n  // ISO week algorithm\n  const dayNum = (d.getUTCDay() + 6) % 7;\n  d.setUTCDate(d.getUTCDate() - dayNum + 3);\n  const firstThursday = new Date(Date.UTC(d.getUTCFullYear(), 0, 4));\n  const week =\n    1 +\n    Math.round(\n      ((d.getTime() - firstThursday.getTime()) / 86400000 - 3 + ((firstThursday.getUTCDay() + 6) % 7)) /\n        7\n    );\n  return week;\n}\n\n\ntype EmpRow = {\n  id: string;\n  name: string;\n  email: string;\n  department: string;\n  is_active: boolean;\n};\n\ntype ShiftRow = {\n  employee_id: string;\n  work_date: string;\n  type: \"normal\" | \"locked\" | \"absent\" | \"holiday\";\n  hours: number | null;\n};\n\nconst Toolbar = () => {\n\n  const [isClient, setIsClient] = useState(false);\n  useEffect(() => { setIsClient(true); }, []);\n\n  const START_ISO = useScheduleStore((s) => s.startDateISO);\n  const DAYS = useScheduleStore((s) => s.days);\n\n\n   const defaultHours = useSettingsStore((s) => s.settings.autoGeneration.defaultHours);\n   const hashydrateSettings = useSettingsStore(selectHashydrate);\n   const hashydrateSchedule = useScheduleStore(selectHashydrate);\n\n  useEffect(() => {\n    // Aja heti mountissa ja aina hashin vaihtuessa.\n    // Järjestys: ensin asetukset -> sitten aikataulu.\n    const run = () => {\n      try { hashydrateSettings?.(); } catch {}\n      try { hashydrateSchedule?.(); } catch {}\n    };\n    run();\n    window.addEventListener(\"hashchange\", run);\n    return () => window.removeEventListener(\"hashchange\", run);\n  }, [hashydrateSettings, hashydrateSchedule]);\n\n\n\n  const range = useMemo(\n  () => Array.from({ length: DAYS }, (_, i) => addDaysLocalISO(START_ISO, i)),\n  [START_ISO, DAYS]\n);\n\n\n\nconst undo = useScheduleStore((s) => s.undo);\nconst redo = useScheduleStore((s) => s.redo);\nconst canUndo = useScheduleStore((s) => s.undoStack.length > 0);\nconst canRedo = useScheduleStore((s) => s.redoStack.length > 0);\n\nconst saveAll = useScheduleStore((s) => s.saveAll);\nconst dirty = useScheduleStore((s) => s.dirty);\n\nasync function handleSave() {\n  await saveAll();\n}\n\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [lastSavedAt, setLastSavedAt] = useState<string | null>(null);\n  const [empCount, setEmpCount] = useState<number | null>(null);\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // ————— data hakuja joita export/healthcheck/auto-gen käyttää —————\n  // Yleinen hakufunktio: includeInactive=true -> ei suodateta is_active:lla\n  async function fetchEmployees(includeInactive: boolean): Promise<EmpRow[]> {\n    let q = supabase\n      .from(\"employees\")\n      .select(\"id, name, email, department, is_active\")\n      .order(\"created_at\", { ascending: true });\n    if (!includeInactive) q = q.eq(\"is_active\", true);\n    const { data, error } = await q;\n    if (error) throw error;\n    const rows = (data ?? []) as EmpRow[];\n    setEmpCount(rows.length);\n    return rows;\n  }\n  // Säilytetään vanha signatuuri muulle koodille (auto-gen, import, PDF…)\n async function fetchActiveEmployees(): Promise<EmpRow[]> {\n    return fetchEmployees(false);\n  }\n\n  async function fetchShiftsByRange(empIds?: string[]): Promise<ShiftRow[]> {\n    const start = range[0];\n    const end = range[range.length - 1];\n    let q = supabase\n      .from(\"shifts\")\n      .select(\"employee_id, work_date, type, hours\")\n      .gte(\"work_date\", start)\n      .lte(\"work_date\", end);\n\n    if (empIds && empIds.length) q = q.in(\"employee_id\", empIds);\n\n    const { data, error } = await q;\n    if (error) throw error;\n    return (data ?? []) as ShiftRow[];\n  }\n\n  type AbsenceRow = {\n  employee_id: string;\n  start_date: string;             // YYYY-MM-DD\n  end_date: string | null;        // voi olla null → käytä start_datea\n  status: \"pending\" | \"approved\" | \"declined\";\n};\n\nasync function fetchAbsencesByRange(empIds: string[]): Promise<AbsenceRow[]> {\n  const { data, error } = await supabase\n    .from(\"absences\")\n    .select(\"employee_id, start_date, end_date, status\")\n    .in(\"employee_id\", empIds)\n    .neq(\"status\", \"declined\"); // vain pending/approved blokkaa\n\n  if (error) throw error;\n  const rows = (data ?? []) as AbsenceRow[];\n\n  // Pidä vain poissaolot, jotka osuvat johonkin RANGE-päivään\n  return rows.filter((r) => {\n    const s = r.start_date;\n    const e = r.end_date ?? s;\n    return range.some((day) => day >= s && day <= e);\n  });\n}\n\n\n  // ————— ACTIONS —————\n\n  // 1) Auto-generointi — täyttää puuttuvat vuorot 8h normaaliksi, jos ei poissaoloa\n  const handleAutoGenerate = async () => {\n    setIsGenerating(true);\n    try {\n      toast.info(\"Aloitetaan automaattinen vuorojen generointi…\");\n\n      const employees = await fetchActiveEmployees();\n      if (!employees.length) {\n        toast.info(\"Ei aktiivisia työntekijöitä.\");\n        return;\n      }\n      const empIds = employees.map((e) => e.id);\n      const [existing, absences] = await Promise.all([\n        fetchShiftsByRange(empIds),\n        fetchAbsencesByRange(empIds),\n      ]);\n\n      // Map helpot tarkistukset\n      const existingSet = new Set(existing.map((s) => `${s.employee_id}|${s.work_date}`));\n      const absenceMap = new Map<string, { s: string; e: string }[]>();\n      absences.forEach((a: { employee_id: string; start_date: string; end_date?: string | null }) => {\n        const arr = absenceMap.get(a.employee_id) ?? [];\n        arr.push({ s: a.start_date, e: a.end_date ?? a.start_date });\n        absenceMap.set(a.employee_id, arr);\n      });\n\n      const batch: ShiftRow[] = [];\n      for (const emp of employees) {\n        for (const d of range) {\n          const key = `${emp.id}|${d}`;\n          if (existingSet.has(key)) continue; // älä koske olemassaolevaan\n\n          // jos poissaolo kattaa päivän, skippaa\n          const ranges = absenceMap.get(emp.id) ?? [];\n          const blocked = ranges.some((r) => d >= r.s && d <= r.e);\n          if (blocked) continue;\n\n          batch.push({\n            employee_id: emp.id,\n            work_date: d,\n            type: \"normal\",\n            hours: defaultHours,\n          });\n        }\n      }\n\n      if (!batch.length) {\n        toast.info(\"Ei täytettäviä tyhjiä soluja tälle jaksolle.\");\n        return;\n      }\n\n      const { error } = await supabase\n        .from(\"shifts\")\n        .upsert(batch, { onConflict: \"employee_id,work_date\" });\n\n      if (error) throw error;\n\n      setLastSavedAt(formatTime());\n      toast.success(`Generoitu ${batch.length} vuoroa.`);\n      // Kirjaa ilmoitus\nawait supabase.from(\"notifications\").insert({\n  type: \"shift_auto\",\n  title: \"Vuorot generoitu\",\n  message: `Generoitu ${batch.length} vuoroa jaksolle ${range[0]} – ${range[range.length - 1]}.`\n});\n   } catch (e) {\n  console.error(e);\n  toast.error(\"Generointi epäonnistui\");\n} finally {\n      setIsGenerating(false);\n    }\n  };\n\n\n  // 3) Export CSV (Excel avaa suoraan)\n  const exportSettings = useSettingsStore((s) => s.settings.export);\n\n\n  const handleExportExcel = async () => {\n    try {\n      // Hae työntekijät asetuksen mukaan (mukaan myös ei-aktiiviset tarvittaessa)\n      const employees = await fetchEmployees(!!exportSettings.includeInactiveEmployees);\n      const empIds = employees.map((e) => e.id);\n      const shifts = await fetchShiftsByRange(empIds);\n      const byId = new Map(employees.map((e) => [e.id, e]));\n\n      // Dynaaminen header asetusten mukaan\n      const header: string[] = [];\n      if (exportSettings.includeNames) header.push(\"employee_name\");\n      if (exportSettings.includeEmails) header.push(\"employee_email\");\n      if (exportSettings.includeDepartments) header.push(\"department\");\n      header.push(\"work_date\", \"type\", \"hours\");\n\n      // Nopeaan lookupiin\n      const shiftMap = new Map<string, ShiftRow>(); // empId|date -> shift\n      shifts.forEach((s) => shiftMap.set(`${s.employee_id}|${s.work_date}`, s));\n\n      // Apuri: muodosta yksi rivi\n      const makeRow = (emp: EmpRow, date: string, s?: ShiftRow): (string | number)[] => {\n        const row: (string | number)[] = [];\n        if (exportSettings.includeNames) row.push(emp?.name ?? \"\");\n        if (exportSettings.includeEmails) row.push(emp?.email ?? \"\");\n        if (exportSettings.includeDepartments) row.push(emp?.department ?? \"\");\n        row.push(date, s?.type ?? \"\", s?.hours ?? 0);\n        return row;\n      };\n\n      // Rivit: includeEmptyShifts = jokaisesta päivästä rivi, muuten vain olemassa olevat\n      const rows: (string | number)[][] = [];\n      if (exportSettings.includeEmptyShifts) {\n        for (const emp of employees) {\n          for (const d of range) {\n            rows.push(makeRow(emp, d, shiftMap.get(`${emp.id}|${d}`)));\n          }\n        }\n      } else {\n        shifts\n          .sort((a, b) => (a.work_date < b.work_date ? -1 : a.work_date > b.work_date ? 1 : 0))\n          .forEach((s) => rows.push(makeRow(byId.get(s.employee_id)!, s.work_date, s)));\n      }\n\n      let csv = [header, ...rows]\n        .map((r) => r.map((v) => `\"${String(v).replace(/\"/g, '\"\"')}\"`).join(\",\"))\n        .join(\"\\n\");\n\n        // Lisätty: tuntisummat loppuun, jos asetus päällä\n      if (exportSettings.includeHourTotals) {\n        const totals = new Map<string, number>(); // empId -> total hours\n        for (const emp of employees) totals.set(emp.id, 0);\n        for (const s of shifts) totals.set(s.employee_id, (totals.get(s.employee_id) ?? 0) + (s.hours ?? 0));\n        const totalsRows = Array.from(totals.entries()).map(([empId, sum]) => {\n          const emp = byId.get(empId)!;\n          // label: nimi > email > id\n          const label =\n            exportSettings.includeNames ? emp.name :\n            exportSettings.includeEmails ? emp.email : emp.id;\n          return [label, String(sum)];\n        });\n        const totalsCsv =\n          \"\\n\\n\" +\n          [\"employee\", \"total_hours\"].join(\",\") +\n          \"\\n\" +\n          totalsRows.map((r) => r.map((v) => `\"${String(v).replace(/\"/g, '\"\"')}\"`).join(\",\")).join(\"\\n\");\n        csv += totalsCsv;\n      }\n\n      const blob = new Blob([csv], { type: \"text/csv;charset=utf-8\" });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n        // Tiedostonimeen yrityksen nimi\n      const company = (exportSettings.companyName || \"vuorot\")\n        .replace(/[^\\p{L}\\p{N}_-]+/gu, \"_\")\n        .replace(/_{2,}/g, \"_\")\n        .replace(/^_|_$/g, \"\");\n      a.download = `${company}_${range[0]}_${range[range.length - 1]}.csv`;\n      a.click();\n      URL.revokeObjectURL(url);\n      toast.success(\"CSV ladattu\");\n    } catch (e) {\n      console.error(e);\n      toast.error(\"CSV-vienti epäonnistui\");\n    }\n  };\n\n  // 4) Export PDF (MVP: tulostusystävällinen näkymä -> print)\n  const handleExportPDF = async () => {\n    try {\n      const employees = await fetchActiveEmployees();\n      const shifts = await fetchShiftsByRange(employees.map((e) => e.id));\n      const byId = new Map(employees.map((e) => [e.id, e]));\n\n      const win = window.open(\"\", \"_blank\", \"width=1024,height=768\");\n      if (!win) {\n        toast.error(\"Ponnahdusikkuna estetty\");\n        return;\n      }\n      const style = `\n        <style>\n          body { font-family: ui-sans-serif, system-ui, -apple-system; padding: 24px; }\n          h1,h2 { margin: 0 0 8px; }\n          table { width: 100%; border-collapse: collapse; font-size: 12px; }\n          th, td { border: 1px solid #ddd; padding: 6px 8px; text-align: left; }\n          th { background: #f3f4f6; }\n          .muted { color: #6b7280; font-size: 12px; margin-bottom: 12px; }\n        </style>`;\n      const header = `<h1>Vuorolistat</h1>\n        <div class=\"muted\">${range[0]} – ${range[range.length - 1]} • ${employees.length} työntekijää</div>`;\n\n      const rowsHtml = shifts\n        .sort((a, b) =>\n          a.employee_id === b.employee_id\n            ? a.work_date.localeCompare(b.work_date)\n            : a.employee_id.localeCompare(b.employee_id)\n        )\n        .map((s) => {\n          const e = byId.get(s.employee_id)!;\n          return `<tr>\n            <td>${e?.name ?? \"\"}</td>\n            <td>${e?.email ?? \"\"}</td>\n            <td>${e?.department ?? \"\"}</td>\n            <td>${s.work_date}</td>\n            <td>${s.type}</td>\n            <td>${s.hours ?? 0}</td>\n          </tr>`;\n        })\n        .join(\"\");\n\n      win.document.write(`\n        <!doctype html><html><head><meta charset=\"utf-8\" />\n        <title>Vuorot</title>${style}</head><body>\n          ${header}\n          <table>\n            <thead><tr>\n              <th>Nimi</th><th>Sähköposti</th><th>Osasto</th>\n              <th>Pvm</th><th>Tyyppi</th><th>Tunnit</th>\n            </tr></thead>\n            <tbody>${rowsHtml}</tbody>\n          </table>\n          <script>window.print();</script>\n        </body></html>\n      `);\n      win.document.close();\n    } catch (e) {\n      console.error(e);\n      toast.error(\"PDF-vienti epäonnistui\");\n    }\n  };\n\n  // 5) Import CSV (email,work_date,hours)\n  const handleImport = () => fileInputRef.current?.click();\n\n  const onImportFile = async (file: File) => {\n    try {\n      const text = await file.text();\n      // Odotettu header: email,work_date,hours\n      const lines = text\n        .split(/\\r?\\n/)\n        .map((l) => l.trim())\n        .filter(Boolean);\n      if (!lines.length) {\n        toast.error(\"Tyhjä tiedosto\");\n        return;\n      }\n\n      const header = lines[0].split(\",\").map((s) => s.trim().toLowerCase());\n      const emailIdx = header.indexOf(\"email\");\n      const dateIdx = header.indexOf(\"work_date\");\n      const hoursIdx = header.indexOf(\"hours\");\n      if (emailIdx === -1 || dateIdx === -1 || hoursIdx === -1) {\n        toast.error('Odotettu header: \"email,work_date,hours\"');\n        return;\n      }\n\n      const employees = await fetchActiveEmployees();\n      const byEmail = new Map(employees.map((e) => [e.email.toLowerCase(), e]));\n\n      const bad: string[] = [];\n      const batch: ShiftRow[] = [];\n      for (let i = 1; i < lines.length; i++) {\n        const cols = lines[i].split(\",\").map((s) => s.trim().replace(/^\"|\"$/g, \"\"));\n        if (cols.length < 3) continue;\n        const email = cols[emailIdx].toLowerCase();\n        const d = cols[dateIdx];\n        const h = parseFloat(cols[hoursIdx]);\n        if (!email || !d || isNaN(h)) continue;\n        const emp = byEmail.get(email);\n        if (!emp) {\n          bad.push(lines[i]);\n          continue;\n        }\n        batch.push({\n          employee_id: emp.id,\n          work_date: d,\n          type: h > 0 ? \"normal\" : \"normal\",\n          hours: h > 0 ? h : 0,\n        });\n      }\n\n      if (!batch.length) {\n        toast.error(\"Ei kelvollisia rivejä importissa\");\n        return;\n      }\n\n      const { error } = await supabase\n        .from(\"shifts\")\n        .upsert(batch, { onConflict: \"employee_id,work_date\" });\n      if (error) throw error;\n\n      setLastSavedAt(formatTime());\n      if (bad.length) {\n        toast.warning(\n          `Import OK (${batch.length} riviä). ${bad.length} riviä jäi väliin tuntemattoman emailin takia.`\n        );\n      } else {\n        toast.success(`Import OK (${batch.length} riviä).`);\n      }\n    } catch (e) {\n      console.error(e);\n      toast.error(\"Import epäonnistui\");\n    } finally {\n      if (fileInputRef.current) fileInputRef.current.value = \"\";\n    }\n  };\n\n  // ————— UI —————\n  const weekNo = useMemo(() => getISOWeek(START_ISO), [START_ISO]);\n  const year = useMemo(() => new Date(START_ISO + \"T00:00:00\").getFullYear(), [START_ISO]);\n\n  return (\n    <Card className=\"shadow-md border-0 bg-gradient-to-r from-background to-secondary/10\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex flex-wrap items-center gap-3 justify-between\">\n          {/* Left Section - Main Actions */}\n          <div className=\"flex items-center gap-2\">\n            <Button\n              onClick={handleAutoGenerate}\n              disabled={isGenerating}\n              className=\"bg-primary hover:bg-primary/90\"\n            >\n              {isGenerating ? (\n                <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n              ) : (\n                <Wand2 className=\"w-4 h-4 mr-2\" />\n              )}\n              {isGenerating ? \"Generoidaan...\" : \"Auto-generointi\"}\n            </Button>\n\n            <Separator orientation=\"vertical\" className=\"h-8\" />\n\n<Button\n  variant=\"outline\"\n  onClick={handleSave}\n  disabled={!dirty}\n  className={dirty ? \"border-amber-500 text-amber-600\" : \"\"}\n>\n  <Save className=\"w-4 h-4 mr-2\" />\n  Tallenna\n  {dirty && (\n    <Badge variant=\"secondary\" className=\"ml-2 bg-amber-100 text-amber-700\">\n      •\n    </Badge>\n  )}\n</Button>\n\n\n<div className=\"flex items-center gap-1\">\n  <Button variant=\"ghost\" size=\"sm\" onClick={undo} disabled={!canUndo}>\n    <Undo className=\"w-4 h-4\" />\n  </Button>\n  <Button variant=\"ghost\" size=\"sm\" onClick={redo} disabled={!canRedo}>\n    <Redo className=\"w-4 h-4\" />\n  </Button>\n</div>\n          </div>\n\n    {/* Center Section - View Options */}\n<div className=\"flex items-center gap-2\">\n  <SearchPopover />  {/* 🆕 oikea haku */}\n  <FilterPopover />\n  {/* Aikajakson valitsin */}\n  <PeriodSelector />\n</div>\n\n\n\n          {/* Right Section - Export/Import */}\n          <div className=\"flex items-center gap-2\">\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\".csv,text/csv\"\n              className=\"hidden\"\n              onChange={(e) => {\n                const f = e.target.files?.[0];\n                if (f) onImportFile(f);\n              }}\n            />\n            <Button variant=\"outline\" onClick={handleImport}>\n              <Upload className=\"w-4 h-4 mr-2\" />\n              Tuo\n            </Button>\n\n            <div className=\"flex items-center gap-1\">\n              <Button variant=\"outline\" size=\"sm\" onClick={handleExportExcel}>\n                <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                Excel\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={handleExportPDF}>\n                <FileText className=\"w-4 h-4 mr-2\" />\n                PDF\n              </Button>\n            </div>\n\n            <Separator orientation=\"vertical\" className=\"h-8\" />\n            <NotificationsPopover />\n\n\n          <SettingsDialog />\n          </div>\n        </div>\n\n        {/* Status Bar */}\n        <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-border/50\">\n          <div className=\"flex flex-wrap items-center gap-2 text-sm text-muted-foreground\">\n            <span>\n              Viimeksi tallennettu: {lastSavedAt ? lastSavedAt : \"—\"}\n            </span>\n            <span>•</span>\n            <span>{empCount ?? \"…\"} työntekijää</span>\n            <span>•</span>\n            <span>\n              Viikko {weekNo}/{year}\n            </span>\n            <span>•</span>\n            <span>\n              Jakso: {isClient && range.length > 0 ? `${range[0]} – ${range[range.length - 1]}` : \"—\"}\n            </span>\n          </div>\n          \n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// === PeriodSelector ===\ntype PeriodValue = 7 | 10 | 14 | 30;\ntype PeriodItem = { value: PeriodValue; label: string; description: string };\n\nconst PERIODS: PeriodItem[] = [\n  { value: 7,  label: \"7 päivää\",  description: \"Viikkonäkymä\" },\n  { value: 10, label: \"10 päivää\", description: \"Laajennettu\" },\n  { value: 14, label: \"14 päivää\", description: \"Kaksiviikkoinen\" },\n  { value: 30, label: \"30 päivää\", description: \"Kuukausinäkymä\" },\n];\n\nfunction PeriodSelector() {\n  const days = useScheduleStore((s) => s.days);\n  const startISO = useScheduleStore((s) => s.startDateISO);\n  const setRange = useScheduleStore((s) => s.setRange);\n\n\n  const current = PERIODS.find((p) => p.value === days) ?? PERIODS[1];\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" className=\"h-9 px-3 min-w-[160px] justify-start\">\n          <span className=\"inline-flex items-center gap-2\">\n            <CalIcon className=\"w-4 h-4\" />\n            <span>{current.label}</span>\n            <ChevronDown className=\"w-3 h-3\" />\n          </span>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-72 p-2\" align=\"center\">\n        <div className=\"px-2 py-1.5 text-sm font-medium text-muted-foreground\">\n          Valitse aikajakso\n        </div>\n        <div className=\"space-y-1\" role=\"menu\" aria-label=\"Aikajakso\">\n          {PERIODS.map((option) => {\n            const active = days === option.value;\n            return (\n              <button\n                key={option.value}\n                role=\"menuitemradio\"\n                aria-checked={active}\n                onClick={() => {\n  setRange(startISO, option.value); // ei alignointia täällä\n}}\n                className={`w-full flex items-center justify-between p-2 rounded-md text-left hover:bg-accent ${\n                  active ? \"bg-accent\" : \"\"\n                }`}\n              >\n                <div className=\"flex flex-col\">\n                  <span className=\"text-sm font-medium\">{option.label}</span>\n                  <span className=\"text-xs text-muted-foreground\">{option.description}</span>\n                </div>\n                <div className=\"flex items-center\">\n                  {active && <Check className=\"w-4 h-4 text-primary\" />}\n                </div>\n              </button>\n            );\n          })}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\n\n\n\nconst DEFAULT_FILTERS = {\n  departments: [] as string[],\n  showActive: false,\n  showInactive: false,\n  searchTerm: \"\", \n  };\n\nfunction FilterPopover() {\n  const [isOpen, setIsOpen] = useState(false);\n  const filters = useScheduleStore((s) => s.filters) ?? DEFAULT_FILTERS;\n  const setFilters = useScheduleStore((s) => s.setFilters) ?? (() => {});\n  const resetFilters = useScheduleStore((s) => s.resetFilters) ?? (() => {});\n\n const employeesFromStore = useScheduleStore((s) => s.employees);\nconst employees = useMemo(() => employeesFromStore ?? [], [employeesFromStore]);\n\nconst employeeDepartments = useMemo(\n  () => employees.map((e) => e.department),\n  [employees]\n);\n\nconst availableDepartments = useMemo(\n  () => Array.from(new Set(employeeDepartments)).filter(Boolean) as string[],\n  [employeeDepartments]\n);\n\n\n  // 2) Tila-suodatus on aktiivinen vain jos vain toinen toggle on päällä (XOR)\n  const stateFilterActive = filters.showActive !== filters.showInactive;\n\n  // 3) Badge: 1 piste osastofiltteristä (jos valittuja), 1 piste tila-XOR:sta\n  const activeFilterCount =\n    (filters.departments.length > 0 ? 1 : 0) +\n    (stateFilterActive ? 1 : 0);\n\n  const handleDepartmentToggle = (dept: string) => {\n    const exists = filters.departments.includes(dept);\n    setFilters({\n      departments: exists\n        ? filters.departments.filter((d) => d !== dept)\n        : [...filters.departments, dept],\n    });\n  };\n\n  const handleActiveToggle = () => setFilters({ showActive: !filters.showActive });\n  const handleInactiveToggle = () => setFilters({ showInactive: !filters.showInactive });\n\n  const handleClearFilters = () => {\n    resetFilters();\n    setIsOpen(false); // 4) UX: tyhjennä -> sulje\n  };\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <div\n          className={`\n            inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium\n            ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2\n            focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none\n            disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-9 px-3 cursor-pointer\n            ${activeFilterCount > 0 ? \"bg-primary text-primary-foreground hover:bg-primary/90\" : \"\"}\n          `}\n        >\n          <Filter className=\"w-4 h-4 mr-2\" />\n          Suodatin\n          {activeFilterCount > 0 && (\n            <Badge variant=\"secondary\" className=\"ml-2 bg-white text-primary text-xs\">\n              {activeFilterCount}\n            </Badge>\n          )}\n        </div>\n      </PopoverTrigger>\n\n      <PopoverContent className=\"w-80 p-4\" align=\"center\">\n        <div className=\"space-y-4\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-medium\">Suodattimet</h3>\n            {(filters.departments.length > 0 || stateFilterActive) && (\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleClearFilters} className=\"h-6 px-2 text-xs\">\n                <X className=\"w-3 h-3 mr-1\" />\n                Tyhjennä\n              </Button>\n            )}\n          </div>\n\n          <Separator />\n\n          {/* Department Filters */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <Building className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"font-medium text-sm\">Osastot</span>\n            </div>\n            <div className=\"space-y-2 pl-6\">\n              {availableDepartments.map((department) => (\n                <div key={department} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={`dept-${department}`}\n                    checked={filters.departments.includes(department)}\n                    onCheckedChange={() => handleDepartmentToggle(department)}\n                  />\n                  <label htmlFor={`dept-${department}`} className=\"text-sm cursor-pointer\">\n                    {department}\n                  </label>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Employee Status Filters */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <Users className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"font-medium text-sm\">Työntekijöiden tila</span>\n            </div>\n            <div className=\"space-y-2 pl-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox id=\"show-active\" checked={filters.showActive} onCheckedChange={handleActiveToggle} />\n                <label htmlFor=\"show-active\" className=\"text-sm cursor-pointer\">\n                  Näytä aktiiviset työntekijät\n                </label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox id=\"show-inactive\" checked={filters.showInactive} onCheckedChange={handleInactiveToggle} />\n                <label htmlFor=\"show-inactive\" className=\"text-sm cursor-pointer\">\n                  Näytä ei-aktiiviset työntekijät\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {/* Filter Summary */}\n          {(filters.departments.length > 0 || stateFilterActive) && (\n            <>\n              <Separator />\n              <div className=\"text-xs text-muted-foreground\">\n                {filters.departments.length > 0 && <div>Osastot: {filters.departments.join(\", \")}</div>}\n                {stateFilterActive && (\n                  <div>Tila: {filters.showActive ? \"Vain aktiiviset\" : \"Vain ei-aktiiviset\"}</div>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\n\n\nexport default Toolbar;\n\n\nfunction SearchPopover() {\n  const filters = useScheduleStore((s) => s.filters) ?? DEFAULT_FILTERS;\n  const setFilters = useScheduleStore((s) => s.setFilters);\n\n  const [open, setOpen] = useState(false);\n  const [localTerm, setLocalTerm] = useState(filters.searchTerm ?? \"\");\n  const debTimer = React.useRef<number | null>(null);\n\n  const handleSearchChange = (val: string) => {\n    setLocalTerm(val);\n    if (debTimer.current) window.clearTimeout(debTimer.current);\n    debTimer.current = window.setTimeout(() => {\n      setFilters({ searchTerm: val });\n    }, 200);\n  };\n\n  const clear = () => {\n    setLocalTerm(\"\");\n    setFilters({ searchTerm: \"\" });\n  };\n\nReact.useEffect(() => {\n  if (!open) return;\n  const onKey = (e: KeyboardEvent) => {\n    if (e.key === \"Escape\") {\n      setLocalTerm(\"\");\n      setFilters({ searchTerm: \"\" });\n    }\n  };\n  window.addEventListener(\"keydown\", onKey);\n  return () => window.removeEventListener(\"keydown\", onKey);\n}, [open, setFilters]);\n\n  const isActive = (filters.searchTerm ?? \"\").trim().length > 0;\n\n  return (\n      <Popover\n      open={open}\n      onOpenChange={(next) => {\n        setOpen(next);\n        if (next) setLocalTerm(filters.searchTerm ?? \"\");\n      }}\n    >\n      <PopoverTrigger asChild>\n        <Button variant={isActive ? \"default\" : \"ghost\"} size=\"sm\" className=\"h-9\">\n          <Search className=\"w-4 h-4 mr-2\" />\n          Haku\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-96 p-4\" align=\"center\">\n        <div className=\"space-y-3\">\n          <div className=\"text-base font-semibold\">Haku</div>\n          <div className=\"text-sm text-muted-foreground\">Etsi työntekijöitä</div>\n          <div className=\"relative\">\n           <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n           <input\n              className=\"w-full h-9 rounded-md border border-input bg-background px-3 pl-10 pr-10 text-sm outline-none focus:ring-2 focus:ring-ring\"\n              placeholder=\"Hae nimellä, sähköpostilla tai osastolla...\"\n              value={localTerm}\n              onChange={(e) => handleSearchChange(e.target.value)}\n              autoFocus\n            />\n            {localTerm && (\n              <button\n                type=\"button\"\n                aria-label=\"Tyhjennä haku\"\n                className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                onClick={clear}\n              >\n                <X className=\"w-4 h-4\" />\n              </button>\n            )}\n          </div>\n          <div className=\"text-xs text-muted-foreground\">\n            Haku toimii reaaliajassa ja etsii nimestä, sähköpostista ja osastosta\n          </div>\n          {isActive && (\n            <>\n              <Separator />\n              <div className=\"text-xs text-muted-foreground bg-accent/50 p-2 rounded-md\">\n                <Search className=\"w-3 h-3 inline mr-1\" />\n                Hakutermi: “{filters.searchTerm}”\n                <div className=\"mt-1\">Näytetään työntekijät jotka vastaavat hakua</div>\n              </div>\n            </>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 938
        }
      ]
    },
    {
      "path": "src/app/types/index.ts",
      "size": 587,
      "sha256": "990baad1ecb45cb26a7dacf84fdd6907d444a34fc4fd8d3be263226eac2b61df",
      "lang": "typescript",
      "lines": 31,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/types/index.ts",
      "chunks": [
        {
          "i": 0,
          "text": "export interface ShiftType {\n  type: 'normal' | 'locked' | 'absent' | 'holiday' | 'empty';\n  hours?: number;\n  icon?: React.ReactNode;\n}\n\nexport interface Employee {\n  id: string;\n  name: string;\n  email: string;\n  department: string;\n  isActive: boolean;\n  shifts: ShiftType[];\n}\n\nexport interface AbsenceRequest {\n  id: string;\n  employeeId: string;\n  employeeName: string;\n  startDate: string;\n  endDate: string;\n  reason: string;\n  status: 'pending' | 'approved' | 'declined';\n  submittedAt: string;\n  message?: string;\n}\n\nexport interface DateInfo {\n  day: string;\n  date: string;\n}",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 31
        }
      ]
    },
    {
      "path": "src/features/absences/notify.ts",
      "size": 4932,
      "sha256": "49239ac81e8841b82b8fac2723db543b3adb71779e4107bb249575ff72ce2633",
      "lang": "typescript",
      "lines": 146,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/features/absences/notify.ts",
      "chunks": [
        {
          "i": 0,
          "text": "// src/features/absences/notify.ts\nimport { supabase } from \"@/lib/supaBaseClient\";\nimport { sendEmail } from \"@/lib/sendEmail\";\nimport { useSettingsStore } from \"@/store/useSettingsStore\";\n\nexport type AbsenceDecision = \"approved\" | \"declined\";\n\n// --- Edge Functions: resolver + mailer trigger ---\nfunction resolveFunctionsBase(): string {\n  const direct = process.env.NEXT_PUBLIC_SUPABASE_FUNCTIONS_URL?.trim();\n  if (direct) return direct.replace(/\\/+$/, \"\");\n  const supaUrl = process.env.NEXT_PUBLIC_SUPABASE_URL?.trim();\n  if (!supaUrl) throw new Error(\"Missing NEXT_PUBLIC_SUPABASE_URL\");\n  if (supaUrl.includes(\"localhost\") || supaUrl.includes(\"127.0.0.1\")) {\n    if (typeof window !== \"undefined\") {\n      const h = window.location.hostname;\n      if (h && h !== \"localhost\" && h !== \"127.0.0.1\") {\n        return `http://${h}:54321/functions/v1`;\n      }\n    }\n    return \"http://127.0.0.1:54321/functions/v1\";\n  }\n  return supaUrl.replace(\".supabase.co\", \".functions.supabase.co\");\n}\n\nasync function triggerMailerNow() {\n  try {\n    const url = `${resolveFunctionsBase()}/mailer`;\n    const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n    await fetch(url, {\n      method: \"POST\",\n      headers: anon ? { Authorization: `Bearer ${anon}` } : {},\n      // ettei blokkaa navigaatiota tms.\n      keepalive: true,\n    });\n  } catch {\n    // ei saa kaataa virtaan; cron poimii sitten\n  }\n}\n\n// --- Admin-uutisointi: jonota + laukaise heti ---\ntype AdminNewAbsenceJobPayload = {\n  employee_id: string;\n  start_date: string;\n  end_date?: string | null;\n  reason?: string | null;\n};\n\n/**\n * Kutsu TÄTÄ heti sen jälkeen kun poissaolopyyntö on luotu kantaan.\n * Esim. submit-handlerissa insertin onnistumisen jälkeen.\n */\nexport async function enqueueAdminNewAbsence(payload: AdminNewAbsenceJobPayload) {\n  // varmistetaan, että sähköpostit on päällä ja admin-lista ei ole tyhjä\n  const settings = useSettingsStore.getState().settings;\n  const n = settings.notifications;\n  if (!n.emailNotifications || !n.absenceRequests || (n.adminNotificationEmails ?? []).length === 0) {\n    return; // ei lähetetä mitään\n  }\n\n  // työnnetään jonoihin\n  const { error } = await supabase.from(\"mail_jobs\").insert({\n    type: \"admin_new_absence\",\n    status: \"queued\",\n    attempt_count: 0,\n    payload, // { employee_id, start_date, end_date?, reason? }\n  });\n  if (error) {\n    console.warn(\"[enqueueAdminNewAbsence] insert failed\", error);\n    return;\n  }\n  // laukaise mailer heti (fire-and-forget)\n  triggerMailerNow().catch(() => {});\n}\n\n\nexport async function notifyAbsenceDecision(args: {\n  employeeId: string;\n  status: AbsenceDecision;\n  startDate: string;\n  endDate?: string | null;\n  adminMessage?: string;\n}) {\n  const { employeeId, status, startDate, endDate, adminMessage } = args;\n\n  // Lue asetus stores­ta ilman React-koukkua\n  const settings = useSettingsStore.getState().settings;\n  const emailEnabled = settings?.notifications?.emailNotifications ?? true;\n  if (!emailEnabled) return;\n\n  // Hae vastaanottaja\n  const { data: emp, error: empErr } = await supabase\n    .from(\"employees\")\n    .select(\"email, name\")\n    .eq(\"id\", employeeId)\n    .single();\n\n  if (empErr) {\n    console.warn(\"[notifyAbsenceDecision] employee fetch error\", empErr);\n    return;\n  }\n  if (!emp?.email) {\n    console.warn(\"[notifyAbsenceDecision] employee has no email\");\n    return;\n  }\n\n  const period = endDate && endDate !== startDate ? `${startDate}–${endDate}` : startDate;\n  const subject =\n    status === \"approved\"\n      ? `Poissaolopyyntösi on hyväksytty (${period})`\n      : `Poissaolopyyntösi on hylätty (${period})`;\n\n  const parts: string[] = [];\n  if (adminMessage?.trim()) {\n    parts.push(\n      status === \"approved\"\n        ? `Viestisi vastaus:\\n\\n${adminMessage.trim()}\\n\\n`\n        : `Perustelu:\\n\\n${adminMessage.trim()}\\n\\n`\n    );\n  }\n  parts.push(\n    `Hei ${emp.name ?? \"\"},\\n\\nPoissaolopyyntösi on ${status === \"approved\" ? \"hyväksytty\" : \"hylätty\"}.\\nJakso: ${period}\\n`\n  );\n  if (status === \"declined\") parts.push(\"\\nJos tämä on virhe, ole yhteydessä esihenkilöön.\\n\");\n  parts.push(\"\\nTerveisin,\\nSoili\");\n\n  // Lähetä sähköposti (Resend sandbox huomio: menee vain omaan osoitteeseesi kunnes domain verifioitu)\n  try {\n    await sendEmail({ to: emp.email, subject, text: parts.join(\"\") });\n  } catch (e) {\n    console.error(\"[notifyAbsenceDecision] email send failed\", e);\n    // Älä heitä eteenpäin – hyväksyntä/hylkäys ei saa kaatua mailiin\n  }\n\n  // Kirjaa loki (valinnainen, mutta hyödyllinen)\n  try {\n    await supabase.from(\"notifications\").insert({\n      type: status === \"approved\" ? \"absence_approved\" : \"absence_declined\",\n      title: status === \"approved\" ? \"Poissaolo hyväksytty\" : \"Poissaolo hylätty\",\n      message: `${emp.name ?? \"\"} • ${period}`,\n    });\n  } catch (e) {\n    console.warn(\"[notifyAbsenceDecision] log insert failed\", e);\n  }\n}\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 146
        }
      ]
    },
    {
      "path": "src/app/api/sendEmail/route.ts",
      "size": 1509,
      "sha256": "2eea2d84d2fc9b9dad0cec7e3f7a9bf8e3468e142978d9d202c57d55bd5659ed",
      "lang": "typescript",
      "lines": 54,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/api/sendEmail/route.ts",
      "chunks": [
        {
          "i": 0,
          "text": "\nimport { NextRequest, NextResponse } from \"next/server\";\n\ntype Body = {\n  to: string | string[];\n  subject: string;\n  text?: string;\n  html?: string;\n  replyTo?: string;\n};\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { to, subject, text, html, replyTo } = (await req.json()) as Body;\n    if (!to || !subject) {\n      return NextResponse.json({ error: \"Missing 'to' or 'subject'\" }, { status: 400 });\n    }\n\n    const RESEND_API_KEY = process.env.RESEND_API_KEY;\n    if (!RESEND_API_KEY) {\n      return NextResponse.json({ error: \"RESEND_API_KEY missing\" }, { status: 500 });\n    }\n\n    const FROM = process.env.FROM_EMAIL || \"Soili <onboarding@resend.dev>\";\n    const resp = await fetch(\"https://api.resend.com/emails\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${RESEND_API_KEY}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        from: FROM,\n        to,\n        subject,\n        text,\n        html,\n        reply_to: replyTo,\n      }),\n    });\n\n    const data: Record<string, unknown> = await resp.json().catch(() => ({}));\n\n    if (!resp.ok) {\n      return NextResponse.json({ error: data || \"Resend error\" }, { status: resp.status });\n    }\n    return NextResponse.json({ ok: true, data }, { status: 200 });\n  } catch (e: unknown) {\n    const message =\n      e instanceof Error ? e.message : typeof e === \"string\" ? e : \"Internal error\";\n    return NextResponse.json({ error: message }, { status: 500 });\n  }\n}\n\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 54
        }
      ]
    },
    {
      "path": "src/app/components/ui/NotificationsPopover.tsx",
      "size": 7845,
      "sha256": "0431e0d7cc17e25acc78a7e2a2761397e814c394e740353c8769ec239c5d3170",
      "lang": "tsx",
      "lines": 248,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/NotificationsPopover.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport React from \"react\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"./popover\";\nimport { Button } from \"./button\";\nimport { Badge } from \"./badge\";\nimport { Separator } from \"./separator\";\nimport { Bell, Check, Calendar, UserPlus, Wand2, AlertCircle } from \"lucide-react\";\nimport { supabase } from \"@/lib/supaBaseClient\";\nimport { toast } from \"sonner\";\nimport { requestPermissionAndSubscribe } from \"@/lib/pushClient\";\nimport { logError, logInfo } from \"@/lib/logger\";\n\n// NotificationsPopover.tsx, importtien jälkeen\n\n\n// korvaa koko enablePush\nasync function enablePush() {\n  try {\n    await requestPermissionAndSubscribe();\n    toast.success(\"Push-ilmoitukset käytössä\");\n  } catch (e) {\n    logError(\"notifications enablePush FAILED\", e);\n    toast.error(\"Pushin käyttöönotto epäonnistui\");\n  }\n}\n\n\nasync function disablePush() {\n  try {\n    // Poistetaan kaikki tämän SW-rekisterin tilaukset\n    const reg = await navigator.serviceWorker.getRegistration();\n    if (reg) {\n      const sub = await reg.pushManager.getSubscription();\n      if (sub) {\n        await supabase.from(\"push_subscriptions\").delete().eq(\"endpoint\", sub.endpoint);\n        await sub.unsubscribe();\n      }\n    }\n    toast.success(\"Push-ilmoitukset poistettu käytöstä\");\n  } catch (e) {\n    logError(\"notifications disablePush FAILED\", e);\n    toast.error(\"Pushin poisto epäonnistui\");\n  }\n}\n\n\ntype NotiType =\n  | \"absence_request\"\n  | \"absence_approved\"\n  | \"absence_declined\"\n  | \"employee_added\"\n  | \"shift_auto\";\n\ntype Noti = {\n  id: string;\n  created_at: string;\n  type: NotiType;\n  title: string;\n  message: string;\n  is_read: boolean;\n};\n\nfunction iconFor(type: Noti[\"type\"]) {\n  switch (type) {\n    case \"absence_request\":\n      return <AlertCircle className=\"w-4 h-4 text-amber-600\" />;\n    case \"absence_approved\":\n      return <Check className=\"w-4 h-4 text-green-600\" />;\n    case \"absence_declined\":\n      return <AlertCircle className=\"w-4 h-4 text-red-600\" />;\n    case \"employee_added\":\n      return <UserPlus className=\"w-4 h-4 text-blue-600\" />;\n    case \"shift_auto\":\n      return <Wand2 className=\"w-4 h-4 text-indigo-600\" />;\n    default:\n      return <Bell className=\"w-4 h-4\" />;\n  }\n}\n\n\nfunction timeAgo(iso: string) {\n  const diff = Math.max(0, Date.now() - new Date(iso).getTime());\n  const m = Math.floor(diff / 60000);\n  if (m < 1) return \"juuri äsken\";\n  if (m < 60) return `${m} min sitten`;\n  const h = Math.floor(m / 60);\n  if (h < 24) return `${h} h sitten`;\n  const d = Math.floor(h / 24);\n  return `${d} pv sitten`;\n}\n\nexport default function NotificationsPopover() {\n  const [open, setOpen] = React.useState(false);\n  const [items, setItems] = React.useState<Noti[]>([]);\n  const unread = items.filter((n) => !n.is_read).length;\n\n\nconst [canWrite, setCanWrite] = React.useState(false);\n\n  React.useEffect(() => {\n    (async () => {\n     const { data: sessionRes } = await supabase.auth.getSession();\n     setCanWrite(!!sessionRes.session); // vain kirjautuneena saa merkitä luetuksi\n      const { data, error } = await supabase\n        .from(\"notifications\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false })\n        .limit(50);\n      if (error) {\n        logError(\"notifications initial fetch FAILED\", error);\n      } else {\n        logInfo(\"notifications initial fetch OK\");\n        setItems((data ?? []) as Noti[]);\n      }\n    })();\n  }, []);\n\n    React.useEffect(() => {\n    if (!open) return;\n    (async () => {\n      const { data, error } = await supabase\n        .from(\"notifications\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false })\n        .limit(50);\n      if (!error) setItems((data ?? []) as Noti[]);\n    })();\n  }, [open]);\n\n\nReact.useEffect(() => {\n  const ch = supabase\n    .channel(\"notifications-rt\")\n    .on(\n      \"postgres_changes\",\n      { event: \"*\", schema: \"public\", table: \"notifications\" },\n(payload) => {\n  const newRow = payload.new as Noti | null;\n  if (!newRow) return;\n\n  if (payload.eventType === \"INSERT\") {\n    setItems((prev) => [newRow, ...prev].slice(0, 50));\n  } else if (payload.eventType === \"UPDATE\") {\n    setItems((prev) =>\n      prev.map((n) => (n.id === newRow.id ? newRow : n))\n    );\n  }\n}\n\n    )\n    .subscribe();\n  return () => void supabase.removeChannel(ch);\n}, []);\n\n\n  async function markAllRead() {\n    if (!canWrite) { toast.error(\"Kirjaudu sisään merkataksesi ilmoituksia luetuiksi\"); return; }\n    const { error } = await supabase\n      .from(\"notifications\")\n      .update({ is_read: true })\n      .eq(\"is_read\", false);\n    if (error) {\n      logError(\"notifications markAllRead FAILED\", error);\n      toast.error(\"Merkintä epäonnistui\");\n      return;\n    }\n    setItems((prev) => prev.map((n) => ({ ...n, is_read: true })));\n  }\n\n // markRead – tee optimistic päivitys vain jos klikattu\nasync function markRead(id: string) {\n  if (!canWrite) { toast.error(\"Kirjaudu sisään merkataksesi ilmoituksia luetuiksi\"); return; }\n  setItems((prev) => prev.map((n) => (n.id === id ? { ...n, is_read: true } : n)));\n  const { error } = await supabase.from(\"notifications\").update({ is_read: true }).eq(\"id\", id);\n  if (error) {\n    logError(\"notifications markRead FAILED\", error);\n    toast.error(\"Merkintä epäonnistui\");\n  }\n}\n\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n          <Bell className=\"w-4 h-4\" />\n          {unread > 0 && (\n            <Badge variant=\"destructive\" className=\"absolute -top-1 -right-1 h-5 min-w-[20px] px-1 justify-center\">\n              {unread}\n            </Badge>\n          )}\n        </Button>\n      </PopoverTrigger>\n\n      <PopoverContent className=\"w-[420px] p-0\" align=\"end\">\n        <div className=\"p-3 flex items-center justify-between\">\n          <div className=\"font-medium\">Ilmoitukset</div>\n          <div className=\"text-xs text-muted-foreground\">{unread} lukematonta</div>\n        </div>\n        <Separator />\n        {items.length === 0 ? (\n          <div className=\"p-6 text-sm text-muted-foreground flex flex-col items-center gap-2\">\n            <Calendar className=\"w-5 h-5 opacity-60\" />\n            Ei ilmoituksia\n          </div>\n        ) : (\n          <div className=\"max-h-[360px] overflow-auto\">\n            {items.map((n) => (\n              <button\n                key={n.id}\n                onClick={() => markRead(n.id)}\n                className={`w-full text-left px-3 py-2 flex gap-2 hover:bg-accent transition ${\n                  n.is_read ? \"opacity-75\" : \"\"\n                }`}\n              >\n                <div className=\"mt-0.5\">{iconFor(n.type)}</div>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"font-medium text-sm\">{n.title}</div>\n                    {!n.is_read && <span className=\"w-1.5 h-1.5 rounded-full bg-foreground inline-block\" />}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">{n.message}</div>\n                  <div className=\"text-[10px] text-muted-foreground mt-0.5\">{timeAgo(n.created_at)}</div>\n                </div>\n              </button>\n            ))}\n          </div>\n        )}\n<Separator />\n<div className=\"p-2 flex flex-wrap items-center justify-between gap-2\">\n  <Button variant=\"ghost\" size=\"sm\" className=\"shrink-0\" onClick={markAllRead}>\n    Merkitse kaikki luetuiksi\n  </Button>\n  <div className=\"flex flex-wrap gap-2\">\n    <Button variant=\"outline\" size=\"sm\" className=\"shrink-0\" onClick={enablePush}>\n      Ota push käyttöön\n    </Button>\n    <Button variant=\"ghost\" size=\"sm\" className=\"shrink-0\" onClick={disablePush}>\n      Poista push\n    </Button>\n  </div>\n</div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 248
        }
      ]
    },
    {
      "path": "src/app/components/ui/avatar.tsx",
      "size": 1104,
      "sha256": "d40b1cbabe71c094c6bcf089ac5702ec77623dbc75c770ca9f86530e03d6fea1",
      "lang": "tsx",
      "lines": 54,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/avatar.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\n\nimport { cn } from \"./utils\";\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-10 shrink-0 overflow-hidden rounded-full\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Avatar, AvatarImage, AvatarFallback };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 54
        }
      ]
    },
    {
      "path": "src/app/components/ui/badge.tsx",
      "size": 1636,
      "sha256": "8329a0b50f818665f1aca05ab93c16b103178b463f2949234ee4416bbc7d3fe2",
      "lang": "tsx",
      "lines": 47,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/badge.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"./utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\";\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 47
        }
      ]
    },
    {
      "path": "src/app/components/ui/button.tsx",
      "size": 2106,
      "sha256": "a3f96150fdf0c929eec3759673cc34b2cf5538fc088b25a54c00e0a3ed1c3f60",
      "lang": "tsx",
      "lines": 59,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/button.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"./utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background text-foreground hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9 rounded-md\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 59
        }
      ]
    },
    {
      "path": "src/app/components/ui/card.tsx",
      "size": 1988,
      "sha256": "afc99cfa090791e394e68766095a4a86f5f6140521546b32d4b298061d72473f",
      "lang": "tsx",
      "lines": 93,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/card.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "import * as React from \"react\";\n\nimport { cn } from \"./utils\";\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 pt-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <h4\n      data-slot=\"card-title\"\n      className={cn(\"leading-none\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <p\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6 [&:last-child]:pb-6\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 pb-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n};\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 93
        }
      ]
    },
    {
      "path": "src/app/components/ui/checkbox.tsx",
      "size": 1244,
      "sha256": "894eb30992723a15e3ae75c46a3bf8808a526f5b3bff2c61c78f4d3e8d521cb8",
      "lang": "tsx",
      "lines": 33,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/checkbox.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\nimport { CheckIcon } from \"lucide-react\";\n\nimport { cn } from \"./utils\";\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border bg-input-background dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  );\n}\n\nexport { Checkbox };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 33
        }
      ]
    },
    {
      "path": "src/app/components/ui/dialog.tsx",
      "size": 3828,
      "sha256": "f4adc0065a7f795b5d99b8afe095a443d2d03b523cf5f958bc36ee7fbe0d3e45",
      "lang": "tsx",
      "lines": 136,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/dialog.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { XIcon } from \"lucide-react\";\n\nimport { cn } from \"./utils\";\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />;\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />;\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />;\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />;\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DialogContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n          <XIcon />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n};\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 136
        }
      ]
    },
    {
      "path": "src/app/components/ui/input.tsx",
      "size": 963,
      "sha256": "cb82ffcd1a9accdf9b07edc8e976f43ad1c9cf91968ffd7639df5df14b7ad407",
      "lang": "tsx",
      "lines": 22,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/input.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "import * as React from \"react\";\n\nimport { cn } from \"./utils\";\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border px-3 py-1 text-base bg-input-background transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Input };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 22
        }
      ]
    },
    {
      "path": "src/app/components/ui/label.tsx",
      "size": 614,
      "sha256": "5ed157f039340cedaa59a888931db608667827170ae9538513a50ccf2ca65a9f",
      "lang": "tsx",
      "lines": 25,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/label.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\n\nimport { cn } from \"./utils\";\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Label };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 25
        }
      ]
    },
    {
      "path": "src/app/components/ui/popover.tsx",
      "size": 1641,
      "sha256": "f14e16bebcfb1b605f6336d52153e43b76456c419930faea216d0ce2e3b1d3b7",
      "lang": "tsx",
      "lines": 49,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/popover.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\n\nimport { cn } from \"./utils\";\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />;\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />;\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className,\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  );\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />;\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 49
        }
      ]
    },
    {
      "path": "src/app/components/ui/scroll-area.tsx",
      "size": 1649,
      "sha256": "5bd9bb1d6909467b431283e96d2a9c83003bca1aa043d149dcfed8e81de51986",
      "lang": "tsx",
      "lines": 59,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/scroll-area.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\n\nimport { cn } from \"./utils\";\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  );\n}\n\nfunction ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className,\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  );\n}\n\nexport { ScrollArea, ScrollBar };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 59
        }
      ]
    },
    {
      "path": "src/app/components/ui/select.tsx",
      "size": 6275,
      "sha256": "6aaf2111952394fbb8c64a505af02d08da28cc25726d61a991daebe400772480",
      "lang": "tsx",
      "lines": 190,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/select.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport {\n  CheckIcon,\n  ChevronDownIcon,\n  ChevronUpIcon,\n} from \"lucide-react\";\n\nimport { cn } from \"./utils\";\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />;\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\";\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-full items-center justify-between gap-2 rounded-md border bg-input-background px-3 py-2 text-sm whitespace-nowrap transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\",\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  );\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  );\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  );\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 190
        }
      ]
    },
    {
      "path": "src/app/components/ui/separator.tsx",
      "size": 707,
      "sha256": "54cc34fc3ef7e445948c5bccf7307efbb2c8f9e63db0fc68dd3fa8ee54dc9812",
      "lang": "tsx",
      "lines": 29,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/separator.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\n\nimport { cn } from \"./utils\";\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator-root\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Separator };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 29
        }
      ]
    },
    {
      "path": "src/app/components/ui/slider.tsx",
      "size": 2006,
      "sha256": "19dd9d8b758f41fa61967d1a0540ea34ed989727258d23eef9a50cdebcab805b",
      "lang": "tsx",
      "lines": 64,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/slider.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SliderPrimitive from \"@radix-ui/react-slider\";\n\nimport { cn } from \"./utils\";\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max],\n  );\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        \"relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\",\n        className,\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          \"bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-4 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\",\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            \"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\",\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  );\n}\n\nexport { Slider };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 64
        }
      ]
    },
    {
      "path": "src/app/components/ui/sonner.tsx",
      "size": 571,
      "sha256": "c5853f16cc11cb69e0115bab13eeabe7be5dad16fafd77b35cdfe4dbc64f0256",
      "lang": "tsx",
      "lines": 26,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/sonner.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport { useTheme } from \"next-themes\";\nimport { Toaster as Sonner, ToasterProps } from \"sonner\";\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme();\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      style={\n        {\n          \"--normal-bg\": \"var(--popover)\",\n          \"--normal-text\": \"var(--popover-foreground)\",\n          \"--normal-border\": \"var(--border)\",\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  );\n};\n\nexport { Toaster };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 26
        }
      ]
    },
    {
      "path": "src/app/components/ui/switch.tsx",
      "size": 1182,
      "sha256": "d4c744131c6161300510909aafe2c2cb6d819f2c7a8c2aeb75d4317004c7eff7",
      "lang": "tsx",
      "lines": 32,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/switch.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SwitchPrimitive from \"@radix-ui/react-switch\";\n\nimport { cn } from \"./utils\";\n\nfunction Switch({\n  className,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(\n        \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-switch-background focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb\n        data-slot=\"switch-thumb\"\n        className={cn(\n          \"bg-card dark:data-[state=unchecked]:bg-card-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\",\n        )}\n      />\n    </SwitchPrimitive.Root>\n  );\n}\n\nexport { Switch };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 32
        }
      ]
    },
    {
      "path": "src/app/components/ui/tabs.tsx",
      "size": 1945,
      "sha256": "933b8f421bd84b21a22e3fd11cd62fbf4fd8b6fb7252f42ea706b9cd29255051",
      "lang": "tsx",
      "lines": 67,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/tabs.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\";\n\nimport { cn } from \"./utils\";\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-xl p-[3px] flex\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-card dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-xl border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  );\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 67
        }
      ]
    },
    {
      "path": "src/app/components/ui/textarea.tsx",
      "size": 767,
      "sha256": "6c3127c28ba1dda0428ba286a9e291c52ad95bfc8acd10518b262b71e470f3e7",
      "lang": "tsx",
      "lines": 19,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/textarea.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "import * as React from \"react\";\n\nimport { cn } from \"./utils\";\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"resize-none border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-input-background px-3 py-2 text-base transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Textarea };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 19
        }
      ]
    },
    {
      "path": "src/app/components/ui/tooltip.tsx",
      "size": 1897,
      "sha256": "2f3a8720fb4b75c6911450be73d0407e2a84bb5ea1ded28ccdbf955be62a0155",
      "lang": "tsx",
      "lines": 62,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/tooltip.tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\n\nimport { cn } from \"./utils\";\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  );\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  );\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  );\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 62
        }
      ]
    },
    {
      "path": "src/app/components/ui/utils.ts",
      "size": 169,
      "sha256": "d1f1e0d62cb8d8d1e04c26e14de842d8a151f75812d81b046c65b5d1fe8e4b27",
      "lang": "typescript",
      "lines": 7,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/utils.ts",
      "chunks": [
        {
          "i": 0,
          "text": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 7
        }
      ]
    },
    {
      "path": "supabase/functions/app_settings/index.ts",
      "size": 6743,
      "sha256": "e0dab0d5a7592314bcb6dd9929c03215f9d02d67bbb3f6821a5ff4a10cde7c0a",
      "lang": "typescript",
      "lines": 191,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/supabase/functions/app_settings/index.ts",
      "chunks": [
        {
          "i": 0,
          "text": "// supabase/functions/app_settings/index.ts\n// Täysin tuotantokelpoinen: CORS, auth-tarkistus, zod-validointi, GET/PUT\nimport { serve } from \"https://deno.land/std@0.224.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.4\";\nimport { z } from \"https://deno.land/x/zod@v3.23.8/mod.ts\";\n\n// --- CORS + DEV bypass ---\nconst ALLOW_ORIGIN = (Deno.env.get(\"CORS_ORIGIN\") ?? \"*\").trim();\nconst DEV_ALLOW_NOAUTH =\n  (Deno.env.get(\"DEV_ALLOW_NOAUTH\") ?? \"false\").toLowerCase() === \"true\";\n\nfunction parseList(s: string) {\n  return s.split(\",\").map((x) => x.trim()).filter(Boolean);\n}\nconst ALLOWED_LIST = ALLOW_ORIGIN === \"*\" ? [] : parseList(ALLOW_ORIGIN);\n\nfunction pickOrigin(req: Request) {\n  const origin = req.headers.get(\"Origin\") ?? \"\";\n  if (ALLOW_ORIGIN === \"*\" || origin === \"\") return \"*\";\n  return ALLOWED_LIST.includes(origin) ? origin : \"null\";\n}\n\nfunction corsHeaders(origin: string) {\n  return {\n    \"Access-Control-Allow-Origin\": origin,\n    \"Access-Control-Allow-Methods\": \"GET,PUT,OPTIONS\",\n    \"Access-Control-Allow-Headers\":\n      \"authorization, content-type, x-client-info, apikey\",\n    Vary: \"Origin\",\n  };\n}\n\n// --- Admin-autentikointi (vain adminit saa kutsua) ---\n// Vähintään toinen näistä: (a) ADMIN_EMAILS env-listassa tai (b) userin profile.is_admin = true\nconst ADMIN_EMAILS = (Deno.env.get(\"ADMIN_EMAILS\") ?? \"\")\n  .split(\",\")\n  .map((s) => s.trim().toLowerCase())\n  .filter(Boolean);\n\n// Notification schema (synkassa settingsSchema.ts kanssa)\nconst NotifsSchema = z.object({\n  emailNotifications: z.boolean(),\n  adminNotificationEmails: z.array(z.string().email()).max(50),\n  absenceRequests: z.boolean(),\n  scheduleChanges: z.boolean(),\n  employeeUpdates: z.boolean(),\n  systemUpdates: z.boolean(),\n  dailyDigest: z.boolean(),\n  digestTime: z.string().regex(/^\\d{2}:\\d{2}$/),\n});\ntype Notifs = z.infer<typeof NotifsSchema>;\n\nasync function isAdmin(authClient: ReturnType<typeof createClient>) {\n  const {\n    data: { user },\n  } = await authClient.auth.getUser();\n  if (!user) return false;\n  const email = (user.email ?? \"\").toLowerCase();\n  if (ADMIN_EMAILS.includes(email)) return true;\n  const { data: prof } = await authClient\n    .from(\"profiles\")\n    .select(\"is_admin\")\n    .eq(\"id\", user.id)\n    .maybeSingle();\n  return !!prof?.is_admin;\n}\n\nserve(async (req) => {\n  // CORS\n  const origin = pickOrigin(req);\n  const base = corsHeaders(origin);\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: base });\n  }\n\n   // 1) Admin-DB client (SERVICE ROLE) → käytä TÄTÄ kaikkiin DB-kirjoituksiin/lukuun\n  const supabaseAdmin = createClient(\n    Deno.env.get(\"SUPABASE_URL\")!,\n    Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\")!\n  );\n\n  // 2) Auth client (ANON + request Authorization) → vain userin tarkistukseen\n  const supabaseAuth = createClient(\n    Deno.env.get(\"SUPABASE_URL\")!,\n    Deno.env.get(\"SUPABASE_ANON_KEY\")!,\n    { global: { headers: { Authorization: req.headers.get(\"Authorization\") ?? \"\" } } }\n  );\n\n  // DEV-bypass ennen admin-tarkistusta\n  const reqOrigin = req.headers.get(\"Origin\") ?? \"\";\n  const devBypassOk =\n    DEV_ALLOW_NOAUTH && (ALLOW_ORIGIN === \"*\" || ALLOWED_LIST.includes(reqOrigin));\n\n  if (!devBypassOk) {\n    const ok = await isAdmin(supabaseAuth);\n    if (!ok) {\n      return new Response(\n        JSON.stringify({ code: 401, message: \"Missing/invalid authorization\" }),\n        { status: 401, headers: { ...base, \"content-type\": \"application/json\" } }\n      );\n    }\n  }\n\n  try {\n    if (req.method === \"GET\") {\n      const { data, error } = await supabaseAdmin\n        .from(\"app_settings\")\n        .select(\n          \"email_notifications, admin_notification_emails, absence_requests, schedule_changes, employee_updates, system_updates, daily_digest, digest_time\"\n        )\n        .eq(\"id\", 1)\n        .maybeSingle();\n      if (error) throw error;\n\n      const notifs: Notifs = {\n        emailNotifications: data?.email_notifications ?? true,\n        adminNotificationEmails: data?.admin_notification_emails ?? [],\n        absenceRequests: data?.absence_requests ?? true,\n        scheduleChanges: data?.schedule_changes ?? true,\n        employeeUpdates: data?.employee_updates ?? false,\n        systemUpdates: data?.system_updates ?? false,\n        dailyDigest: data?.daily_digest ?? false,\n        digestTime: data?.digest_time ?? \"08:00\",\n      };\n      const parsed = NotifsSchema.safeParse(notifs);\n      const payload = parsed.success\n        ? parsed.data\n        : NotifsSchema.parse({\n            emailNotifications: true,\n            adminNotificationEmails: [],\n            absenceRequests: true,\n            scheduleChanges: true,\n            employeeUpdates: false,\n            systemUpdates: false,\n            dailyDigest: false,\n            digestTime: \"08:00\",\n          });\n      return new Response(\n        JSON.stringify({ notifications: payload }),\n        { headers: { ...base, \"content-type\": \"application/json\" } }\n      );\n    }\n\n    if (req.method === \"PUT\") {\n      const body = await req.json().catch(() => ({}));\n      const parsed = NotifsSchema.safeParse(body?.notifications);\n      if (!parsed.success) {\n        const msg = parsed.error.issues\n          .map((i) => `${i.path.join(\".\")}: ${i.message}`)\n          .join(\"; \");\n        return new Response(\n          JSON.stringify({ error: `Invalid notifications payload: ${msg}` }),\n          { status: 400, headers: { ...base, \"content-type\": \"application/json\" } }\n        );\n      }\n      const n = parsed.data;\n      const { error } = await supabaseAdmin\n        .from(\"app_settings\")\n        .upsert(\n          {\n            id: 1,\n            email_notifications: n.emailNotifications,\n            admin_notification_emails: n.adminNotificationEmails,\n            absence_requests: n.absenceRequests,\n            schedule_changes: n.scheduleChanges,\n            employee_updates: n.employeeUpdates,\n            system_updates: n.systemUpdates,\n            daily_digest: n.dailyDigest,\n            digest_time: n.digestTime,\n            updated_at: new Date().toISOString(),\n          },\n          { onConflict: \"id\" }\n        );\n      if (error) throw error;\n      return new Response(JSON.stringify({ ok: true }), {\n        headers: { ...base, \"content-type\": \"application/json\" },\n      });\n    }\n\n    return new Response(JSON.stringify({ error: \"Method Not Allowed\" }), {\n      status: 405,\n      headers: { ...base, \"content-type\": \"application/json\" },\n    });\n  } catch (e) {\n    console.error(\"[app_settings] error:\", e);\n    return new Response(\n      JSON.stringify({ error: e?.message ?? \"Unknown error\" }),\n      { status: 500, headers: { ...base, \"content-type\": \"application/json\" } }\n    );\n  }\n});",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 191
        }
      ]
    },
    {
      "path": "supabase/functions/mailer/index.ts",
      "size": 16950,
      "sha256": "308a3ca3b92618ed4689a1b51c8651a40862cff49b6fee6e7fcf4af1ee127767",
      "lang": "typescript",
      "lines": 496,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/supabase/functions/mailer/index.ts",
      "chunks": [
        {
          "i": 0,
          "text": "// supabase/functions/mailer/index.ts\n// Prosessoi mailijonon: lähettää adminille mailin uusista poissaolopyynnöistä.\n// Ajastus: cronilla esim. joka minuutti.\n\nimport \"jsr:@supabase/functions-js/edge-runtime.d.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\n\n// --- Types ---\ntype JobType = \"admin_new_absence\" | \"employee_shift_changed\" | \"employee_new_shift\" | \"employee_shift_deleted\" | string;\ntype ExtendedJobType = JobType | \"employee_new_shift\";\ntype EmployeeJobType = \"employee_shift_changed\" | \"employee_new_shift\" | \"employee_shift_deleted\";\nconst EMPLOYEE_JOB_TYPES: EmployeeJobType[] = [\"employee_shift_changed\",\"employee_new_shift\",\"employee_shift_deleted\"];\nconst MAIL_AGG_WINDOW_MIN = parseInt(Deno.env.get(\"MAIL_AGG_WINDOW_MIN\") ?? \"10\", 10);\n\ntype BaseJob = {\n  id: number;\n  type: ExtendedJobType;\n  payload: Record<string, unknown>;\n  status: \"queued\" | \"sent\" | \"failed\" | string;\n  attempt_count: number;\n  last_error?: string | null;\n  created_at: string;\n  processed_at?: string | null;\n};\n\n\ntype EmployeeShiftChangedPayload = {\n  shift_id: string;\n  employee_id: string;\n  work_date: string;\n  old_start?: string | null;\n  old_end?: string | null;\n  new_start?: string | null;\n  new_end?: string | null;\n};\n\ntype AppSettingsRow = {\n  email_notifications: boolean;\n  admin_notification_emails: string[];\n  absence_requests: boolean;\n  schedule_changes: boolean;\n  employee_updates: boolean;\n  system_updates: boolean;\n  daily_digest: boolean;\n  digest_time: string;\n};\n\ntype MailJobRow = BaseJob;\n\n// ---- ENV ----\nconst SUPABASE_URL = Deno.env.get(\"SUPABASE_URL\")!;\nconst SUPABASE_SERVICE_ROLE_KEY = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\")!;\nconst RESEND_API_KEY = Deno.env.get(\"RESEND_API_KEY\")!;\nconst FROM_EMAIL = Deno.env.get(\"FROM_EMAIL\") ?? \"Soili <onboarding@resend.dev>\";\n\nif (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {\n  throw new Error(\"Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY\");\n}\nif (!RESEND_API_KEY) {\n  throw new Error(\"Missing RESEND_API_KEY\");\n}\n\nconst sb = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {\n  auth: { persistSession: false },\n});\n\n// ---- Resend sender ----\nasync function sendEmail(to: string[] | string, subject: string, text: string) {\n  const resp = await fetch(\"https://api.resend.com/emails\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${RESEND_API_KEY}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      from: FROM_EMAIL,\n      to,\n      subject,\n      text,\n    }),\n  });\n\n  if (!resp.ok) {\n    const errText = await resp.text().catch(() => resp.statusText);\n    throw new Error(`Resend failed: ${resp.status} ${errText}`);\n  }\n}\n\n// ---- New: employee new shift ----\nasync function processEmployeeNewShift(job: BaseJob, settings: AppSettingsRow) {\n  if (!settings.email_notifications) return \"skipped: email_notifications=false\";\n  if (!settings.schedule_changes)    return \"skipped: schedule_changes=false\";\n\n  const p = job.payload;\n  const empId = String(p.employee_id ?? \"\");\n  if (!empId) return \"skipped: no employee_id\";\n\n  const { data: emp, error: empErr } = await sb\n    .from(\"employees\")\n    .select(\"email,name\")\n    .eq(\"id\", empId)\n    .maybeSingle();\n  if (empErr) throw empErr;\n  const to = emp?.email;\n  if (!to) return \"skipped: employee has no email\";\n\n  const date = String(p.work_date ?? \"\");\n  const s = p.start ? String(p.start) : \"\";\n  const e = p.end   ? String(p.end)   : \"\";\n\n  const subject = `Sinulle on lisätty uusi työvuoro (${date})`;\n  const lines = [\n    emp?.name ? `Hei ${emp.name},` : \"Hei,\",\n    \"\",\n    \"Sinulle on lisätty uusi työvuoro:\",\n    `Aika: ${s}${e ? ` – ${e}` : \"\"}`,\n    date ? `Päivä: ${date}` : null,\n    \"\",\n    \"Terveisin,\",\n    \"Soili\",\n  ].filter(Boolean).join(\"\\n\");\n\n  await sendEmail([to], subject, lines);\n  return \"sent\";\n}\n\n// ---- New: employee shift deleted ----\nasync function processEmployeeShiftDeleted(job: BaseJob, settings: AppSettingsRow) {\n  if (!settings.email_notifications) return \"skipped: email_notifications=false\";\n  if (!settings.schedule_changes)    return \"skipped: schedule_changes=false\";\n\n  const p = job.payload;\n  const empId = String(p.employee_id ?? \"\");\n  if (!empId) return \"skipped: no employee_id\";\n\n  const { data: emp, error: empErr } = await sb\n    .from(\"employees\")\n    .select(\"email,name\")\n    .eq(\"id\", empId)\n    .maybeSingle();\n  if (empErr) throw empErr;\n  const to = emp?.email;\n  if (!to) return \"skipped: employee has no email\";\n\n  const date = String(p.work_date ?? \"\");\n  const s = p.start ? String(p.start) : \"\";\n  const e = p.end   ? String(p.end)   : \"\";\n\n  const subject = `Vuorosi on peruttu (${date})`;\n  const lines = [\n    emp?.name ? `Hei ${emp.name},` : \"Hei,\",\n    \"\",\n    \"Sinulle merkitty työvuoro on poistettu.\",\n    (s || e) ? `Aika: ${s}${e ? ` – ${e}` : \"\"}` : null,\n    date ? `Päivä: ${date}` : null,\n    \"\",\n    \"Jos tämä on virhe, ole yhteydessä esihenkilöösi.\",\n    \"\",\n    \"Terveisin,\",\n    \"Soili\",\n  ].filter(Boolean).join(\"\\n\");\n\n  await sendEmail([to], subject, lines);\n  return \"sent\";\n}\n\n// =============== BULK MELUNESTO: KOONTI 5–10 MIN IKKUNASSA ===============\n// Perusidea: kun törmätään yhteen employee_* jobiin, kerätään kaikki saman työntekijän\n// queued/tuoreet jobit viimeisten N minuuttien sisällä, merkitään ne 'processing',\n// lähetetään YKSI koontimaili ja merkataan kaikki 'sent'.\n\nfunction cutoffISO(min: number) {\n  return new Date(Date.now() - min * 60_000).toISOString();\n}\n\nfunction isEmployeeJob(t: string): t is EmployeeJobType {\n  return (EMPLOYEE_JOB_TYPES as string[]).includes(t);\n}\n\nasync function claimViaRpc(employeeId: string, sinceISO: string, limit = 200) {\n  const { data, error } = await sb.rpc(\"claim_employee_jobs\", {\n    p_employee_id: employeeId,\n    p_since: sinceISO,\n    p_types: EMPLOYEE_JOB_TYPES,\n    p_limit: limit,\n  });\n  if (error) throw error;\n  // supabase-js v2 palauttaa data: any[]; tyypitetään kevyesti\n  return (data ?? []) as BaseJob[];\n}\n\n\nfunction fmtTimeMaybe(s?: string | null) {\n  if (!s) return \"\";\n  return String(s);\n}\n\nfunction summarizeEmployeeJobs(jobs: MailJobRow[]) {\n  // Palauttaa rivit ja laskurit\n  const lines: string[] = [];\n  let added = 0, changed = 0, deleted = 0;\n  // Lajittele ajankohdan mukaan display-friendly\n  jobs.sort((a, b) => (a.created_at < b.created_at ? -1 : 1));\n  for (const j of jobs) {\n    const p = j.payload;\n    const date = String(p[\"work_date\"] ?? \"\");\n    if (j.type === \"employee_new_shift\") {\n      added++;\n      const s = fmtTimeMaybe(p[\"start\"] as string | undefined);\n      const e = fmtTimeMaybe(p[\"end\"] as string | undefined);\n      lines.push(`• Uusi vuoro ${date}${s || e ? ` (${s}${e ? `–${e}` : \"\"})` : \"\"}`);\n    } else if (j.type === \"employee_shift_changed\") {\n      changed++;\n      const os = fmtTimeMaybe(p[\"old_start\"] as string | undefined);\n      const oe = fmtTimeMaybe(p[\"old_end\"] as string | undefined);\n      const ns = fmtTimeMaybe(p[\"new_start\"] as string | undefined);\n      const ne = fmtTimeMaybe(p[\"new_end\"] as string | undefined);\n      lines.push(`• Vuoro päivitetty ${date}: ${os || oe ? `${os}–${oe} ⇒ ` : \"\"}${ns}–${ne}`);\n    } else if (j.type === \"employee_shift_deleted\") {\n      deleted++;\n      const s = fmtTimeMaybe(p[\"start\"] as string | undefined);\n      const e = fmtTimeMaybe(p[\"end\"] as string | undefined);\n      lines.push(`• Vuoro poistettu ${date}${s || e ? ` (${s}${e ? `–${e}` : \"\"})` : \"\"}`);\n    }\n  }\n  return { lines, added, changed, deleted };\n}\n\ntype AggregationResult =\n  | { kind: \"handled\"; claimedIds: number[]; count: number }\n  | { kind: \"failed\"; claimedIds: number[]; error: string }\n  | { kind: \"fallback\" };\n\nasync function processEmployeeJobsAggregated(anchorJob: BaseJob, settings: AppSettingsRow): Promise<AggregationResult> {\n  if (!settings.email_notifications || !settings.schedule_changes) return \"skipped: schedule notifications off\";\n  const empId = String(anchorJob.payload[\"employee_id\"] ?? \"\");\n  if (!empId) return \"skipped: no employee_id\";\n\n  // Hae vastaanottaja\n  const { data: emp, error: empErr } = await sb\n    .from(\"employees\")\n    .select(\"email,name\")\n    .eq(\"id\", empId)\n    .maybeSingle();\n  if (empErr) throw empErr;\n  const to = emp?.email;\n  if (!to) return \"skipped: employee has no email\";\n\n  const since = cutoffISO(MAIL_AGG_WINDOW_MIN);\n  const claimed = await claimViaRpc(empId, since);\n  if (!claimed.length) {\n    // Ei mitään koottavaa tämän ankkurin ympärille → anna kutsujan hoitaa fallback\n    return { kind: \"fallback\" };\n  }\n\n  const { lines, added, changed, deleted } = summarizeEmployeeJobs(claimed);\n  if (lines.length === 0) {\n    await sb.from(\"mail_jobs\")\n      .update({ status: \"sent\", processed_at: new Date().toISOString(), last_error: null })\n      .in(\"id\", claimed.map(j => j.id));\n    return { kind: \"handled\", claimedIds: claimed.map(j => j.id), count: 0 };\n  }\n\n  // subject esim: \"Työvuoripäivitykset (5 kpl) – <päivämäärä>\"\n  const total = added + changed + deleted;\n  const today = new Date().toISOString().slice(0,10);\n  const subject = `Työvuoripäivitykset (${total} kpl) – ${today}`;\n  const greeting = emp?.name ? `Hei ${emp.name},` : \"Hei,\";\n  const text = [\n    greeting, \"\", \n    \"Tässä viimeisimmät muutokset työvuoroihisi:\", \n    \"\", \n    ...lines, \n    \"\", \n    \"Terveisin,\", \n    \"Soili\"\n  ].join(\"\\n\");\n\n  try {\n    await sendEmail([to], subject, text);\n    // Merkkaa kaikki claimed sentiksi\n    await sb.from(\"mail_jobs\")\n      .update({ status: \"sent\", processed_at: new Date().toISOString(), last_error: null })\n      .in(\"id\", claimed.map(j => j.id));\n    return { kind: \"handled\", claimedIds: claimed.map(j => j.id), count: total };\n  } catch (e) {\n    const msg = e instanceof Error ? e.message : String(e);\n    await sb.from(\"mail_jobs\")\n      .update({ status: \"failed\", processed_at: new Date().toISOString(), last_error: msg.slice(0, 500) })\n      .in(\"id\", claimed.map(j => j.id));\n    return { kind: \"failed\", claimedIds: claimed.map(j => j.id), error: msg };\n  }\n}\n\n\n\n// ---- Load settings (DB is source of truth) ----\nasync function loadSettings(): Promise<AppSettingsRow> {\n  const { data, error } = await sb\n    .from(\"app_settings\")\n    .select(\"email_notifications, admin_notification_emails, absence_requests, schedule_changes, employee_updates, system_updates, daily_digest, digest_time\")\n    .eq(\"id\", 1)\n    .maybeSingle();\n  if (error) throw error;\n  return data ?? {\n    email_notifications: true,\n    admin_notification_emails: [],\n    absence_requests: true,\n    schedule_changes: true,\n    employee_updates: false,\n    system_updates: false,\n    daily_digest: false,\n    digest_time: \"08:00\",\n  };\n}\n\n// ---- Process one job ----\nasync function processAdminNewAbsence(job: BaseJob, settings: AppSettingsRow) {\n  if (!settings.email_notifications) return \"skipped: email_notifications=false\";\n  if (!settings.absence_requests) return \"skipped: absence_requests=false\";\n  const recipients = settings.admin_notification_emails ?? [];\n  if (!Array.isArray(recipients) || recipients.length === 0) return \"skipped: no recipients\";\n\n  // Hae nimi\n  const { data: emp, error: empErr } = await sb\n    .from(\"employees\")\n    .select(\"name\")\n    .eq(\"id\", String(job.payload.employee_id))\n    .maybeSingle();\n\n  if (empErr) throw empErr;\n\n  const employeeName = emp?.name ?? \"Tuntematon\";\n  const s = String(job.payload.start_date);\n  const e = (job.payload.end_date ?? job.payload.start_date) as string;\n\n  const subject = `Uusi poissaolopyyntö: ${employeeName} (${s}${e !== s ? `–${e}` : \"\"})`;\n  const lines = [\n    `Työntekijä: ${employeeName}`,\n    `Ajankohta: ${s}${e !== s ? ` – ${e}` : \"\"}`,\n    job.payload.reason ? `Syy: ${String(job.payload.reason)}` : null,\n    // Voit halutessa lisätä dashboard-linkin .env:iin, esim. DASHBOARD_URL\n    Deno.env.get(\"DASHBOARD_URL\") ? `Avaa hallinta: ${Deno.env.get(\"DASHBOARD_URL\")}` : null,\n  ].filter(Boolean);\n  const text = lines.join(\"\\n\");\n\n  await sendEmail(recipients, subject, text);\n  return \"sent\";\n}\n\n// ---- New: employee shift changed ----\nasync function processEmployeeShiftChanged(job: BaseJob, settings: AppSettingsRow) {\n  if (!settings.email_notifications) return \"skipped: email_notifications=false\";\n  if (!settings.schedule_changes)    return \"skipped: schedule_changes=false\";\n\n  const p = job.payload as EmployeeShiftChangedPayload;\n  const empId = String(p.employee_id ?? \"\");\n  if (!empId) return \"skipped: no employee_id\";\n\n  const { data: emp, error: empErr } = await sb\n    .from(\"employees\")\n    .select(\"email,name\")\n    .eq(\"id\", empId)\n    .maybeSingle();\n  if (empErr) throw empErr;\n  const to = emp?.email;\n  if (!to) return \"skipped: employee has no email\";\n\n  const date = String(p.work_date ?? \"\");\n  const oldS = p.old_start ? String(p.old_start) : \"\";\n  const oldE = p.old_end   ? String(p.old_end)   : \"\";\n  const newS = p.new_start ? String(p.new_start) : \"\";\n  const newE = p.new_end   ? String(p.new_end)   : \"\";\n\n  const subject = `Työvuorosi on muuttunut (${date})`;\n  const lines = [\n    emp?.name ? `Hei ${emp.name},` : \"Hei,\",\n    \"\",\n    \"Työvuoriasi on päivitetty:\",\n    (oldS || oldE) ? `Aiemmin: ${oldS} – ${oldE}` : null,\n    `Uusi:    ${newS} – ${newE}`,\n    date ? `Päivä:   ${date}` : null,\n    \"\",\n    \"Jos tämä ei käy, ole yhteydessä esihenkilöön.\",\n    \"\",\n    \"Terveisin,\",\n    \"Soili\",\n  ].filter(Boolean).join(\"\\n\");\n\n  await sendEmail([to], subject, lines);\n  return \"sent\";\n}\n\n\n// ---- Main queue loop ----\nasync function processQueue(limit = 25) {\n  const settings = await loadSettings();\n\n  const { data: jobs, error } = await sb\n    .from(\"mail_jobs\")\n    .select(\"*\")\n    .eq(\"status\", \"queued\")\n    .order(\"created_at\", { ascending: true })\n    .limit(limit);\n\n  if (error) throw error;\n  if (!jobs || jobs.length === 0) return { processed: 0 };\n\n  let success = 0;\n  let failed = 0;\n\n  // Koonti voi “nielaista” monta jobia kerralla. Pidetään kirjaa niistä, ettei\n  // samaa satsiä käsitellä uudestaan saman loopin myöhemmillä iteraatioilla.\n  const skipIds = new Set<number>();\n\n  for (const job of jobs as BaseJob[]) {\n    if (skipIds.has(job.id)) continue; // jo käsitelty osana koontia\n    try {\n      let outcome = \"skipped\";\n      if (job.type === \"admin_new_absence\") {\n        outcome = await processAdminNewAbsence(job, settings);\n      } else if (isEmployeeJob(job.type)) {\n        // UUSI: koonti viimeisen N minuutin ikkunassa\n        const agg = await processEmployeeJobsAggregated(job, settings);\n        if (agg.kind === \"handled\") {\n          agg.claimedIds.forEach(id => skipIds.add(id));\n          success++;\n          continue; // koonti hoiti statukset\n        }\n        if (agg.kind === \"failed\") {\n          agg.claimedIds.forEach(id => skipIds.add(id));\n          failed++;\n          continue; // koonti hoiti statukset failediksi\n        }\n        // agg.kind === \"fallback\" → käsitellään normaalisti yksittäisenä alla\n      } else if (job.type === \"employee_shift_changed\") {\n        // (varalle; normaalisti yllä oleva haaraa jo tämän)\n        outcome = await processEmployeeShiftChanged(job, settings);\n      } else if (job.type === \"employee_new_shift\") {\n        outcome = await processEmployeeNewShift(job, settings);\n      } else if (job.type === \"employee_shift_deleted\") {\n        outcome = await processEmployeeShiftDeleted(job, settings);\n      } else {\n        outcome = `skipped: unknown type ${job.type}`;\n      }\n\n      // Päivitä tila\n      await sb\n        .from(\"mail_jobs\")\n        .update({\n          status: outcome.startsWith(\"sent\")\n            ? \"sent\"\n            : outcome.startsWith(\"skipped\")\n            ? \"sent\"\n            : \"failed\",\n          attempt_count: job.attempt_count + 1,\n          last_error: outcome.startsWith(\"sent\") ? null : outcome,\n          processed_at: new Date().toISOString(),\n        })\n        .eq(\"id\", job.id);\n\n      if (outcome.startsWith(\"sent\")) success++;\n      else if (!outcome.startsWith(\"skipped\")) failed++;\n    } catch (e: unknown) {\n      failed++;\n      const msg = e instanceof Error ? e.message : String(e);\n      await sb\n        .from(\"mail_jobs\")\n        .update({\n          status: \"failed\",\n          attempt_count: job.attempt_count + 1,\n          last_error: msg.slice(0, 500),\n          processed_at: new Date().toISOString(),\n        })\n        .eq(\"id\", job.id);\n    }\n  }\n\n\n  return { processed: jobs.length, success, failed };\n}\n\n// ---- Edge entrypoint ----\nDeno.serve(async () => {\n  try {\n    const res = await processQueue(25);\n    return new Response(JSON.stringify(res), {\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  } catch (e: unknown) {\n    const msg = e instanceof Error ? e.message : String(e);\n    return new Response(JSON.stringify({ error: msg }), { status: 500 });\n  }\n});\n\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 496
        }
      ]
    },
    {
      "path": "supabase/functions/sendemail/index.ts",
      "size": 4211,
      "sha256": "00024e978c47804d1232c13503f06f93a0a0512ce27badc80ae3ab0e70f1c387",
      "lang": "typescript",
      "lines": 145,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/supabase/functions/sendemail/index.ts",
      "chunks": [
        {
          "i": 0,
          "text": "// supabase/functions/sendemail/index.ts\n// Deno + Supabase Edge Function + Resend\nimport \"jsr:@supabase/functions-js/edge-runtime.d.ts\";\nimport { Resend } from \"npm:resend@3\";\nimport { z } from \"npm:zod@3\";\n\nconst resend = new Resend(Deno.env.get(\"RESEND_API_KEY\") ?? \"\");\nconst FROM = Deno.env.get(\"FROM_EMAIL\") ?? \"Soili <onboarding@resend.dev>\";\nconst ALLOWED_ORIGIN = Deno.env.get(\"ALLOWED_ORIGIN\") ?? \"*\";\n\n// Salli vain POST + CORS preflight\nfunction corsHeaders(origin: string | null) {\n  const o = origin && ALLOWED_ORIGIN !== \"*\" ? ALLOWED_ORIGIN : \"*\";\n  return {\n    \"Access-Control-Allow-Origin\": o,\n    \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n    \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n  };\n}\n\nconst BodySchema = z.object({\n  to: z.union([z.string().email(), z.array(z.string().email()).nonempty()]),\n  subject: z.string().min(1),\n  // vähintään toinen: text tai html\n  text: z.string().optional(),\n  html: z.string().optional(),\n  replyTo: z.string().email().optional(),\n  // kevyt anti-spam kenttä (honeypot)\n  _honey: z.string().optional(),\n});\n\ntype ResendError = {\n  name?: string;\n  message?: string;\n  statusCode?: number;\n  [key: string]: unknown;\n};\n\n\nDeno.serve(async (req) => {\n  // CORS preflight\n  if (req.method === \"OPTIONS\") {\n    return new Response(\"ok\", { headers: corsHeaders(req.headers.get(\"Origin\")) });\n  }\n\n  if (req.method !== \"POST\") {\n    return new Response(JSON.stringify({ error: \"Method Not Allowed\" }), {\n      status: 405,\n      headers: { \"content-type\": \"application/json\", ...corsHeaders(req.headers.get(\"Origin\")) },\n    });\n  }\n\n  try {\n    const origin = req.headers.get(\"Origin\");\n    const headers = { \"content-type\": \"application/json\", ...corsHeaders(origin) };\n\n    // **Supabase Functions vaatii Authorization: Bearer <anon|service key>**\n    const auth = req.headers.get(\"authorization\") ?? \"\";\n    if (!auth.toLowerCase().startsWith(\"bearer \")) {\n      return new Response(JSON.stringify({ error: \"Missing Authorization Bearer token\" }), {\n        status: 401,\n        headers,\n      });\n    }\n\n    const json = await req.json().catch(() => null);\n    const parsed = BodySchema.safeParse(json);\n    if (!parsed.success) {\n      return new Response(JSON.stringify({ error: \"Invalid body\", details: parsed.error.flatten() }), {\n        status: 400,\n        headers,\n      });\n    }\n\n    const { to, subject, text, html, replyTo, _honey } = parsed.data;\n\n    // honeypot – jos botti täyttää, dropataan\n    if (_honey && _honey.trim() !== \"\") {\n      return new Response(JSON.stringify({ ok: true, dropped: true }), { status: 200, headers });\n    }\n\n    if (!text && !html) {\n      return new Response(JSON.stringify({ error: \"Provide 'text' or 'html'\" }), {\n        status: 400,\n        headers,\n      });\n    }\n\n    type ResendSendResponse = {\n    id?: string;\n    error?: {\n    name?: string;\n    message?: string;\n    statusCode?: number;\n    [key: string]: unknown;\n    } | string | null;\n    [key: string]: unknown;\n    };\n\nconst sendRes = (await resend.emails.send({\n  from: FROM,\n  to,\n  subject,\n  text: text ?? undefined,\n  html: html ?? undefined,\n  reply_to: replyTo,\n})) as ResendSendResponse;\n\nif (sendRes.error) {\n  const err: ResendError =\n    typeof sendRes.error === \"string\"\n      ? { message: sendRes.error }\n      : (sendRes.error ?? {});\n\n  const status =\n    typeof err.statusCode === \"number\" &&\n    err.statusCode >= 400 &&\n    err.statusCode < 600\n      ? err.statusCode\n      : 400;\n\n  return new Response(\n    JSON.stringify({\n      error: {\n        name: err.name ?? \"ResendError\",\n        message: err.message ?? \"Resend rejected the request\",\n        statusCode: status,\n      },\n      hint:\n        \"Check RESEND_API_KEY, FROM_EMAIL (sandbox vs. verified domain), and recipient.\",\n    }),\n    { status, headers }\n  );\n}\n\n\n    return new Response(JSON.stringify({ ok: true, data: sendRes }), { status: 200, headers });\n} catch (e: unknown) {\n  return new Response(\n    JSON.stringify({ error: \"Internal error\", details: String(e) }),\n    { status: 500, headers: { \"content-type\": \"application/json\", ...corsHeaders(req.headers.get(\"Origin\")) } }\n  );\n}\n});\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 145
        }
      ]
    },
    {
      "path": "supabase/migrations/20250901124740_remote_schema.sql",
      "size": 0,
      "sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "lang": "sql",
      "lines": 1,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/supabase/migrations/20250901124740_remote_schema.sql",
      "chunks": [
        {
          "i": 0,
          "text": "",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 1
        }
      ]
    },
    {
      "path": "supabase/schema.sql",
      "size": 110448,
      "sha256": "b4f1ea6b4ebaf3d87550a385f5037efa47e0eca77babc8133c6bdfecc4e46bd8",
      "lang": "sql",
      "lines": 4000,
      "modifiedAt": "2025-09-02T01:28:28+03:00",
      "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
      "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/supabase/schema.sql",
      "chunks": [
        {
          "i": 0,
          "text": "--\n-- PostgreSQL database dump\n--\n\n\\restrict [REDACTED]\n\n-- Dumped from database version 17.4\n-- Dumped by pg_dump version 17.6 (Ubuntu 17.6-1.pgdg24.04+1)\n\nSET statement_timeout = 0;\nSET lock_timeout = 0;\nSET idle_in_transaction_session_timeout = 0;\nSET transaction_timeout = 0;\nSET client_encoding = 'UTF8';\nSET standard_conforming_strings = on;\nSELECT pg_catalog.set_config('search_path', '', false);\nSET check_function_bodies = false;\nSET xmloption = content;\nSET client_min_messages = warning;\nSET row_security = off;\n\n--\n-- Name: auth; Type: SCHEMA; Schema: -; Owner: -\n--\n\nCREATE SCHEMA auth;\n\n\n--\n-- Name: pg_cron; Type: EXTENSION; Schema: -; Owner: -\n--\n\nCREATE EXTENSION IF NOT EXISTS pg_cron WITH SCHEMA pg_catalog;\n\n\n--\n-- Name: EXTENSION pg_cron; Type: COMMENT; Schema: -; Owner: -\n--\n\nCOMMENT ON EXTENSION pg_cron IS 'Job scheduler for PostgreSQL';\n\n\n--\n-- Name: graphql; Type: SCHEMA; Schema: -; Owner: -\n--\n\nCREATE SCHEMA graphql;\n\n\n--\n-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: -\n--\n\nCREATE SCHEMA graphql_public;\n\n\n--\n-- Name: pg_net; Type: EXTENSION; Schema: -; Owner: -\n--\n\nCREATE EXTENSION IF NOT EXISTS pg_net WITH SCHEMA extensions;\n\n\n--\n-- Name: EXTENSION pg_net; Type: COMMENT; Schema: -; Owner: -\n--\n\nCOMMENT ON EXTENSION pg_net IS 'Async HTTP';\n\n\n--\n-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: -\n--\n\nCREATE SCHEMA pgbouncer;\n\n\n--\n-- Name: realtime; Type: SCHEMA; Schema: -; Owner: -\n--\n\nCREATE SCHEMA realtime;\n\n\n--\n-- Name: storage; Type: SCHEMA; Schema: -; Owner: -\n--\n\nCREATE SCHEMA storage;\n\n\n--\n-- Name: supabase_migrations; Type: SCHEMA; Schema: -; Owner: -\n--\n\nCREATE SCHEMA supabase_migrations;\n\n\n--\n-- Name: vault; Type: SCHEMA; Schema: -; Owner: -\n--\n\nCREATE SCHEMA vault;\n\n\n--\n-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -\n--\n\nCREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;\n\n\n--\n-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: -\n--\n\nCOMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';\n\n\n--\n-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -\n--\n\nCREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;\n\n\n--\n-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: -\n--\n\nCOMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';\n\n\n--\n-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -\n--\n\nCREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;\n\n\n--\n-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: -\n--\n\nCOMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';\n\n\n--\n-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -\n--\n\nCREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;\n\n\n--\n-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: -\n--\n\nCOMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';\n\n\n--\n-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -\n--\n\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\" WITH SCHEMA extensions;\n\n\n--\n-- Name: EXTENSION \"uuid-ossp\"; Type: COMMENT; Schema: -; Owner: -\n--\n\nCOMMENT ON EXTENSION \"uuid-ossp\" IS 'generate universally unique identifiers (UUIDs)';\n\n\n--\n-- Name: aal_level; Type: TYPE; Schema: auth; Owner: -\n--\n\nCREATE TYPE auth.aal_level AS ENUM (\n    'aal1',\n    'aal2',\n    'aal3'\n);\n\n\n--\n-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: -\n--\n\nCREATE TYPE auth.code_challenge_method AS ENUM (\n    's256',\n    'plain'\n);\n\n\n--\n-- Name: factor_status; Type: TYPE; Schema: auth; Owner: -\n--\n\nCREATE TYPE auth.factor_status AS ENUM (\n    'unverified',\n    'verified'\n);\n\n\n--\n-- Name: factor_type; Type: TYPE; Schema: auth; Owner: -\n--\n\nCREATE TYPE auth.factor_type AS ENUM (\n    'totp',\n    'webauthn',\n    'phone'\n);\n\n\n--\n-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: -\n--\n\nCREATE TYPE auth.one_time_token_type AS ENUM (\n    'confirmation_token',\n    'reauthentication_token',\n    'recovery_token',\n    'email_change_token_new',\n    'email_change_token_current',\n    'phone_change_token'\n);\n\n\n--\n-- Name: action; Type: TYPE; Schema: realtime; Owner: -\n--\n\nCREATE TYPE realtime.action AS ENUM (\n    'INSERT',\n    'UPDATE',\n    'DELETE',\n    'TRUNCATE',\n    'ERROR'\n);\n\n\n--\n-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: -\n--\n\nCREATE TYPE realtime.equality_op AS ENUM (\n    'eq',\n    'neq',\n    'lt',\n    'lte',\n    'gt',\n    'gte',\n    'in'\n);\n\n\n--\n-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: -\n--\n\nCREATE TYPE realtime.user_defined_filter AS (\n\tcolumn_name text,\n\top realtime.equality_op,\n\tvalue text\n);\n\n\n--\n-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: -\n--\n\nCREATE TYPE realtime.wal_column AS (\n\tname text,\n\ttype_name text,\n\ttype_oid oid,\n\tvalue jsonb,\n\tis_pkey boolean,\n\tis_selectable boolean\n);\n\n\n--\n-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: -\n--\n\nCREATE TYPE realtime.wal_rls AS (\n\twal jsonb,\n\tis_rls_enabled boolean,\n\tsubscription_ids uuid[],\n\terrors text[]\n);\n\n\n--\n-- Name: email(); Type: FUNCTION; Schema: auth; Owner: -\n--\n\nCREATE FUNCTION auth.email() RETURNS text\n    LANGUAGE sql STABLE\n    AS $$\n  select \n  coalesce(\n    nullif(current_setting('request.jwt.claim.email', true), ''),\n    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')\n  )::text\n$$;\n\n\n--\n-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';\n\n\n--\n-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: -\n--\n\nCREATE FUNCTION auth.jwt() RETURNS jsonb\n    LANGUAGE sql STABLE\n    AS $$\n  select \n    coalesce(\n        nullif(current_setting('request.jwt.claim', true), ''),\n        nullif(current_setting('request.jwt.claims', true), '')\n    )::jsonb\n$$;\n\n\n--\n-- Name: role(); Type: FUNCTION; Schema: auth; Owner: -\n--\n\nCREATE FUNCTION auth.role() RETURNS text\n    LANGUAGE sql STABLE\n    AS $$\n  select \n  coalesce(\n    nullif(current_setting('request.jwt.claim.role', true), ''),\n    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')\n  )::text\n$$;\n\n\n--\n-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';\n\n\n--\n-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: -\n--\n\nCREATE FUNCTION auth.uid() RETURNS uuid\n    LANGUAGE sql STABLE\n    AS $$\n  select \n  coalesce(\n    nullif(current_setting('request.jwt.claim.sub', true), ''),\n    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')\n  )::uuid\n$$;\n\n\n--\n-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';\n\n\n--\n-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: -\n--\n\nCREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)\n    LANGUAGE plpgsql SECURITY DEFINER\n    AS $_$\nbegin\n    raise debug 'PgBouncer auth request: %', p_usename;\n\n    return query\n    select \n        rolname::text, \n        case when rolvaliduntil < now() \n            then null \n            else rolpassword::text \n        end \n    from pg_authid \n    where rolname=$1 and rolcanlogin;\nend;\n$_$;\n\n\nSET default_tablespace = '';\n\nSET default_table_access_method = heap;\n\n--\n-- Name: mail_jobs; Type: TABLE; Schema: public; Owner: -\n--\n\nCREATE TABLE public.mail_jobs (\n    id bigint NOT NULL,\n    type text NOT NULL,\n    payload jsonb NOT NULL,\n    status text DEFAULT 'queued'::text NOT NULL,\n    attempt_count integer DEFAULT 0 NOT NULL,\n    last_error text,\n    created_at timestamp with time zone DEFAULT now() NOT NULL,\n    processed_at timestamp with time zone,\n    job_key text GENERATED ALWAYS AS (\nCASE\n    WHEN (type = 'admin_new_absence'::text) THEN (((((payload ->> 'employee_id'::text) || '|'::text) || (payload ->> 'start_date'::text)) || '|'::text) || COALESCE((payload ->> 'end_date'::text), ''::text))\n    ELSE NULL::text\nEND) STORED\n);\n\n\n--\n-- Name: claim_employee_jobs(text, timestamp with time zone, text[], integer); Type: FUNCTION; Schema: public; Owner: -\n--\n\nCREATE FUNCTION public.claim_employee_jobs(p_employee_id text, p_since timestamp with time zone, p_types text[], p_limit integer DEFAULT 200) RETURNS SETOF public.mail_jobs\n    LANGUAGE sql SECURITY DEFINER\n    SET search_path TO 'public'\n    AS $$\n  with candidate as (\n    select id\n    from public.mail_jobs\n    where status = 'queued'\n      and created_at >= p_since\n      and type = any(p_types)\n      and payload->>'employee_id' = p_employee_id\n    order by created_at asc\n    limit p_limit\n  ),\n  locked as (\n    update public.mail_jobs m\n      set status = 'processing',\n          processed_at = now(),\n          attempt_count = m.attempt_count + 1\n    where m.id in (select id from candidate)\n      and m.status = 'queued'\n    returning m.*\n  )\n  select * from locked;\n$$;\n\n\n--\n-- Name: claim_employee_jobs(uuid, timestamp with time zone, text[], integer); Type: FUNCTION; Schema: public; Owner: -\n--\n\nCREATE FUNCTION public.claim_employee_jobs(p_employee_id uuid, p_since timestamp with time zone, p_types text[], p_limit integer DEFAULT 200) RETURNS SETOF public.mail_jobs\n    LANGUAGE plpgsql SECURITY DEFINER\n    SET search_path TO 'public'\n    AS $$\nbegin\n  return query\n  with cte as (\n    select id\n    from mail_jobs\n    where status = 'queued'\n      and (payload->>'employee_id') = p_employee_id::text\n      and type = any(p_types)\n      and created_at >= p_since\n    order by created_at asc\n    limit p_limit\n    for update skip locked\n  )\n  update mail_jobs m\n  set status = 'processing'\n  from cte\n  where m.id = cte.id\n  returning m.*;\nend;\n$$;\n\n\n--\n-- Name: enqueue_admin_new_absence(); Type: FUNCTION; Schema: public; Owner: -\n--\n\nCREATE FUNCTION public.enqueue_admin_new_absence() RETURNS trigger\n    LANGUAGE plpgsql SECURITY DEFINER\n    AS $$\nDECLARE\n  cfg RECORD;\n  _end_date date;\nBEGIN\n  SELECT email_notifications, absence_requests, admin_notification_emails\n    INTO cfg\n  FROM public.app_settings\n  WHERE id = 1;\n\n  IF COALESCE(cfg.email_notifications,false) IS NOT TRUE THEN RETURN NEW; END IF;\n  IF COALESCE(cfg.absence_requests,false)     IS NOT TRUE THEN RETURN NEW; END IF;\n  IF cfg.admin_notification_emails IS NULL\n     OR array_length(cfg.admin_notification_emails,1) < 1 THEN\n    RETURN NEW;\n  END IF;\n\n  -- normalisoi: jos end_date puuttuu → start_date\n  _end_date := COALESCE(NEW.end_date, NEW.start_date);\n\n  INSERT INTO public.mail_jobs (type, status, attempt_count, payload)\n  VALUES (\n    'admin_new_absence',\n    'queued',\n    0,\n    jsonb_build_object(\n      'employee_id', NEW.employee_id,\n      'start_date', NEW.start_date,\n      'end_date',   _end_date,\n      'reason',     NEW.reason\n    )\n  )\n  ON CONFLICT (job_key) DO NOTHING;  -- nyt toimii, koska on UNIQUE CONSTRAINT\n\n  -- älä kaada inserttiä vaikka HTTP failaa\n  BEGIN\n    PERFORM net.http_post(\n      url     := 'https://musrmpblsazxcrhwthtc.functions.supabase.co/mailer',\n      headers := jsonb_build_object('Authorization','Bearer '||'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.[REDACTED].k6zU1Eiif-06XVvlHMugfxsL-ZFnXiTuf5Qg28r5x8A'),\n      body    := '{}'::jsonb\n    );\n  EXCEPTION WHEN OTHERS THEN\n    NULL;\n  END;\n\n  RETURN NEW;\nEND;\n$$;\n\n\n--\n-- Name: enqueue_employee_new_shift(); Type: FUNCTION; Schema: public; Owner: -\n--\n\nCREATE FUNCTION public.enqueue_employee_new_shift() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\nbegin\n  if new.published is true then\n    insert into public.mail_jobs(type, payload)\n    values ('employee_new_shift', jsonb_build_object(\n      'employee_id', new.employee_id,\n      'work_date', new.work_date::text,\n      'start', new.start_time::text,\n      'end', new.end_time::text\n    ));\n  end if;\n  return new;\nend$$;\n\n\n--\n-- Name: enqueue_employee_shift_changed(); Type: FUNCTION; Schema: public; Owner: -\n--\n\nCREATE FUNCTION public.enqueue_employee_shift_changed() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\ndeclare\n  changed boolean := false;\nbegin\n  -- ilmoita vain jos new.published=true\n  if new.published is not true then\n    return new;\n  end if;\n\n  if (old.employee_id is distinct from new.employee_id)\n     or (old.start_time  is distinct from new.start_time)\n     or (old.end_time    is distinct from new.end_time)\n     or (old.work_date   is distinct from new.work_date) then\n    changed := true;\n  end if;\n\n  if changed then\n    insert into public.mail_jobs(type, payload)\n    values ('employee_shift_changed', jsonb_build_object(\n      'employee_id', new.employee_id,\n      'work_date', new.work_date::text,\n      'old_start', old.start_time::text,\n      'old_end',   old.end_time::text,\n      'new_start', new.start_time::text,\n      'new_end',   new.end_time::text\n    ));\n\n    -- BONUS (listasi kohta 4): jos työntekijä vaihtui, ilmoita vanhalle \"removed\"\n    if old.employee_id is distinct from new.employee_id then\n      insert into public.mail_jobs(type, payload)\n      values ('employee_shift_deleted', jsonb_build_object(\n        'employee_id', old.employee_id,\n        'work_date',   coalesce(new.work_date, old.work_date)::text,\n        'start',       old.start_time::text,\n        'end',         old.end_time::text\n      ));\n    end if;\n  end if;\n\n  return new;\nend$$;\n\n\n--\n-- Name: enqueue_employee_shift_deleted(); Type: FUNCTION; Schema: public; Owner: -\n--\n\nCREATE FUNCTION public.enqueue_employee_shift_deleted() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\nbegin\n  -- ilmoita vain jos poistettava rivi oli julkaistu\n  if old.published is true then\n    insert into public.mail_jobs(type, payload)\n    values ('employee_shift_deleted', jsonb_build_object(\n      'employee_id', old.employee_id,\n      'work_date',   old.work_date::text,\n      'start',       old.start_time::text,\n      'end',         old.end_time::text\n    ));\n  end if;\n  return old;\nend$$;\n\n\n--\n-- Name: enqueue_on_publish_flip(); Type: FUNCTION; Schema: public; Owner: -\n--\n\nCREATE FUNCTION public.enqueue_on_publish_flip() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\nbegin\n  if old.published is distinct from new.published and new.published is true then\n    new.published_at := coalesce(new.published_at, now());\n    insert into public.mail_jobs(type, payload)\n    values ('employee_new_shift', jsonb_build_object(\n      'employee_id', new.employee_id,\n      'work_date',   new.work_date::text,\n      'start',       new.start_time::text,\n      'end',         new.end_time::text\n    ));\n  end if;\n  return new;\nend$$;\n\n\n--\n-- Name: notify_absence_insert(); Type: FUNCTION; Schema: public; Owner: -\n--\n\nCREATE FUNCTION public.notify_absence_insert() RETURNS trigger\n    LANGUAGE plpgsql SECURITY DEFINER\n    SET search_path TO 'public'\n    AS $$\nbegin\n  insert into public.notifications(type, title, message)\n  values (\n    'absence_request',\n    'Uusi poissaolopyyntö',\n    'Työntekijä ' || coalesce((select name from public.employees e where e.id = new.employee_id), 'Tuntematon')\n      || ' on jättänyt poissaolopyynnön ' || new.start_date::text\n      || coalesce(' – ' || new.end_date::text, '')\n  );\n  return new;\nend $$;\n\n\n--\n-- Name: notify_absence_status_update(); Type: FUNCTION; Schema: public; Owner: -\n--\n\nCREATE FUNCTION public.notify_absence_status_update() RETURNS trigger\n    LANGUAGE plpgsql SECURITY DEFINER\n    SET search_path TO 'public'\n    AS $$\nbegin\n  if new.status is distinct from old.status then\n    if new.status = 'approved' then\n      insert into public.notifications(type, title, message)\n      values (\n        'absence_approved',\n        'Poissaolo hyväksytty',\n        'Poissaolo ('|| new.start_date::text || coalesce(' – '||new.end_date::text,'') || ') hyväksyttiin.'\n      );\n    elsif new.status = 'declined' then\n      insert into public.notifications(type, title, message)\n      values (\n        'absence_declined',\n        'Poissaolo hylätty',\n        'Poissaolopyyntö hylättiin.'\n      );\n    end if;\n  end if;\n  return new;\nend $$;\n\n\n--\n-- Name: notify_employee_added(); Type: FUNCTION; Schema: public; Owner: -\n--\n\nCREATE FUNCTION public.notify_employee_added() RETURNS trigger\n    LANGUAGE plpgsql SECURITY DEFINER\n    SET search_path TO 'public'\n    AS $$\nbegin\n  insert into public.notifications(type, title, message)\n  values (\n    'employee_added',\n    'Uusi työntekijä',\n    coalesce(new.name,'Tuntematon') || ' on lisätty järjestelmään.'\n  );\n  return new;\nend $$;\n\n\n--\n-- Name: set_updated_at(); Type: FUNCTION; Schema: public; Owner: -\n--\n\nCREATE FUNCTION public.set_updated_at() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\nbegin\n  new.updated_at = now();\n  return new;\nend; $$;\n\n\n--\n-- Name: trg_absence_enqueue_job(); Type: FUNCTION; Schema: public; Owner: -\n--\n\nCREATE FUNCTION public.trg_absence_enqueue_job() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\nbegin\n  insert into mail_jobs (type, payload)\n  values (\n    'admin_new_absence',\n    jsonb_build_object(\n      'absence_id', new.id,\n      'employee_id', new.employee_id,\n      'start_date', new.start_date,\n      'end_date', new.end_date,\n      'reason', new.reason\n    )\n  );\n  return new;\nend;\n$$;\n\n\n--\n-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: -\n--\n\nCREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls\n    LANGUAGE plpgsql\n    AS $$\ndeclare\n-- Regclass of the table e.g. public.notes\nentity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;\n\n-- I, U, D, T: insert, update ...\naction realtime.action = (\n    case wal ->> 'action'\n        when 'I' then 'INSERT'\n        when 'U' then 'UPDATE'\n        when 'D' then 'DELETE'\n        else 'ERROR'\n    end\n);\n\n-- Is row level security enabled for the table\nis_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;\n\nsubscriptions realtime.subscription[] = array_agg(subs)\n    from\n        realtime.subscription subs\n    where\n        subs.entity = entity_;\n\n-- Subscription vars\nroles regrole[] = array_agg(distinct us.claims_role::text)\n    from\n        unnest(subscriptions) us;\n\nworking_role regrole;\nclaimed_role regrole;\nclaims jsonb;\n\nsubscription_id uuid;\nsubscription_has_access bool;\nvisible_to_subscription_ids uuid[] = '{}';\n\n-- structured info for wal's columns\ncolumns realtime.wal_column[];\n-- previous identity values for update/delete\nold_columns realtime.wal_column[];\n\nerror_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;\n\n-- Primary jsonb output for record\noutput jsonb;\n\nbegin\nperform set_config('role', null, true);\n\ncolumns =\n    array_agg(\n        (\n            x->>'name',\n            x->>'type',\n            x->>'typeoid',\n            realtime.cast(\n                (x->'value') #>> '{}',\n                coalesce(\n                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4\n                    (x->>'type')::regtype\n                )\n            ),\n            (pks ->> 'name') is not null,\n            true\n        )::realtime.wal_column\n    )\n    from\n        jsonb_array_elements(wal -> 'columns') x\n        left join jsonb_array_elements(wal -> 'pk') pks\n            on (x ->> 'name') = (pks ->> 'name');\n\nold_columns =\n    array_agg(\n        (\n            x->>'name',\n            x->>'type',\n            x->>'typeoid',\n            realtime.cast(\n                (x->'value') #>> '{}',\n                coalesce(\n                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4\n                    (x->>'type')::regtype\n                )\n            ),\n            (pks ->> 'name') is not null,\n            true\n        )::realtime.wal_column\n    )\n    from\n        jsonb_array_elements(wal -> 'identity') x\n        left join jsonb_array_elements(wal -> 'pk') pks\n            on (x ->> 'name') = (pks ->> 'name');\n\nfor working_role in select * from unnest(roles) loop\n\n    -- Update `is_selectable` for columns and old_columns\n    columns =\n        array_agg(\n            (\n                c.name,\n                c.type_name,\n                c.type_oid,\n                c.value,\n                c.is_pkey,\n                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')\n            )::realtime.wal_column\n        )\n        from\n            unnest(columns) c;\n\n    old_columns =\n            array_agg(\n                (\n                    c.name,\n                    c.type_name,\n                    c.type_oid,\n                    c.value,\n                    c.is_pkey,\n                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')\n                )::realtime.wal_column\n            )\n            from\n                unnest(old_columns) c;\n\n    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then\n        return next (\n            jsonb_build_object(\n                'schema', wal ->> 'schema',\n                'table', wal ->> 'table',\n                'type', action\n            ),\n            is_rls_enabled,\n            -- subscriptions is already filtered by entity\n            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),\n            array['Error 400: Bad Request, no primary key']\n        )::realtime.wal_rls;\n\n    -- The claims role does not have SELECT permission to the primary key of entity\n    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then\n        return next (\n            jsonb_build_object(\n                'schema', wal ->> 'schema',\n                'table', wal ->> 'table',\n                'type', action\n            ),\n            is_rls_enabled,\n            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),\n            array['Error 401: Unauthorized']\n        )::realtime.wal_rls;\n\n    else\n        output = jsonb_build_object(\n            'schema', wal ->> 'schema',\n            'table', wal ->> 'table',\n            'type', action,\n            'commit_timestamp', to_char(\n                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),\n                'YYYY-MM-DD\"T\"HH24:MI:SS.MS\"Z\"'\n            ),\n            'columns', (\n                select\n                    jsonb_agg(\n                        jsonb_build_object(\n                            'name', pa.attname,\n                            'type', pt.typname\n                        )\n                        order by pa.attnum asc\n                    )\n                from\n                    pg_attribute pa\n                    join pg_type pt\n                        on pa.atttypid = pt.oid\n                where\n                    attrelid = entity_\n                    and attnum > 0\n                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')\n            )\n        )\n        -- Add \"record\" key for insert and update\n        || case\n            when action in ('INSERT', 'UPDATE') then\n                jsonb_build_object(\n                    'record',\n                    (\n                        select\n                            jsonb_object_agg(\n                                -- if unchanged toast, get column name and value from old record\n                                coalesce((c).name, (oc).name),\n                                case\n                                    when (c).name is null then (oc).value\n                                    else (c).value\n                                end\n                            )\n                        from\n                            unnest(columns) c\n                            full outer join unnest(old_columns) oc\n                                on (c).name = (oc).name\n                        where\n                            coalesce((c).is_selectable, (oc).is_selectable)\n                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\n                    )\n                )\n            else '{}'::jsonb\n        end\n        -- Add \"old_record\" key for update and delete\n        || case\n            when action = 'UPDATE' then\n                jsonb_build_object(\n                        'old_record',\n                        (\n                            select jsonb_object_agg((c).name, (c).value)\n                            from unnest(old_columns) c\n                            where\n                                (c).is_selectable\n                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\n                        )\n                    )\n            when action = 'DELETE' then\n                jsonb_build_object(\n                    'old_record',\n                    (\n                        select jsonb_object_agg((c).name, (c).value)\n                        from unnest(old_columns) c\n                        where\n                            (c).is_selectable\n                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\n                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey\n                    )\n                )\n            else '{}'::jsonb\n        end;\n\n        -- Create the prepared statement\n        if is_rls_enabled and action <> 'DELETE' then\n            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then\n                deallocate walrus_rls_stmt;\n            end if;\n            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);\n        end if;\n\n        visible_to_subscription_ids = '{}';\n\n        for subscription_id, claims in (\n                select\n                    subs.subscription_id,\n                    subs.claims\n                from\n                    unnest(subscriptions) subs\n                where\n                    subs.entity = entity_\n                    and subs.claims_role = working_role\n                    and (\n                        realtime.is_visible_through_filters(columns, subs.filters)\n                        or (\n                          action = 'DELETE'\n                          and realtime.is_visible_through_filters(old_columns, subs.filters)\n                        )\n                    )\n        ) loop\n\n            if not is_rls_enabled or action = 'DELETE' then\n                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;\n            else\n                -- Check if RLS allows the role to see the record\n                perform\n                    -- Trim leading and trailing quotes from working_role because set_config\n                    -- doesn't recognize the role as valid if they are included\n                    set_config('role', trim(both '\"' from working_role::text), true),\n                    set_config('request.jwt.claims', claims::text, true);\n\n                execute 'execute walrus_rls_stmt' into subscription_has_access;\n\n                if subscription_has_access then\n                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;\n                end if;\n            end if;\n        end loop;\n\n        perform set_config('role', null, true);\n\n        return next (\n            output,\n            is_rls_enabled,\n            visible_to_subscription_ids,\n            case\n                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']\n                else '{}'\n            end\n        )::realtime.wal_rls;\n\n    end if;\nend loop;\n\nperform set_config('role', null, true);\nend;\n$$;\n\n\n--\n-- Name: broadcast_changes(text, text, text, text, text, record, record, text); Type: FUNCTION; Schema: realtime; Owner: -\n--\n\nCREATE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text) RETURNS void\n    LANGUAGE plpgsql\n    AS $$\nDECLARE\n    -- Declare a variable to hold the JSONB representation of the row\n    row_data jsonb := '{}'::jsonb;\nBEGIN\n    IF level = 'STATEMENT' THEN\n        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';\n    END IF;\n    -- Check the operation type and handle accordingly\n    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN\n        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);\n        PERFORM realtime.send (row_data, event_name, topic_name);\n    ELSE\n        RAISE EXCEPTION 'Unexpected operation type: %', operation;\n    END IF;\nEXCEPTION\n    WHEN OTHERS THEN\n        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;\nEND;\n\n$$;\n\n\n--\n-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: -\n--\n\nCREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text\n    LANGUAGE sql\n    AS $$\n      /*\n      Builds a sql string that, if executed, creates a prepared statement to\n      tests retrive a row from *entity* by its primary key columns.\n      Example\n          select realtime.build_prepared_statement_sql('public.notes', '{\"id\"}'::text[], '{\"bigint\"}'::text[])\n      */\n          select\n      'prepare ' || prepared_statement_name || ' as\n          select\n              exists(\n                  select\n                      1\n                  from\n                      ' || entity || '\n                  where\n                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '\n              )'\n          from\n              unnest(columns) pkc\n          where\n              pkc.is_pkey\n          group by\n              entity\n      $$;\n\n\n--\n-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: -\n--\n\nCREATE FUNCTION realtime.\"cast\"(val text, type_ regtype) RETURNS jsonb\n    LANGUAGE plpgsql IMMUTABLE\n    AS $$\n    declare\n      res jsonb;\n    begin\n      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;\n      return res;\n    end\n    $$;\n\n\n--\n-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: -\n--\n\nCREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean\n    LANGUAGE plpgsql IMMUTABLE\n    AS $$\n      /*\n      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness\n      */\n      declare\n          op_symbol text = (\n              case\n                  when op = 'eq' then '='\n                  when op = 'neq' then '!='\n                  when op = 'lt' then '<'\n                  when op = 'lte' then '<='\n                  when op = 'gt' then '>'\n                  when op = 'gte' then '>='\n                  when op = 'in' then '= any'\n                  else 'UNKNOWN OP'\n              end\n          );\n          res boolean;\n      begin\n          execute format(\n              'select %L::'|| type_::text || ' ' || op_symbol\n              || ' ( %L::'\n              || (\n                  case\n                      when op = 'in' then type_::text || '[]'\n                      else type_::text end\n              )\n              || ')', val_1, val_2) into res;\n          return res;\n      end;\n      $$;\n\n\n--\n-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: -\n--\n\nCREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean\n    LANGUAGE sql IMMUTABLE\n    AS $_$\n    /*\n    Should the record be visible (true) or filtered out (false) after *filters* are applied\n    */\n        select\n            -- Default to allowed when no filters present\n            $2 is null -- no filters. this should not happen because subscriptions has a default\n            or array_length($2, 1) is null -- array length of an empty array is null\n            or bool_and(\n                coalesce(\n                    realtime.check_equality_op(\n                        op:=f.op,\n                        type_:=coalesce(\n                            col.type_oid::regtype, -- null when wal2json version <= 2.4\n                            col.type_name::regtype\n                        ),\n                        -- cast jsonb to text\n                        val_1:=col.value #>> '{}',\n                        val_2:=f.value\n                    ),\n                    false -- if null, filter does not match\n                )\n            )\n        from\n            unnest(filters) f\n            join unnest(columns) col\n                on f.column_name = col.name;\n    $_$;\n\n\n--\n-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: -\n--\n\nCREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls\n    LANGUAGE sql\n    SET log_min_messages TO 'fatal'\n    AS $$\n      with pub as (\n        select\n          concat_ws(\n            ',',\n            case when bool_or(pubinsert) then 'insert' else null end,\n            case when bool_or(pubupdate) then 'update' else null end,\n            case when bool_or(pubdelete) then 'delete' else null end\n          ) as w2j_actions,\n          coalesce(\n            string_agg(\n              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),\n              ','\n            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),\n            ''\n          ) w2j_add_tables\n        from\n          pg_publication pp\n          left join pg_publication_tables ppt\n            on pp.pubname = ppt.pubname\n        where\n          pp.pubname = publication\n        group by\n          pp.pubname\n        limit 1\n      ),\n      w2j as (\n        select\n          x.*, pub.w2j_add_tables\n        from\n          pub,\n          pg_logical_slot_get_changes(\n            slot_name, null, max_changes,\n            'include-pk', 'true',\n            'include-transaction', 'false',\n            'include-timestamp', 'true',\n            'include-type-oids', 'true',\n            'format-version', '2',\n            'actions', pub.w2j_actions,\n            'add-tables', pub.w2j_add_tables\n          ) x\n      )\n      select\n        xyz.wal,\n        xyz.is_rls_enabled,\n        xyz.subscription_ids,\n        xyz.errors\n      from\n        w2j,\n        realtime.apply_rls(\n          wal := w2j.data::jsonb,\n          max_record_bytes := max_record_bytes\n        ) xyz(wal, is_rls_enabled, subscription_ids, errors)\n      where\n        w2j.w2j_add_tables <> ''\n        and xyz.subscription_ids[1] is not null\n    $$;\n\n\n--\n-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: -\n--\n\nCREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text\n    LANGUAGE sql IMMUTABLE STRICT\n    AS $$\n      select\n        (\n          select string_agg('' || ch,'')\n          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)\n          where\n            not (x.idx = 1 and x.ch = '\"')\n            and not (\n              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)\n              and x.ch = '\"'\n            )\n        )\n        || '.'\n        || (\n          select string_agg('' || ch,'')\n          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)\n          where\n            not (x.idx = 1 and x.ch = '\"')\n            and not (\n              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)\n              and x.ch = '\"'\n            )\n          )\n      from\n        pg_class pc\n        join pg_namespace nsp\n          on pc.relnamespace = nsp.oid\n      where\n        pc.oid = entity\n    $$;\n\n\n--\n-- Name: send(jsonb, text, text, boolean); Type: FUNCTION; Schema: realtime; Owner: -\n--\n\nCREATE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true) RETURNS void\n    LANGUAGE plpgsql\n    AS $$\nBEGIN\n  BEGIN\n    -- Set the topic configuration\n    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);\n\n    -- Attempt to insert the message\n    INSERT INTO realtime.messages (payload, event, topic, private, extension)\n    VALUES (payload, event, topic, private, 'broadcast');\n  EXCEPTION\n    WHEN OTHERS THEN\n      -- Capture and notify the error\n      RAISE WARNING 'ErrorSendingBroadcastMessage: %', SQLERRM;\n  END;\nEND;\n$$;\n\n\n--\n-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: -\n--\n\nCREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\n    /*\n    Validates that the user defined filters for a subscription:\n    - refer to valid columns that the claimed role may access\n    - values are coercable to the correct column type\n    */\n    declare\n        col_names text[] = coalesce(\n                array_agg(c.column_name order by c.ordinal_position),\n                '{}'::text[]\n            )\n            from\n                information_schema.columns c\n            where\n                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity\n                and pg_catalog.has_column_privilege(\n                    (new.claims ->> 'role'),\n                    format('%I.%I', c.table_schema, c.table_name)::regclass,\n                    c.column_name,\n                    'SELECT'\n                );\n        filter realtime.user_defined_filter;\n        col_type regtype;\n\n        in_val jsonb;\n    begin\n        for filter in select * from unnest(new.filters) loop\n            -- Filtered column is valid\n            if not filter.column_name = any(col_names) then\n                raise exception 'invalid column for filter %', filter.column_name;\n            end if;\n\n            -- Type is sanitized and safe for string interpolation\n            col_type = (\n                select atttypid::regtype\n                from pg_catalog.pg_attribute\n                where attrelid = new.entity\n                      and attname = filter.column_name\n            );\n            if col_type is null then\n                raise exception 'failed to lookup type for column %', filter.column_name;\n            end if;\n\n            -- Set maximum number of entries for in filter\n            if filter.op = 'in'::realtime.equality_op then\n                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);\n                if coalesce(jsonb_array_length(in_val), 0) > 100 then\n                    raise exception 'too many values for `in` filter. Maximum 100';\n                end if;\n            else\n                -- raises an exception if value is not coercable to type\n                perform realtime.cast(filter.value, col_type);\n            end if;\n\n        end loop;\n\n        -- Apply consistent order to filters so the unique constraint on\n        -- (subscription_id, entity, filters) can't be tricked by a different filter order\n        new.filters = coalesce(\n            array_agg(f order by f.column_name, f.op, f.value),\n            '{}'\n        ) from unnest(new.filters) f;\n\n        return new;\n    end;\n    $$;\n\n\n--\n-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: -\n--\n\nCREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole\n    LANGUAGE sql IMMUTABLE\n    AS $$ select role_name::regrole $$;\n\n\n--\n-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: -\n--\n\nCREATE FUNCTION realtime.topic() RETURNS text\n    LANGUAGE sql STABLE\n    AS $$\nselect nullif(current_setting('realtime.topic', true), '')::text;\n$$;\n\n\n--\n-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: -\n--\n\nCREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void\n    LANGUAGE plpgsql\n    AS $$\nBEGIN\n  INSERT INTO \"storage\".\"objects\" (\"bucket_id\", \"name\", \"owner\", \"metadata\") VALUES (bucketid, name, owner, metadata);\n  -- hack to rollback the successful insert\n  RAISE sqlstate 'PT200' using\n  message = 'ROLLBACK',\n  detail = 'rollback successful insert';\nEND\n$$;\n\n\n--\n-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: -\n--\n\nCREATE FUNCTION storage.extension(name text) RETURNS text\n    LANGUAGE plpgsql\n    AS $$\nDECLARE\n_parts text[];\n_filename text;\nBEGIN\n\tselect string_to_array(name, '/') into _parts;\n\tselect _parts[array_length(_parts,1)] into _filename;\n\t-- @todo return the last part instead of 2\n\treturn reverse(split_part(reverse(_filename), '.', 1));\nEND\n$$;\n\n\n--\n-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: -\n--\n\nCREATE FUNCTION storage.filename(name text) RETURNS text\n    LANGUAGE plpgsql\n    AS $$\nDECLARE\n_parts text[];\nBEGIN\n\tselect string_to_array(name, '/') into _parts;\n\treturn _parts[array_length(_parts,1)];\nEND\n$$;\n\n\n--\n-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: -\n--\n\nCREATE FUNCTION storage.foldername(name text) RETURNS text[]\n    LANGUAGE plpgsql\n    AS $$\nDECLARE\n_parts text[];\nBEGIN\n\tselect string_to_array(name, '/') into _parts;\n\treturn _parts[1:array_length(_parts,1)-1];\nEND\n$$;\n\n\n--\n-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: -\n--\n\nCREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)\n    LANGUAGE plpgsql\n    AS $$\nBEGIN\n    return query\n        select sum((metadata->>'size')::int) as size, obj.bucket_id\n        from \"storage\".objects as obj\n        group by obj.bucket_id;\nEND\n$$;\n\n\n--\n-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: -\n--\n\nCREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)\n    LANGUAGE plpgsql\n    AS $_$\nBEGIN\n    RETURN QUERY EXECUTE\n        'SELECT DISTINCT ON(key COLLATE \"C\") * from (\n            SELECT\n                CASE\n                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN\n                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))\n                    ELSE\n                        key\n                END AS key, id, created_at\n            FROM\n                storage.s3_multipart_uploads\n            WHERE\n                bucket_id = $5 AND\n                key ILIKE $1 || ''%'' AND\n                CASE\n                    WHEN $4 != '''' AND $6 = '''' THEN\n                        CASE\n                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN\n                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE \"C\" > $4\n                            ELSE\n                                key COLLATE \"C\" > $4\n                            END\n                    ELSE\n                        true\n                END AND\n                CASE\n                    WHEN $6 != '''' THEN\n                        id COLLATE \"C\" > $6\n                    ELSE\n                        true\n                    END\n            ORDER BY\n                key COLLATE \"C\" ASC, created_at ASC) as e order by key COLLATE \"C\" LIMIT $3'\n        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;\nEND;\n$_$;\n\n\n--\n-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: -\n--\n\nCREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)\n    LANGUAGE plpgsql\n    AS $_$\nBEGIN\n    RETURN QUERY EXECUTE\n        'SELECT DISTINCT ON(name COLLATE \"C\") * from (\n            SELECT\n                CASE\n                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN\n                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))\n                    ELSE\n                        name\n                END AS name, id, metadata, updated_at\n            FROM\n                storage.objects\n            WHERE\n                bucket_id = $5 AND\n                name ILIKE $1 || ''%'' AND\n                CASE\n                    WHEN $6 != '''' THEN\n                    name COLLATE \"C\" > $6\n                ELSE true END\n                AND CASE\n                    WHEN $4 != '''' THEN\n                        CASE\n                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN\n                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE \"C\" > $4\n                            ELSE\n                                name COLLATE \"C\" > $4\n                            END\n                    ELSE\n                        true\n                END\n            ORDER BY\n                name COLLATE \"C\" ASC) as e order by name COLLATE \"C\" LIMIT $3'\n        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;\nEND;\n$_$;\n\n\n--\n-- Name: operation(); Type: FUNCTION; Schema: storage; Owner: -\n--\n\nCREATE FUNCTION storage.operation() RETURNS text\n    LANGUAGE plpgsql STABLE\n    AS $$\nBEGIN\n    RETURN current_setting('storage.operation', true);\nEND;\n$$;\n\n\n--\n-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: -\n--\n\nCREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\n    LANGUAGE plpgsql STABLE\n    AS $_$\ndeclare\n  v_order_by text;\n  v_sort_order text;\nbegin\n  case\n    when sortcolumn = 'name' then\n      v_order_by = 'name';\n    when sortcolumn = 'updated_at' then\n      v_order_by = 'updated_at';\n    when sortcolumn = 'created_at' then\n      v_order_by = 'created_at';\n    when sortcolumn = 'last_accessed_at' then\n      v_order_by = 'last_accessed_at';\n    else\n      v_order_by = 'name';\n  end case;\n\n  case\n    when sortorder = 'asc' then\n      v_sort_order = 'asc';\n    when sortorder = 'desc' then\n      v_sort_order = 'desc';\n    else\n      v_sort_order = 'asc';\n  end case;\n\n  v_order_by = v_order_by || ' ' || v_sort_order;\n\n  return query execute\n    'with folders as (\n       select path_tokens[$1] as folder\n       from storage.objects\n         where objects.name ilike $2 || $3 || ''%''\n           and bucket_id = $4\n           and array_length(objects.path_tokens, 1) <> $1\n       group by folder\n       order by folder ' || v_sort_order || '\n     )\n     (select folder as \"name\",\n            null as id,\n            null as updated_at,\n            null as created_at,\n            null as last_accessed_at,\n            null as metadata from folders)\n     union all\n     (select path_tokens[$1] as \"name\",\n            id,\n            updated_at,\n            created_at,\n            last_accessed_at,\n            metadata\n     from storage.objects\n     where objects.name ilike $2 || $3 || ''%''\n       and bucket_id = $4\n       and array_length(objects.path_tokens, 1) = $1\n     order by ' || v_order_by || ')\n     limit $5\n     offset $6' using levels, prefix, search, bucketname, limits, offsets;\nend;\n$_$;\n\n\n--\n-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: -\n--\n\nCREATE FUNCTION storage.update_updated_at_column() RETURNS trigger\n    LANGUAGE plpgsql\n    AS $$\nBEGIN\n    NEW.updated_at = now();\n    RETURN NEW; \nEND;\n$$;\n\n\n--\n-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.audit_log_entries (\n    instance_id uuid,\n    id uuid NOT NULL,\n    payload json,\n    created_at timestamp with time zone,\n    ip_address character varying(64) DEFAULT ''::character varying NOT NULL\n);\n\n\n--\n-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';\n\n\n--\n-- Name: flow_state; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.flow_state (\n    id uuid NOT NULL,\n    user_id uuid,\n    auth_code text NOT NULL,\n    code_challenge_method auth.code_challenge_method NOT NULL,\n    code_challenge text NOT NULL,\n    provider_type text NOT NULL,\n    provider_access_token text,\n    provider_refresh_token text,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    authentication_method text NOT NULL,\n    auth_code_issued_at timestamp with time zone\n);\n\n\n--\n-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';\n\n\n--\n-- Name: identities; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.identities (\n    provider_id text NOT NULL,\n    user_id uuid NOT NULL,\n    identity_data jsonb NOT NULL,\n    provider text NOT NULL,\n    last_sign_in_at timestamp with time zone,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n);\n\n\n--\n-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';\n\n\n--\n-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';\n\n\n--\n-- Name: instances; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.instances (\n    id uuid NOT NULL,\n    uuid uuid,\n    raw_base_config text,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone\n);\n\n\n--\n-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';\n\n\n--\n-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.mfa_amr_claims (\n    session_id uuid NOT NULL,\n    created_at timestamp with time zone NOT NULL,\n    updated_at timestamp with time zone NOT NULL,\n    authentication_method text NOT NULL,\n    id uuid NOT NULL\n);\n\n\n--\n-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';\n\n\n--\n-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.mfa_challenges (\n    id uuid NOT NULL,\n    factor_id uuid NOT NULL,\n    created_at timestamp with time zone NOT NULL,\n    verified_at timestamp with time zone,\n    ip_address inet NOT NULL,\n    otp_code text,\n    web_authn_session_data jsonb\n);\n\n\n--\n-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';\n\n\n--\n-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.mfa_factors (\n    id uuid NOT NULL,\n    user_id uuid NOT NULL,\n    friendly_name text,\n    factor_type auth.factor_type NOT NULL,\n    status auth.factor_status NOT NULL,\n    created_at timestamp with time zone NOT NULL,\n    updated_at timestamp with time zone NOT NULL,\n    secret text,\n    phone text,\n    last_challenged_at timestamp with time zone,\n    web_authn_credential jsonb,\n    web_authn_aaguid uuid\n);\n\n\n--\n-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';\n\n\n--\n-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.one_time_tokens (\n    id uuid NOT NULL,\n    user_id uuid NOT NULL,\n    token_type auth.one_time_token_type NOT NULL,\n    token_hash text NOT NULL,\n    relates_to text NOT NULL,\n    created_at timestamp without time zone DEFAULT now() NOT NULL,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))\n);\n\n\n--\n-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.refresh_tokens (\n    instance_id uuid,\n    id bigint NOT NULL,\n    token character varying(255),\n    user_id character varying(255),\n    revoked boolean,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    parent character varying(255),\n    session_id uuid\n);\n\n\n--\n-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';\n\n\n--\n-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: -\n--\n\nCREATE SEQUENCE auth.refresh_tokens_id_seq\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\n--\n-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: -\n--\n\nALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;\n\n\n--\n-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.saml_providers (\n    id uuid NOT NULL,\n    sso_provider_id uuid NOT NULL,\n    entity_id text NOT NULL,\n    metadata_xml text NOT NULL,\n    metadata_url text,\n    attribute_mapping jsonb,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    name_id_format text,\n    CONSTRAINT \"entity_id not empty\" CHECK ((char_length(entity_id) > 0)),\n    CONSTRAINT \"metadata_url not empty\" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),\n    CONSTRAINT \"metadata_xml not empty\" CHECK ((char_length(metadata_xml) > 0))\n);\n\n\n--\n-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';\n\n\n--\n-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.saml_relay_states (\n    id uuid NOT NULL,\n    sso_provider_id uuid NOT NULL,\n    request_id text NOT NULL,\n    for_email text,\n    redirect_to text,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    flow_state_id uuid,\n    CONSTRAINT \"request_id not empty\" CHECK ((char_length(request_id) > 0))\n);\n\n\n--\n-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';\n\n\n--\n-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.schema_migrations (\n    version character varying(255) NOT NULL\n);\n\n\n--\n-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';\n\n\n--\n-- Name: sessions; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.sessions (\n    id uuid NOT NULL,\n    user_id uuid NOT NULL,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    factor_id uuid,\n    aal auth.aal_level,\n    not_after timestamp with time zone,\n    refreshed_at timestamp without time zone,\n    user_agent text,\n    ip inet,\n    tag text\n);\n\n\n--\n-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';\n\n\n--\n-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';\n\n\n--\n-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.sso_domains (\n    id uuid NOT NULL,\n    sso_provider_id uuid NOT NULL,\n    domain text NOT NULL,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    CONSTRAINT \"domain not empty\" CHECK ((char_length(domain) > 0))\n);\n\n\n--\n-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';\n\n\n--\n-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.sso_providers (\n    id uuid NOT NULL,\n    resource_id text,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    disabled boolean,\n    CONSTRAINT \"resource_id not empty\" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))\n);\n\n\n--\n-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';\n\n\n--\n-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';\n\n\n--\n-- Name: users; Type: TABLE; Schema: auth; Owner: -\n--\n\nCREATE TABLE auth.users (\n    instance_id uuid,\n    id uuid NOT NULL,\n    aud character varying(255),\n    role character varying(255),\n    email character varying(255),\n    encrypted_password character varying(255),\n    email_confirmed_at timestamp with time zone,\n    invited_at timestamp with time zone,\n    confirmation_token character varying(255),\n    confirmation_sent_at timestamp with time zone,\n    recovery_token character varying(255),\n    recovery_sent_at timestamp with time zone,\n    email_change_token_new character varying(255),\n    email_change character varying(255),\n    email_change_sent_at timestamp with time zone,\n    last_sign_in_at timestamp with time zone,\n    raw_app_meta_data jsonb,\n    raw_user_meta_data jsonb,\n    is_super_admin boolean,\n    created_at timestamp with time zone,\n    updated_at timestamp with time zone,\n    phone text DEFAULT NULL::character varying,\n    phone_confirmed_at timestamp with time zone,\n    phone_change text DEFAULT ''::character varying,\n    phone_change_token character varying(255) DEFAULT ''::character varying,\n    phone_change_sent_at timestamp with time zone,\n    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,\n    email_change_token_current character varying(255) DEFAULT ''::character varying,\n    email_change_confirm_status smallint DEFAULT 0,\n    banned_until timestamp with time zone,\n    reauthentication_token character varying(255) DEFAULT ''::character varying,\n    reauthentication_sent_at timestamp with time zone,\n    is_sso_user boolean DEFAULT false NOT NULL,\n    deleted_at timestamp with time zone,\n    is_anonymous boolean DEFAULT false NOT NULL,\n    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))\n);\n\n\n--\n-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';\n\n\n--\n-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';\n\n\n--\n-- Name: absences; Type: TABLE; Schema: public; Owner: -\n--\n\nCREATE TABLE public.absences (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    employee_id uuid NOT NULL,\n    start_date date NOT NULL,\n    end_date date,\n    reason text,\n    message text,\n    status text DEFAULT 'pending'::text NOT NULL,\n    submitted_at timestamp with time zone DEFAULT now(),\n    CONSTRAINT absences_status_valid_check CHECK ((status = ANY (ARRAY['pending'::text, 'approved'::text, 'declined'::text])))\n);\n\n\n--\n-- Name: app_settings; Type: TABLE; Schema: public; Owner: -\n--\n\nCREATE TABLE public.app_settings (\n    id integer NOT NULL,\n    email_notifications boolean DEFAULT true NOT NULL,\n    admin_notification_emails text[] DEFAULT '{}'::text[] NOT NULL,\n    absence_requests boolean DEFAULT true NOT NULL,\n    schedule_changes boolean DEFAULT true NOT NULL,\n    employee_updates boolean DEFAULT false NOT NULL,\n    system_updates boolean DEFAULT false NOT NULL,\n    daily_digest boolean DEFAULT false NOT NULL,\n    digest_time text DEFAULT '08:00'::text NOT NULL,\n    updated_at timestamp with time zone DEFAULT now() NOT NULL,\n    CONSTRAINT app_settings_id_check CHECK ((id = 1))\n);\n\n\n--\n-- Name: employees; Type: TABLE; Schema: public; Owner: -\n--\n\nCREATE TABLE public.employees (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    name text NOT NULL,\n    email text,\n    department text,\n    is_active boolean DEFAULT true NOT NULL,\n    created_at timestamp without time zone DEFAULT now()\n);\n\n\n--\n-- Name: mail_jobs_id_seq; Type: SEQUENCE; Schema: public; Owner: -\n--\n\nALTER TABLE public.mail_jobs ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (\n    SEQUENCE NAME public.mail_jobs_id_seq\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1\n);\n\n\n--\n-- Name: notifications; Type: TABLE; Schema: public; Owner: -\n--\n\nCREATE TABLE public.notifications (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    type text NOT NULL,\n    title text NOT NULL,\n    message text NOT NULL,\n    created_at timestamp with time zone DEFAULT now() NOT NULL,\n    is_read boolean DEFAULT false NOT NULL,\n    CONSTRAINT notifications_type_check CHECK ((type = ANY (ARRAY['absence_request'::text, 'absence_approved'::text, 'absence_declined'::text, 'employee_added'::text, 'shift_auto'::text])))\n);\n\n\n--\n-- Name: profiles; Type: TABLE; Schema: public; Owner: -\n--\n\nCREATE TABLE public.profiles (\n    id uuid NOT NULL,\n    email text,\n    is_admin boolean DEFAULT false NOT NULL,\n    created_at timestamp with time zone DEFAULT now() NOT NULL\n);\n\n\n--\n-- Name: shifts; Type: TABLE; Schema: public; Owner: -\n--\n\nCREATE TABLE public.shifts (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    employee_id uuid NOT NULL,\n    work_date date NOT NULL,\n    start_time time without time zone,\n    end_time time without time zone,\n    hours numeric(4,2) DEFAULT 0 NOT NULL,\n    type text DEFAULT 'normal'::text NOT NULL,\n    is_locked boolean DEFAULT false NOT NULL,\n    note text,\n    created_at timestamp with time zone DEFAULT now() NOT NULL,\n    updated_at timestamp with time zone DEFAULT now() NOT NULL,\n    published boolean DEFAULT false NOT NULL,\n    published_at timestamp with time zone,\n    CONSTRAINT shifts_hours_check CHECK (((hours >= (0)::numeric) AND (hours <= (24)::numeric))),\n    CONSTRAINT shifts_hours_range_chk CHECK (((hours >= (0)::numeric) AND (hours <= (24)::numeric))),\n    CONSTRAINT shifts_time_order_chk CHECK (((start_time IS NULL) OR (end_time IS NULL) OR (start_time < end_time))),\n    CONSTRAINT shifts_type_allowed_chk CHECK ((type = ANY (ARRAY['normal'::text, 'locked'::text, 'absent'::text, 'holiday'::text]))),\n    CONSTRAINT shifts_type_check CHECK ((type = ANY (ARRAY['normal'::text, 'locked'::text, 'absent'::text, 'holiday'::text])))\n);\n\n\n--\n-- Name: messages; Type: TABLE; Schema: realtime; Owner: -\n--\n\nCREATE TABLE realtime.messages (\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n)\nPARTITION BY RANGE (inserted_at);\n\n\n--\n-- Name: messages_2025_08_29; Type: TABLE; Schema: realtime; Owner: -\n--\n\nCREATE TABLE realtime.messages_2025_08_29 (\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n);\n\n\n--\n-- Name: messages_2025_08_30; Type: TABLE; Schema: realtime; Owner: -\n--\n\nCREATE TABLE realtime.messages_2025_08_30 (\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n);\n\n\n--\n-- Name: messages_2025_08_31; Type: TABLE; Schema: realtime; Owner: -\n--\n\nCREATE TABLE realtime.messages_2025_08_31 (\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n);\n\n\n--\n-- Name: messages_2025_09_01; Type: TABLE; Schema: realtime; Owner: -\n--\n\nCREATE TABLE realtime.messages_2025_09_01 (\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n);\n\n\n--\n-- Name: messages_2025_09_02; Type: TABLE; Schema: realtime; Owner: -\n--\n\nCREATE TABLE realtime.messages_2025_09_02 (\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n);\n\n\n--\n-- Name: messages_2025_09_03; Type: TABLE; Schema: realtime; Owner: -\n--\n\nCREATE TABLE realtime.messages_2025_09_03 (\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n);\n\n\n--\n-- Name: messages_2025_09_04; Type: TABLE; Schema: realtime; Owner: -\n--\n\nCREATE TABLE realtime.messages_2025_09_04 (\n    topic text NOT NULL,\n    extension text NOT NULL,\n    payload jsonb,\n    event text,\n    private boolean DEFAULT false,\n    updated_at timestamp without time zone DEFAULT now() NOT NULL,\n    inserted_at timestamp without time zone DEFAULT now() NOT NULL,\n    id uuid DEFAULT gen_random_uuid() NOT NULL\n);\n\n\n--\n-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: -\n--\n\nCREATE TABLE realtime.schema_migrations (\n    version bigint NOT NULL,\n    inserted_at timestamp(0) without time zone\n);\n\n\n--\n-- Name: subscription; Type: TABLE; Schema: realtime; Owner: -\n--\n\nCREATE TABLE realtime.subscription (\n    id bigint NOT NULL,\n    subscription_id uuid NOT NULL,\n    entity regclass NOT NULL,\n    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,\n    claims jsonb NOT NULL,\n    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,\n    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL\n);\n\n\n--\n-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: -\n--\n\nALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (\n    SEQUENCE NAME realtime.subscription_id_seq\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1\n);\n\n\n--\n-- Name: buckets; Type: TABLE; Schema: storage; Owner: -\n--\n\nCREATE TABLE storage.buckets (\n    id text NOT NULL,\n    name text NOT NULL,\n    owner uuid,\n    created_at timestamp with time zone DEFAULT now(),\n    updated_at timestamp with time zone DEFAULT now(),\n    public boolean DEFAULT false,\n    avif_autodetection boolean DEFAULT false,\n    file_size_limit bigint,\n    allowed_mime_types text[],\n    owner_id text\n);\n\n\n--\n-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: -\n--\n\nCOMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';\n\n\n--\n-- Name: migrations; Type: TABLE; Schema: storage; Owner: -\n--\n\nCREATE TABLE storage.migrations (\n    id integer NOT NULL,\n    name character varying(100) NOT NULL,\n    hash character varying(40) NOT NULL,\n    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP\n);\n\n\n--\n-- Name: objects; Type: TABLE; Schema: storage; Owner: -\n--\n\nCREATE TABLE storage.objects (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    bucket_id text,\n    name text,\n    owner uuid,\n    created_at timestamp with time zone DEFAULT now(),\n    updated_at timestamp with time zone DEFAULT now(),\n    last_accessed_at timestamp with time zone DEFAULT now(),\n    metadata jsonb,\n    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,\n    version text,\n    owner_id text,\n    user_metadata jsonb\n);\n\n\n--\n-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: -\n--\n\nCOMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';\n\n\n--\n-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: -\n--\n\nCREATE TABLE storage.s3_multipart_uploads (\n    id text NOT NULL,\n    in_progress_size bigint DEFAULT 0 NOT NULL,\n    upload_signature text NOT NULL,\n    bucket_id text NOT NULL,\n    key text NOT NULL COLLATE pg_catalog.\"C\",\n    version text NOT NULL,\n    owner_id text,\n    created_at timestamp with time zone DEFAULT now() NOT NULL,\n    user_metadata jsonb\n);\n\n\n--\n-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: -\n--\n\nCREATE TABLE storage.s3_multipart_uploads_parts (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    upload_id text NOT NULL,\n    size bigint DEFAULT 0 NOT NULL,\n    part_number integer NOT NULL,\n    bucket_id text NOT NULL,\n    key text NOT NULL COLLATE pg_catalog.\"C\",\n    etag text NOT NULL,\n    owner_id text,\n    version text NOT NULL,\n    created_at timestamp with time zone DEFAULT now() NOT NULL\n);\n\n\n--\n-- Name: schema_migrations; Type: TABLE; Schema: supabase_migrations; Owner: -\n--\n\nCREATE TABLE supabase_migrations.schema_migrations (\n    version text NOT NULL,\n    statements text[],\n    name text\n);\n\n\n--\n-- Name: seed_files; Type: TABLE; Schema: supabase_migrations; Owner: -\n--\n\nCREATE TABLE supabase_migrations.seed_files (\n    path text NOT NULL,\n    hash text NOT NULL\n);\n\n\n--\n-- Name: messages_2025_08_29; Type: TABLE ATTACH; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2025_08_29 FOR VALUES FROM ('2025-08-29 00:00:00') TO ('2025-08-30 00:00:00');\n\n\n--\n-- Name: messages_2025_08_30; Type: TABLE ATTACH; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2025_08_30 FOR VALUES FROM ('2025-08-30 00:00:00') TO ('2025-08-31 00:00:00');\n\n\n--\n-- Name: messages_2025_08_31; Type: TABLE ATTACH; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2025_08_31 FOR VALUES FROM ('2025-08-31 00:00:00') TO ('2025-09-01 00:00:00');\n\n\n--\n-- Name: messages_2025_09_01; Type: TABLE ATTACH; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2025_09_01 FOR VALUES FROM ('2025-09-01 00:00:00') TO ('2025-09-02 00:00:00');\n\n\n--\n-- Name: messages_2025_09_02; Type: TABLE ATTACH; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2025_09_02 FOR VALUES FROM ('2025-09-02 00:00:00') TO ('2025-09-03 00:00:00');\n\n\n--\n-- Name: messages_2025_09_03; Type: TABLE ATTACH; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2025_09_03 FOR VALUES FROM ('2025-09-03 00:00:00') TO ('2025-09-04 00:00:00');\n\n\n--\n-- Name: messages_2025_09_04; Type: TABLE ATTACH; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2025_09_04 FOR VALUES FROM ('2025-09-04 00:00:00') TO ('2025-09-05 00:00:00');\n\n\n--\n-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);\n\n\n--\n-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.mfa_amr_claims\n    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);\n\n\n--\n-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.audit_log_entries\n    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.flow_state\n    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.identities\n    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.identities\n    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);\n\n\n--\n-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.instances\n    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: mfa_amr_claims [REDACTED]; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.mfa_amr_claims\n    ADD CONSTRAINT [REDACTED] UNIQUE (session_id, authentication_method);\n\n\n--\n-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.mfa_challenges\n    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: mfa_factors mfa_factors_last_challenged_at_key; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.mfa_factors\n    ADD CONSTRAINT mfa_factors_last_challenged_at_key UNIQUE (last_challenged_at);\n\n\n--\n-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.mfa_factors\n    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.one_time_tokens\n    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.refresh_tokens\n    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.refresh_tokens\n    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);\n\n\n--\n-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.saml_providers\n    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);\n\n\n--\n-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.saml_providers\n    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.saml_relay_states\n    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.schema_migrations\n    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);\n\n\n--\n-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.sessions\n    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.sso_domains\n    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.sso_providers\n    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.users\n    ADD CONSTRAINT users_phone_key UNIQUE (phone);\n\n\n--\n-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.users\n    ADD CONSTRAINT users_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: absences absences_pkey; Type: CONSTRAINT; Schema: public; Owner: -\n--\n\nALTER TABLE ONLY public.absences\n    ADD CONSTRAINT absences_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: app_settings app_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: -\n--\n\nALTER TABLE ONLY public.app_settings\n    ADD CONSTRAINT app_settings_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: employees employees_pkey; Type: CONSTRAINT; Schema: public; Owner: -\n--\n\nALTER TABLE ONLY public.employees\n    ADD CONSTRAINT employees_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: mail_jobs mail_jobs_job_key_unique; Type: CONSTRAINT; Schema: public; Owner: -\n--\n\nALTER TABLE ONLY public.mail_jobs\n    ADD CONSTRAINT mail_jobs_job_key_unique UNIQUE (job_key);\n\n\n--\n-- Name: mail_jobs mail_jobs_pkey; Type: CONSTRAINT; Schema: public; Owner: -\n--\n\nALTER TABLE ONLY public.mail_jobs\n    ADD CONSTRAINT mail_jobs_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: notifications notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: -\n--\n\nALTER TABLE ONLY public.notifications\n    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: profiles profiles_email_key; Type: CONSTRAINT; Schema: public; Owner: -\n--\n\nALTER TABLE ONLY public.profiles\n    ADD CONSTRAINT profiles_email_key UNIQUE (email);\n\n\n--\n-- Name: profiles profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: -\n--\n\nALTER TABLE ONLY public.profiles\n    ADD CONSTRAINT profiles_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: shifts shifts_employee_id_work_date_key; Type: CONSTRAINT; Schema: public; Owner: -\n--\n\nALTER TABLE ONLY public.shifts\n    ADD CONSTRAINT shifts_employee_id_work_date_key UNIQUE (employee_id, work_date);\n\n\n--\n-- Name: shifts shifts_pkey; Type: CONSTRAINT; Schema: public; Owner: -\n--\n\nALTER TABLE ONLY public.shifts\n    ADD CONSTRAINT shifts_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages\n    ADD CONSTRAINT messages_pkey PRIMARY KEY (id, inserted_at);\n\n\n--\n-- Name: messages_2025_08_29 messages_2025_08_29_pkey; Type: CONSTRAINT; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages_2025_08_29\n    ADD CONSTRAINT messages_2025_08_29_pkey PRIMARY KEY (id, inserted_at);\n\n\n--\n-- Name: messages_2025_08_30 messages_2025_08_30_pkey; Type: CONSTRAINT; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages_2025_08_30\n    ADD CONSTRAINT messages_2025_08_30_pkey PRIMARY KEY (id, inserted_at);\n\n\n--\n-- Name: messages_2025_08_31 messages_2025_08_31_pkey; Type: CONSTRAINT; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages_2025_08_31\n    ADD CONSTRAINT messages_2025_08_31_pkey PRIMARY KEY (id, inserted_at);\n\n\n--\n-- Name: messages_2025_09_01 messages_2025_09_01_pkey; Type: CONSTRAINT; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages_2025_09_01\n    ADD CONSTRAINT messages_2025_09_01_pkey PRIMARY KEY (id, inserted_at);\n\n\n--\n-- Name: messages_2025_09_02 messages_2025_09_02_pkey; Type: CONSTRAINT; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages_2025_09_02\n    ADD CONSTRAINT messages_2025_09_02_pkey PRIMARY KEY (id, inserted_at);\n\n\n--\n-- Name: messages_2025_09_03 messages_2025_09_03_pkey; Type: CONSTRAINT; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages_2025_09_03\n    ADD CONSTRAINT messages_2025_09_03_pkey PRIMARY KEY (id, inserted_at);\n\n\n--\n-- Name: messages_2025_09_04 messages_2025_09_04_pkey; Type: CONSTRAINT; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.messages_2025_09_04\n    ADD CONSTRAINT messages_2025_09_04_pkey PRIMARY KEY (id, inserted_at);\n\n\n--\n-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.subscription\n    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);\n\n\n--\n-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: -\n--\n\nALTER TABLE ONLY realtime.schema_migrations\n    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);\n\n\n--\n-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: -\n--\n\nALTER TABLE ONLY storage.buckets\n    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: -\n--\n\nALTER TABLE ONLY storage.migrations\n    ADD CONSTRAINT migrations_name_key UNIQUE (name);\n\n\n--\n-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: -\n--\n\nALTER TABLE ONLY storage.migrations\n    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: -\n--\n\nALTER TABLE ONLY storage.objects\n    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: -\n--\n\nALTER TABLE ONLY storage.s3_multipart_uploads_parts\n    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: -\n--\n\nALTER TABLE ONLY storage.s3_multipart_uploads\n    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: supabase_migrations; Owner: -\n--\n\nALTER TABLE ONLY supabase_migrations.schema_migrations\n    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);\n\n\n--\n-- Name: seed_files seed_files_pkey; Type: CONSTRAINT; Schema: supabase_migrations; Owner: -\n--\n\nALTER TABLE ONLY supabase_migrations.seed_files\n    ADD CONSTRAINT seed_files_pkey PRIMARY KEY (path);\n\n\n--\n-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);\n\n\n--\n-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);\n\n\n--\n-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);\n\n\n--\n-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);\n\n\n--\n-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);\n\n\n--\n-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);\n\n\n--\n-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);\n\n\n--\n-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';\n\n\n--\n-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);\n\n\n--\n-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);\n\n\n--\n-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);\n\n\n--\n-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);\n\n\n--\n-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);\n\n\n--\n-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);\n\n\n--\n-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);\n\n\n--\n-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);\n\n\n--\n-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);\n\n\n--\n-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);\n\n\n--\n-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);\n\n\n--\n-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);\n\n\n--\n-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);\n\n\n--\n-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);\n\n\n--\n-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);\n\n\n--\n-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);\n\n\n--\n-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);\n\n\n--\n-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);\n\n\n--\n-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);\n\n\n--\n-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);\n\n\n--\n-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);\n\n\n--\n-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);\n\n\n--\n-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));\n\n\n--\n-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);\n\n\n--\n-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));\n\n\n--\n-- Name: sso_providers_resource_id_pattern_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX sso_providers_resource_id_pattern_idx ON auth.sso_providers USING btree (resource_id text_pattern_ops);\n\n\n--\n-- Name: unique_phone_factor_per_user; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone);\n\n\n--\n-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);\n\n\n--\n-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);\n\n\n--\n-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: -\n--\n\nCOMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';\n\n\n--\n-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));\n\n\n--\n-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);\n\n\n--\n-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: -\n--\n\nCREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);\n\n\n--\n-- Name: employees_email_lower_uq; Type: INDEX; Schema: public; Owner: -\n--\n\nCREATE UNIQUE INDEX employees_email_lower_uq ON public.employees USING btree (lower(email)) WHERE (email IS NOT NULL);\n\n\n--\n-- Name: idx_absences_emp_dates; Type: INDEX; Schema: public; Owner: -\n--\n\nCREATE INDEX idx_absences_emp_dates ON public.absences USING btree (employee_id, start_date, end_date);\n\n\n--\n-- Name: idx_notifications_created_at; Type: INDEX; Schema: public; Owner: -\n--\n\nCREATE INDEX idx_notifications_created_at ON public.notifications USING btree (created_at DESC);\n\n\n--\n-- Name: idx_notifications_is_read; Type: INDEX; Schema: public; Owner: -\n--\n\nCREATE INDEX idx_notifications_is_read ON public.notifications USING btree (is_read);\n\n\n--\n-- Name: idx_shifts_emp_date_pub; Type: INDEX; Schema: public; Owner: -\n--\n\nCREATE INDEX idx_shifts_emp_date_pub ON public.shifts USING btree (employee_id, work_date, published);\n\n\n--\n-- Name: idx_shifts_employee_id; Type: INDEX; Schema: public; Owner: -\n--\n\nCREATE INDEX idx_shifts_employee_id ON public.shifts USING btree (employee_id);\n\n\n--\n-- Name: idx_shifts_published; Type: INDEX; Schema: public; Owner: -\n--\n\nCREATE INDEX idx_shifts_published ON public.shifts USING btree (published);\n\n\n--\n-- Name: idx_shifts_work_date; Type: INDEX; Schema: public; Owner: -\n--\n\nCREATE INDEX idx_shifts_work_date ON public.shifts USING btree (work_date);\n\n\n--\n-- Name: mail_jobs_emp_queued_idx; Type: INDEX; Schema: public; Owner: -\n--\n\nCREATE INDEX mail_jobs_emp_queued_idx ON public.mail_jobs USING btree (((payload ->> 'employee_id'::text))) WHERE (status = 'queued'::text);\n\n\n--\n-- Name: mail_jobs_queued_time_type_idx; Type: INDEX; Schema: public; Owner: -\n--\n\nCREATE INDEX mail_jobs_queued_time_type_idx ON public.mail_jobs USING btree (created_at, type) WHERE (status = 'queued'::text);\n\n\n--\n-- Name: mail_jobs_status_idx; Type: INDEX; Schema: public; Owner: -\n--\n\nCREATE INDEX mail_jobs_status_idx ON public.mail_jobs USING btree (status) WHERE (status = 'queued'::text);\n\n\n--\n-- Name: mail_jobs_unique_key; Type: INDEX; Schema: public; Owner: -\n--\n\nCREATE UNIQUE INDEX mail_jobs_unique_key ON public.mail_jobs USING btree (job_key) WHERE (type = 'admin_new_absence'::text);\n\n\n--\n-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: -\n--\n\nCREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING btree (entity);\n\n\n--\n-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: -\n--\n\nCREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);\n\n\n--\n-- Name: bname; Type: INDEX; Schema: storage; Owner: -\n--\n\nCREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);\n\n\n--\n-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: -\n--\n\nCREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);\n\n\n--\n-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: -\n--\n\nCREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);\n\n\n--\n-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: -\n--\n\nCREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE \"C\");\n\n\n--\n-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: -\n--\n\nCREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);\n\n\n--\n-- Name: messages_2025_08_29_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: -\n--\n\nALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2025_08_29_pkey;\n\n\n--\n-- Name: messages_2025_08_30_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: -\n--\n\nALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2025_08_30_pkey;\n\n\n--\n-- Name: messages_2025_08_31_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: -\n--\n\nALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2025_08_31_pkey;\n\n\n--\n-- Name: messages_2025_09_01_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: -\n--\n\nALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2025_09_01_pkey;\n\n\n--\n-- Name: messages_2025_09_02_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: -\n--\n\nALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2025_09_02_pkey;\n\n\n--\n-- Name: messages_2025_09_03_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: -\n--\n\nALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2025_09_03_pkey;\n\n\n--\n-- Name: messages_2025_09_04_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: -\n--\n\nALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2025_09_04_pkey;\n\n\n--\n-- Name: absences trg_absence_enqueue_job; Type: TRIGGER; Schema: public; Owner: -\n--\n\nCREATE TRIGGER trg_absence_enqueue_job AFTER INSERT ON public.absences FOR EACH ROW EXECUTE FUNCTION public.trg_absence_enqueue_job();\n\n\n--\n-- Name: absences trg_admin_new_absence; Type: TRIGGER; Schema: public; Owner: -\n--\n\nCREATE TRIGGER trg_admin_new_absence AFTER INSERT ON public.absences FOR EACH ROW EXECUTE FUNCTION public.enqueue_admin_new_absence();\n\n\n--\n-- Name: shifts trg_employee_new_shift; Type: TRIGGER; Schema: public; Owner: -\n--\n\nCREATE TRIGGER trg_employee_new_shift AFTER INSERT ON public.shifts FOR EACH ROW EXECUTE FUNCTION public.enqueue_employee_new_shift();\n\n\n--\n-- Name: shifts trg_employee_shift_changed; Type: TRIGGER; Schema: public; Owner: -\n--\n\nCREATE TRIGGER trg_employee_shift_changed AFTER UPDATE ON public.shifts FOR EACH ROW EXECUTE FUNCTION public.enqueue_employee_shift_changed();\n\n\n--\n-- Name: shifts trg_employee_shift_deleted; Type: TRIGGER; Schema: public; Owner: -\n--\n\nCREATE TRIGGER trg_employee_shift_deleted AFTER DELETE ON public.shifts FOR EACH ROW EXECUTE FUNCTION public.enqueue_employee_shift_deleted();\n\n\n--\n-- Name: absences trg_notify_absence_insert; Type: TRIGGER; Schema: public; Owner: -\n--\n\nCREATE TRIGGER trg_notify_absence_insert AFTER INSERT ON public.absences FOR EACH ROW EXECUTE FUNCTION public.notify_absence_insert();\n\n\n--\n-- Name: absences trg_notify_absence_update; Type: TRIGGER; Schema: public; Owner: -\n--\n\nCREATE TRIGGER trg_notify_absence_update AFTER UPDATE ON public.absences FOR EACH ROW EXECUTE FUNCTION public.notify_absence_status_update();\n\n\n--\n-- Name: employees trg_notify_employee_added; Type: TRIGGER; Schema: public; Owner: -\n--\n\nCREATE TRIGGER trg_notify_employee_added AFTER INSERT ON public.employees FOR EACH ROW EXECUTE FUNCTION public.notify_employee_added();\n\n\n--\n-- Name: shifts trg_shifts_on_publish_flip; Type: TRIGGER; Schema: public; Owner: -\n--\n\nCREATE TRIGGER trg_shifts_on_publish_flip BEFORE UPDATE OF published ON public.shifts FOR EACH ROW EXECUTE FUNCTION public.enqueue_on_publish_flip();\n\n\n--\n-- Name: shifts trg_shifts_updated_at; Type: TRIGGER; Schema: public; Owner: -\n--\n\nCREATE TRIGGER trg_shifts_updated_at BEFORE UPDATE ON public.shifts FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();\n\n\n--\n-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: -\n--\n\nCREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();\n\n\n--\n-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: -\n--\n\nCREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();\n\n\n--\n-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.identities\n    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;\n\n\n--\n-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.mfa_amr_claims\n    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;\n\n\n--\n-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.mfa_challenges\n    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;\n\n\n--\n-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.mfa_factors\n    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;\n\n\n--\n-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.one_time_tokens\n    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;\n\n\n--\n-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.refresh_tokens\n    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;\n\n\n--\n-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.saml_providers\n    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;\n\n\n--\n-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.saml_relay_states\n    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;\n\n\n--\n-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.saml_relay_states\n    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;\n\n\n--\n-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.sessions\n    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;\n\n\n--\n-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: -\n--\n\nALTER TABLE ONLY auth.sso_domains\n    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;\n\n\n--\n-- Name: absences absences_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -\n--\n\nALTER TABLE ONLY public.absences\n    ADD CONSTRAINT absences_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;\n\n\n--\n-- Name: shifts shifts_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -\n--\n\nALTER TABLE ONLY public.shifts\n    ADD CONSTRAINT shifts_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;\n\n\n--\n-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: -\n--\n\nALTER TABLE ONLY storage.objects\n    ADD CONSTRAINT \"objects_bucketId_fkey\" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);\n\n\n--\n-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: -\n--\n\nALTER TABLE ONLY storage.s3_multipart_uploads\n    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);\n\n\n--\n-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: -\n--\n\nALTER TABLE ONLY storage.s3_multipart_uploads_parts\n    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);\n\n\n--\n-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: -\n--\n\nALTER TABLE ONLY storage.s3_multipart_uploads_parts\n    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;\n\n\n--\n-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: -\n--\n\nALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: absences; Type: ROW SECURITY; Schema: public; Owner: -\n--\n\nALTER TABLE public.absences ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: absences absences_insert_auth; Type: POLICY; Schema: public; Owner: -\n--\n\nCREATE POLICY absences_insert_auth ON public.absences FOR INSERT TO authenticated WITH CHECK (true);\n\n\n--\n-- Name: absences absences_read_auth; Type: POLICY; Schema: public; Owner: -\n--\n\nCREATE POLICY absences_read_auth ON public.absences FOR SELECT TO authenticated USING (true);\n\n\n--\n-- Name: app_settings; Type: ROW SECURITY; Schema: public; Owner: -\n--\n\nALTER TABLE public.app_settings ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: employees dev: employees select for anon; Type: POLICY; Schema: public; Owner: -\n--\n\nCREATE POLICY \"dev: employees select for anon\" ON public.employees FOR SELECT TO anon USING (true);\n\n\n--\n-- Name: notifications dev: notifications select for anon; Type: POLICY; Schema: public; Owner: -\n--\n\nCREATE POLICY \"dev: notifications select for anon\" ON public.notifications FOR SELECT TO anon USING (true);\n\n\n--\n-- Name: employees; Type: ROW SECURITY; Schema: public; Owner: -\n--\n\nALTER TABLE public.employees ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: employees employees_select_auth; Type: POLICY; Schema: public; Owner: -\n--\n\nCREATE POLICY employees_select_auth ON public.employees FOR SELECT TO authenticated USING (true);\n\n\n--\n-- Name: mail_jobs; Type: ROW SECURITY; Schema: public; Owner: -\n--\n\nALTER TABLE public.mail_jobs ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: notifications; Type: ROW SECURITY; Schema: public; Owner: -\n--\n\nALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: notifications notifications_select_auth; Type: POLICY; Schema: public; Owner: -\n--\n\nCREATE POLICY notifications_select_auth ON public.notifications FOR SELECT TO authenticated USING (true);\n\n\n--\n-- Name: shifts; Type: ROW SECURITY; Schema: public; Owner: -\n--\n\nALTER TABLE public.shifts ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: shifts shifts_select_auth; Type: POLICY; Schema: public; Owner: -\n--\n\nCREATE POLICY shifts_select_auth ON public.shifts FOR SELECT TO authenticated USING (true);\n\n\n--\n-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: -\n--\n\nALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: -\n--\n\nALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: -\n--\n\nALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: -\n--\n\nALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: -\n--\n\nALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: -\n--\n\nALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;\n\n--\n-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: -\n--\n\nCREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');\n\n\n--\n-- Name: supabase_realtime_messages_publication; Type: PUBLICATION; Schema: -; Owner: -\n--\n\nCREATE PUBLICATION supabase_realtime_messages_publication WITH (publish = 'insert, update, delete, truncate');\n\n\n--\n-- Name: supabase_realtime shifts; Type: PUBLICATION TABLE; Schema: public; Owner: -\n--\n\nALTER PUBLICATION supabase_realtime ADD TABLE ONLY public.shifts;\n\n\n--\n-- Name: supabase_realtime_messages_publication messages; Type: PUBLICATION TABLE; Schema: realtime; Owner: -\n--\n\nALTER PUBLICATION supabase_realtime_messages_publication ADD TABLE ONLY realtime.messages;\n\n\n--\n-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: -\n--\n\nCREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop\n         WHEN TAG IN ('DROP EXTENSION')\n   EXECUTE FUNCTION extensions.set_graphql_placeholder();\n\n\n--\n-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: -\n--\n\nCREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end\n         WHEN TAG IN ('CREATE EXTENSION')\n   EXECUTE FUNCTION extensions.grant_pg_cron_access();\n\n\n--\n-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: -\n--\n\nCREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end\n         WHEN TAG IN ('CREATE FUNCTION')\n   EXECUTE FUNCTION extensions.grant_pg_graphql_access();\n\n\n--\n-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: -\n--\n\nCREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end\n         WHEN TAG IN ('CREATE EXTENSION')\n   EXECUTE FUNCTION extensions.grant_pg_net_access();\n\n\n--\n-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: -\n--\n\nCREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end\n   EXECUTE FUNCTION extensions.pgrst_ddl_watch();\n\n\n--\n-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: -\n--\n\nCREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop\n   EXECUTE FUNCTION extensions.pgrst_drop_watch();\n\n\n--\n-- PostgreSQL database dump complete\n--\n\n\\unrestrict [REDACTED]\n\n",
          "byteOffset": 0,
          "totalChunks": 1,
          "hasMore": false,
          "startLine": 1,
          "endLine": 3975
        }
      ]
    }
  ],
  "index": {
    "byPath": [
      "src/app/ServiceWorkerRegister.tsx",
      "src/app/globals.css",
      "src/app/layout.tsx",
      "src/app/page.tsx",
      "src/lib/dateUtils.ts",
      "src/lib/logger.ts",
      "src/lib/pushClient.ts",
      "src/lib/sendEmail.ts",
      "src/lib/settingsDb.ts",
      "src/lib/settingsSchema.ts",
      "src/lib/supaBaseClient.ts",
      "src/lib/theme.ts",
      "src/store/useScheduleStore.ts",
      "src/store/useSettingsStore.ts",
      "src/app/components/AbsenceControlPanel.tsx",
      "src/app/components/EmployeeList.tsx",
      "src/app/components/ScheduleTable.tsx",
      "src/app/components/SettingsDialog.tsx",
      "src/app/components/Toolbar.tsx",
      "src/app/types/index.ts",
      "src/features/absences/notify.ts",
      "src/app/api/sendEmail/route.ts",
      "src/app/components/ui/NotificationsPopover.tsx",
      "src/app/components/ui/avatar.tsx",
      "src/app/components/ui/badge.tsx",
      "src/app/components/ui/button.tsx",
      "src/app/components/ui/card.tsx",
      "src/app/components/ui/checkbox.tsx",
      "src/app/components/ui/dialog.tsx",
      "src/app/components/ui/input.tsx",
      "src/app/components/ui/label.tsx",
      "src/app/components/ui/popover.tsx",
      "src/app/components/ui/scroll-area.tsx",
      "src/app/components/ui/select.tsx",
      "src/app/components/ui/separator.tsx",
      "src/app/components/ui/slider.tsx",
      "src/app/components/ui/sonner.tsx",
      "src/app/components/ui/switch.tsx",
      "src/app/components/ui/tabs.tsx",
      "src/app/components/ui/textarea.tsx",
      "src/app/components/ui/tooltip.tsx",
      "src/app/components/ui/utils.ts",
      "supabase/functions/app_settings/index.ts",
      "supabase/functions/mailer/index.ts",
      "supabase/functions/sendemail/index.ts",
      "supabase/migrations/20250901124740_remote_schema.sql",
      "supabase/schema.sql"
    ],
    "byLang": {
      "tsx": [
        "src/app/ServiceWorkerRegister.tsx",
        "src/app/layout.tsx",
        "src/app/page.tsx",
        "src/app/components/AbsenceControlPanel.tsx",
        "src/app/components/EmployeeList.tsx",
        "src/app/components/ScheduleTable.tsx",
        "src/app/components/SettingsDialog.tsx",
        "src/app/components/Toolbar.tsx",
        "src/app/components/ui/NotificationsPopover.tsx",
        "src/app/components/ui/avatar.tsx",
        "src/app/components/ui/badge.tsx",
        "src/app/components/ui/button.tsx",
        "src/app/components/ui/card.tsx",
        "src/app/components/ui/checkbox.tsx",
        "src/app/components/ui/dialog.tsx",
        "src/app/components/ui/input.tsx",
        "src/app/components/ui/label.tsx",
        "src/app/components/ui/popover.tsx",
        "src/app/components/ui/scroll-area.tsx",
        "src/app/components/ui/select.tsx",
        "src/app/components/ui/separator.tsx",
        "src/app/components/ui/slider.tsx",
        "src/app/components/ui/sonner.tsx",
        "src/app/components/ui/switch.tsx",
        "src/app/components/ui/tabs.tsx",
        "src/app/components/ui/textarea.tsx",
        "src/app/components/ui/tooltip.tsx"
      ],
      "css": [
        "src/app/globals.css"
      ],
      "typescript": [
        "src/lib/dateUtils.ts",
        "src/lib/logger.ts",
        "src/lib/pushClient.ts",
        "src/lib/sendEmail.ts",
        "src/lib/settingsDb.ts",
        "src/lib/settingsSchema.ts",
        "src/lib/supaBaseClient.ts",
        "src/lib/theme.ts",
        "src/store/useScheduleStore.ts",
        "src/store/useSettingsStore.ts",
        "src/app/types/index.ts",
        "src/features/absences/notify.ts",
        "src/app/api/sendEmail/route.ts",
        "src/app/components/ui/utils.ts",
        "supabase/functions/app_settings/index.ts",
        "supabase/functions/mailer/index.ts",
        "supabase/functions/sendemail/index.ts"
      ],
      "sql": [
        "supabase/migrations/20250901124740_remote_schema.sql",
        "supabase/schema.sql"
      ]
    }
  }
}