[
  {
    "path": "src/lib/pushClient.ts",
    "size": 1652,
    "sha256": "590f9a9f65af6842bcc271abe6ceef5e9eb756d19848c0eaed7dbab87bc5bf3a",
    "lang": "typescript",
    "lines": 51,
    "modifiedAt": "2025-09-02T01:28:28+03:00",
    "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
    "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/lib/pushClient.ts",
    "chunks": [
      {
        "i": 0,
        "text": "// src/lib/pushClient.ts\nimport { supabase } from \"@/lib/supaBaseClient\";\n\nconst PUBLIC_VAPID = process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY || \"\";\n\nfunction urlBase64ToUint8Array(base64String: string) {\n  const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\n  const raw = atob(base64);\n  const output = new Uint8Array(raw.length);\n  for (let i = 0; i < raw.length; ++i) output[i] = raw.charCodeAt(i);\n  return output;\n}\n\nexport async function ensureServiceWorker() {\n  if (!(\"serviceWorker\" in navigator)) throw new Error(\"Service Worker ei tuettu\");\n  const reg = await navigator.serviceWorker.register(\"/sw.js\");\n  await navigator.serviceWorker.ready;\n  return reg;\n}\n\nexport async function requestPermissionAndSubscribe(): Promise<boolean> {\n  if (!PUBLIC_VAPID) { console.error(\"NEXT_PUBLIC_VAPID_PUBLIC_KEY puuttuu\"); return false; }\n\n  const perm = await Notification.requestPermission();\n  if (perm !== \"granted\") return false;\n\n  const reg = await ensureServiceWorker();\n  const sub = await reg.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: urlBase64ToUint8Array(PUBLIC_VAPID),\n  });\n\n  // talleta supabaseen\nconst json: PushSubscriptionJSON = sub.toJSON();\nconst endpoint: string = json.endpoint!;\nconst p256dh: string | undefined = json.keys?.p256dh;\nconst auth: string | undefined = json.keys?.auth;\n\nconst { error } = await supabase\n  .from(\"push_subscriptions\")\n  .upsert({ endpoint, p256dh, auth, is_active: true }, { onConflict: \"endpoint\" });\n\nif (error) {\n  console.error(error);\n  return false;\n}\nreturn true;\n\n}\n",
        "byteOffset": 0,
        "totalChunks": 1,
        "hasMore": false,
        "startLine": 1,
        "endLine": 51
      }
    ]
  },
  {
    "path": "src/lib/logger.ts",
    "size": 1735,
    "sha256": "cb0a9981a5d5647dea71e1188b132580d199d07ebe0e13a24a49df0b0d476afc",
    "lang": "typescript",
    "lines": 58,
    "modifiedAt": "2025-09-02T01:28:28+03:00",
    "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
    "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/lib/logger.ts",
    "chunks": [
      {
        "i": 0,
        "text": "/* Timanttinen virhe-normalisointi: EI enää console.error({}) -roskaa */\ntype NormalizedError = {\n  name: string\n  message: string\n  stack?: string\n  status?: number\n  cause?: unknown\n  extra?: Record<string, unknown>\n};\n\nfunction isResponseLike(x: unknown): x is Response & { url?: string } {\n  return typeof x === \"object\" && x !== null && \"status\" in x && \"ok\" in x;\n}\n\nexport function normalizeError(err: unknown): NormalizedError {\n  if (isResponseLike(err)) {\n    return {\n      name: \"HTTPError\",\n      message: `HTTP ${err.status} ${err.statusText ?? \"\"}`.trim(),\n      status: err.status,\n      extra: { url: (err as any).url },\n    };\n  }\n  if (err instanceof Error) {\n    const cause = (err as any).cause;\n    return {\n      name: err.name || \"Error\",\n      message: err.message || \"Unknown error\",\n      stack: err.stack,\n      cause,\n    };\n  }\n  if (typeof err === \"object\" && err !== null) {\n    const anyErr = err as Record<string, unknown>;\n    const name = typeof anyErr.name === \"string\" ? anyErr.name : \"UnknownObjectError\";\n    const message = typeof anyErr.message === \"string\" ? anyErr.message : JSON.stringify(anyErr);\n    return { name, message, extra: anyErr };\n  }\n  if (typeof err === \"string\") {\n    return { name: \"StringError\", message: err };\n  }\n  return { name: \"Unknown\", message: String(err) };\n}\n\nexport function logError(context: string, err: unknown) {\n  const n = normalizeError(err);\n  console.error(`[${context}] ${n.name}: ${n.message}`, {\n    status: n.status,\n    cause: n.cause,\n    extra: n.extra,\n    stack: n.stack,\n  });\n}\n\nexport function logInfo(context: string, data?: unknown) {\n  if (data === undefined) console.info(`[${context}]`);\n  else console.info(`[${context}]`, data);\n}",
        "byteOffset": 0,
        "totalChunks": 1,
        "hasMore": false,
        "startLine": 1,
        "endLine": 58
      }
    ]
  },
  {
    "path": "src/app/components/ui/tooltip.tsx",
    "size": 1897,
    "sha256": "2f3a8720fb4b75c6911450be73d0407e2a84bb5ea1ded28ccdbf955be62a0155",
    "lang": "tsx",
    "lines": 62,
    "modifiedAt": "2025-09-02T01:28:28+03:00",
    "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
    "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/tooltip.tsx",
    "chunks": [
      {
        "i": 0,
        "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\n\nimport { cn } from \"./utils\";\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  );\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  );\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  );\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n",
        "byteOffset": 0,
        "totalChunks": 1,
        "hasMore": false,
        "startLine": 1,
        "endLine": 62
      }
    ]
  },
  {
    "path": "src/app/components/ui/tabs.tsx",
    "size": 1945,
    "sha256": "933b8f421bd84b21a22e3fd11cd62fbf4fd8b6fb7252f42ea706b9cd29255051",
    "lang": "tsx",
    "lines": 67,
    "modifiedAt": "2025-09-02T01:28:28+03:00",
    "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
    "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/tabs.tsx",
    "chunks": [
      {
        "i": 0,
        "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\";\n\nimport { cn } from \"./utils\";\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-xl p-[3px] flex\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-card dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-xl border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  );\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n",
        "byteOffset": 0,
        "totalChunks": 1,
        "hasMore": false,
        "startLine": 1,
        "endLine": 67
      }
    ]
  },
  {
    "path": "src/app/components/ui/card.tsx",
    "size": 1988,
    "sha256": "afc99cfa090791e394e68766095a4a86f5f6140521546b32d4b298061d72473f",
    "lang": "tsx",
    "lines": 93,
    "modifiedAt": "2025-09-02T01:28:28+03:00",
    "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
    "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/card.tsx",
    "chunks": [
      {
        "i": 0,
        "text": "import * as React from \"react\";\n\nimport { cn } from \"./utils\";\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 pt-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <h4\n      data-slot=\"card-title\"\n      className={cn(\"leading-none\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <p\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6 [&:last-child]:pb-6\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 pb-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n};\n",
        "byteOffset": 0,
        "totalChunks": 1,
        "hasMore": false,
        "startLine": 1,
        "endLine": 93
      }
    ]
  },
  {
    "path": "src/app/components/ui/slider.tsx",
    "size": 2006,
    "sha256": "19dd9d8b758f41fa61967d1a0540ea34ed989727258d23eef9a50cdebcab805b",
    "lang": "tsx",
    "lines": 64,
    "modifiedAt": "2025-09-02T01:28:28+03:00",
    "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
    "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/slider.tsx",
    "chunks": [
      {
        "i": 0,
        "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SliderPrimitive from \"@radix-ui/react-slider\";\n\nimport { cn } from \"./utils\";\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max],\n  );\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        \"relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\",\n        className,\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          \"bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-4 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\",\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            \"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\",\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  );\n}\n\nexport { Slider };\n",
        "byteOffset": 0,
        "totalChunks": 1,
        "hasMore": false,
        "startLine": 1,
        "endLine": 64
      }
    ]
  },
  {
    "path": "src/app/components/ui/button.tsx",
    "size": 2106,
    "sha256": "a3f96150fdf0c929eec3759673cc34b2cf5538fc088b25a54c00e0a3ed1c3f60",
    "lang": "tsx",
    "lines": 59,
    "modifiedAt": "2025-09-02T01:28:28+03:00",
    "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
    "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/button.tsx",
    "chunks": [
      {
        "i": 0,
        "text": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"./utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background text-foreground hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9 rounded-md\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n",
        "byteOffset": 0,
        "totalChunks": 1,
        "hasMore": false,
        "startLine": 1,
        "endLine": 59
      }
    ]
  },
  {
    "path": "src/lib/settingsDb.ts",
    "size": 2630,
    "sha256": "77806229a96c16119e442badefeb3ffc2b186b0f5b143c93fd7f0959e5018d92",
    "lang": "typescript",
    "lines": 70,
    "modifiedAt": "2025-09-02T01:28:28+03:00",
    "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
    "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/lib/settingsDb.ts",
    "chunks": [
      {
        "i": 0,
        "text": "// src/lib/settingsDb.ts\nimport type { Settings } from \"@/lib/settingsSchema\";\n\n\n function resolveFunctionsBase(): string {\n   const direct = process.env.NEXT_PUBLIC_SUPABASE_FUNCTIONS_URL?.trim();\n   if (direct) return direct.replace(/\\/+$/, \"\");\n   const supaUrl = process.env.NEXT_PUBLIC_SUPABASE_URL?.trim();\n   if (!supaUrl) throw new Error(\"Missing NEXT_PUBLIC_SUPABASE_URL\");\n   if (supaUrl.includes(\"localhost\") || supaUrl.includes(\"127.0.0.1\")) {\n     if (typeof window !== \"undefined\") {\n       const h = window.location.hostname;\n       if (h && h !== \"localhost\" && h !== \"127.0.0.1\") {\n         return `http://${h}:54321/functions/v1`;\n       }\n     }\n     return \"http://127.0.0.1:54321/functions/v1\";\n   }\n   return supaUrl.replace(\".supabase.co\", \".functions.supabase.co\");\n }\n const FN_URL = `${resolveFunctionsBase()}/app_settings`;\n\n async function getAuthToken(): Promise<string | undefined> {\n   // Next.js clientissä: hae token supabasen kautta\n   try {\n     const { createClient } = await import(\"@supabase/supabase-js\");\n     const supabase = createClient(\n       process.env.NEXT_PUBLIC_SUPABASE_URL!,\n       process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n     );\n     const { data: { session } } = await supabase.auth.getSession();\n     return session?.access_token;\n   } catch {\n     return undefined;\n   }\n }\n\nexport async function saveNotificationSettingsToDb(notifs: Settings[\"notifications\"]) {\n  if (typeof window !== \"undefined\") console.log(\"[app_settings] FN_URL:\", FN_URL);\n   const token = await getAuthToken();\n   const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n   const res = await fetch(FN_URL, {\n     method: \"PUT\",\n     mode: \"cors\",\n     headers: {\n       \"content-type\": \"application/json\",\n       ...(token || anon ? { Authorization: `Bearer ${token ?? anon}` } : {}),\n     },\n     body: JSON.stringify({ notifications: notifs }),\n   });\n   if (!res.ok) {\n     const j = await res.json().catch(() => ({}));\n     throw new Error(j?.error ?? `Failed to save settings (${res.status})`);\n   }\n}\n export async function loadNotificationSettingsFromDb():\n   Promise<Settings[\"notifications\"]> {\n   const token = await getAuthToken();\n   const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n   const res = await fetch(FN_URL, {\n     method: \"GET\",\n     headers: { ...(token || anon ? { Authorization: `Bearer ${token ?? anon}` } : {}) },\n   });\n   if (!res.ok) {\n     const j = await res.json().catch(() => ({}));\n     throw new Error(j?.error ?? `Failed to load settings (${res.status})`);\n   }\n   const j = await res.json();\n   return j.notifications as Settings[\"notifications\"];\n }",
        "byteOffset": 0,
        "totalChunks": 1,
        "hasMore": false,
        "startLine": 1,
        "endLine": 70
      }
    ]
  },
  {
    "path": "src/app/components/ui/dialog.tsx",
    "size": 3828,
    "sha256": "f4adc0065a7f795b5d99b8afe095a443d2d03b523cf5f958bc36ee7fbe0d3e45",
    "lang": "tsx",
    "lines": 136,
    "modifiedAt": "2025-09-02T01:28:28+03:00",
    "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
    "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/dialog.tsx",
    "chunks": [
      {
        "i": 0,
        "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { XIcon } from \"lucide-react\";\n\nimport { cn } from \"./utils\";\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />;\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />;\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />;\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />;\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DialogContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n          <XIcon />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n};\n",
        "byteOffset": 0,
        "totalChunks": 1,
        "hasMore": false,
        "startLine": 1,
        "endLine": 136
      }
    ]
  },
  {
    "path": "src/lib/settingsSchema.ts",
    "size": 4034,
    "sha256": "296faedaaf98b64a1c3232a2c7f2c7ffa9be4f2c3e0e665a3b124a2c9d9596b4",
    "lang": "typescript",
    "lines": 137,
    "modifiedAt": "2025-09-02T01:28:28+03:00",
    "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
    "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/lib/settingsSchema.ts",
    "chunks": [
      {
        "i": 0,
        "text": "// lib/settingsSchema.ts\nimport { z } from \"zod\";\n\nexport const themeValues = [\"light\", \"dark\", \"system\"] as const;\nexport type Theme = typeof themeValues[number];\n\nexport const languageValues = [\"fi\", \"en\", \"sv\"] as const;\nexport type Language = typeof languageValues[number];\n\nexport const weekStartValues = [\"monday\", \"sunday\"] as const;\nexport type WeekStartDay = typeof weekStartValues[number];\n\nexport const timeFormatValues = [\"24h\", \"12h\"] as const;\nexport type TimeFormat = typeof timeFormatValues[number];\n\nexport const dateFormatValues = [\"dd.mm.yyyy\", \"mm/dd/yyyy\", \"yyyy-mm-dd\"] as const;\nexport type DateFormat = typeof dateFormatValues[number];\n\nexport type TimePeriod = 7 | 10 | 14 | 30;\n\nexport const GeneralSettingsSchema = z.object({\n  theme: z.enum(themeValues),\n  language: z.enum(languageValues),\n  weekStartDay: z.enum(weekStartValues),\n  timeFormat: z.enum(timeFormatValues),\n  dateFormat: z.enum(dateFormatValues),\n  defaultTimePeriod: z.union([z.literal(7), z.literal(10), z.literal(14), z.literal(30)]),\n  workingHours: z.object({\n    start: z.string().regex(/^\\d{2}:\\d{2}$/),\n    end: z.string().regex(/^\\d{2}:\\d{2}$/),\n    breakDuration: z.number().int().min(0).max(240),\n  }),\n  autoSave: z.boolean(),\n  autoSaveInterval: z.number().int().min(10).max(300),\n});\n\nexport const AutoGenSettingsSchema = z.object({\n  defaultHours: z.number().min(1).max(12),\n  distributeEvenly: z.boolean(),\n  respectWorkingHours: z.boolean(),\n  skipWeekends: z.boolean(),\n  skipHolidays: z.boolean(),\n  maxConsecutiveDays: z.number().int().min(1).max(14),\n  minRestHours: z.number().int().min(8).max(24),\n});\n\nexport const ExportSettingsSchema = z.object({\n  companyName: z.string().max(120),\n  includeNames: z.boolean(),\n  includeEmails: z.boolean(),\n  includeDepartments: z.boolean(),\n  includeInactiveEmployees: z.boolean(),\n  includeEmptyShifts: z.boolean(),\n  includeHourTotals: z.boolean(),\n});\n\nexport const NotificationSettingsSchema = z.object({\n  emailNotifications: z.boolean(),\n  adminNotificationEmails: z.array(z.string().email()).max(50).default([]),\n  absenceRequests: z.boolean(),\n  scheduleChanges: z.boolean(),\n  employeeUpdates: z.boolean(),\n  systemUpdates: z.boolean(),\n  dailyDigest: z.boolean(),\n  digestTime: z.string().regex(/^\\d{2}:\\d{2}$/),\n});\n\nexport const SystemSettingsSchema = z.object({\n  version: z.string(),\n  lastBackup: z.string().nullable().optional(),\n  maintenanceMode: z.boolean(),\n  debugMode: z.boolean(),\n  maxEmployees: z.number().int().min(1).max(1000),\n  dataRetentionDays: z.number().int().min(30).max(3650),\n});\n\nexport const SettingsSchema = z.object({\n  general: GeneralSettingsSchema,\n  autoGeneration: AutoGenSettingsSchema,\n  export: ExportSettingsSchema,\n  notifications: NotificationSettingsSchema,\n  system: SystemSettingsSchema,\n});\n\nexport type Settings = z.infer<typeof SettingsSchema>;\n\n// Oletukset\nexport const DEFAULT_SETTINGS: Settings = {\n  general: {\n    theme: \"light\",\n    language: \"fi\",\n    weekStartDay: \"monday\",\n    timeFormat: \"24h\",\n    dateFormat: \"dd.mm.yyyy\",\n    defaultTimePeriod: 30,\n    workingHours: { start: \"08:00\", end: \"17:00\", breakDuration: 30 },\n    autoSave: true,\n    autoSaveInterval: 60,\n  },\n  autoGeneration: {\n    defaultHours: 8,\n    distributeEvenly: false,\n    respectWorkingHours: true,\n    skipWeekends: true,\n    skipHolidays: false,\n    maxConsecutiveDays: 5,\n    minRestHours: 11,\n  },\n  export: {\n    companyName: \"Yritys Oy\",\n    includeNames: true,\n    includeEmails: false,\n    includeDepartments: true,\n    includeInactiveEmployees: false,\n    includeEmptyShifts: true,\n    includeHourTotals: true,\n  },\n  notifications: {\n    emailNotifications: true,\n    absenceRequests: true,\n    adminNotificationEmails: [],\n    scheduleChanges: true,\n    employeeUpdates: false,\n    systemUpdates: false,\n    dailyDigest: false,\n    digestTime: \"08:00\",\n  },\n  system: {\n    version: \"1.0.0\",\n    lastBackup: null,\n    maintenanceMode: false,\n    debugMode: false,\n    maxEmployees: 100,\n    dataRetentionDays: 365,\n  },\n};\n",
        "byteOffset": 0,
        "totalChunks": 1,
        "hasMore": false,
        "startLine": 1,
        "endLine": 137
      }
    ]
  },
  {
    "path": "src/app/components/ui/select.tsx",
    "size": 6275,
    "sha256": "6aaf2111952394fbb8c64a505af02d08da28cc25726d61a991daebe400772480",
    "lang": "tsx",
    "lines": 190,
    "modifiedAt": "2025-09-02T01:28:28+03:00",
    "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
    "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/ui/select.tsx",
    "chunks": [
      {
        "i": 0,
        "text": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport {\n  CheckIcon,\n  ChevronDownIcon,\n  ChevronUpIcon,\n} from \"lucide-react\";\n\nimport { cn } from \"./utils\";\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />;\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\";\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-full items-center justify-between gap-2 rounded-md border bg-input-background px-3 py-2 text-sm whitespace-nowrap transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\",\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  );\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  );\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  );\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
        "byteOffset": 0,
        "totalChunks": 1,
        "hasMore": false,
        "startLine": 1,
        "endLine": 190
      }
    ]
  },
  {
    "path": "src/store/useScheduleStore.ts",
    "size": 10106,
    "sha256": "0ef590c5dcd26e825e3def78d9e415fb89b49ee89547c01bfe88f9f548f715b3",
    "lang": "typescript",
    "lines": 359,
    "modifiedAt": "2025-09-02T01:28:28+03:00",
    "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
    "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/store/useScheduleStore.ts",
    "chunks": [
      {
        "i": 0,
        "text": "// src/store/useScheduleStore.ts\n\"use client\";\n\nimport { create } from \"zustand\";\nimport { devtools } from \"zustand/middleware\";\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/lib/supaBaseClient\";\nimport { persist, createJSONStorage } from \"zustand/middleware\";\n\n\n\n// KÄYTÄ YHTÄ TOTUUTTA: ota tyypit yhdestä paikasta\nimport type { Employee, DateInfo } from \"@/app/types\";\n\n// Sama DateCell kuin muualla\nexport type DateCell = DateInfo & { iso: string };\n\n// Yhden solun persistomuoto\nexport type ShiftRow = {\n  employee_id: string;\n  work_date: string; // YYYY-MM-DD\n  type: \"normal\" | \"locked\" | \"absent\" | \"holiday\";\n  hours: number | null; // null sallitaan, mutta tallennetaan 0:ksi kun kirjoitetaan DB:hen\n};\n// Suodattimien tyyppi\nexport type Filters = {\n  departments: string[];\n  showActive: boolean;\n  showInactive: boolean;\n  searchTerm: string;\n};\n\n// Sisäinen muutos, jota kerätään saveAll:lle\ntype PendingChange = {\n  employee_id: string;\n  work_date: string;\n  hours: number; // 0 => poista, >0 => upsert \"normal\"\n};\n\ntype State = {\n\n  // Hydratoitu perusdata\n  employees: Employee[];\n  dates: DateCell[];\n\n  // Vuorot mapattuna\n  shiftsMap: Record<string, ShiftRow>;\n\n  // Muutokset jotka pitää tallentaa\n  pending: Record<string, PendingChange>;\n\n  // Undo/redo pino\n  undoStack: PendingChange[];\n  redoStack: PendingChange[];\n\n  // UI-signaalit\n  dirty: boolean;\n\n  // Filtterit\n  filters: Filters;\n  setFilters: (patch: Partial<Filters>) => void;\n  resetFilters: () => void;\n\n  startDateISO: string;\n  days: 7 | 10 | 14 | 30;\n\n  setRange: (startISO: string, days: State[\"days\"]) => void;\n  setStartDate: (startDateISO: string) => void;\n  shiftRange: (deltaDays: number) => void;\n  hasHydrated: boolean;\n  _setHydrated: (v: boolean) => void;\n\n  // Toiminnot\n  hydrate: (payload: {\n    employees: Employee[];\n    dates: DateCell[];\n    shifts: ShiftRow[];\n  }) => void;\n\n  applyCellChange: (p: { employee_id: string; work_date: string; hours: number | null }) => void;\n\n  saveAll: () => Promise<void>;\n\n  undo: () => void;\n  redo: () => void;\n};\n\nfunction keyOf(empId: string, iso: string) {\n  return `${empId}|${iso}`;\n}\n\nfunction todayLocalISO() {\n  const d = new Date();\n  d.setHours(0, 0, 0, 0);\n  const yyyy = d.getFullYear();\n  const mm = String(d.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(d.getDate()).padStart(2, \"0\");\n  return `${yyyy}-${mm}-${dd}`;\n}\n\nexport const useScheduleStore = create<State>()(\n  persist(\n  devtools((set, get) => ({\n    employees: [],\n    dates: [],\n    shiftsMap: {},\n    pending: {},\n    undoStack: [],\n    redoStack: [],\n    dirty: false,\n    hasHydrated: false,\n    _setHydrated: (v) => set({ hasHydrated: v }),\n    \n     // ---Filtterit (init + setterit juureen)---\n     filters: { departments: [], showActive: false, showInactive: false, searchTerm: \"\" },\n     setFilters: (partial) =>\n       set((state) => ({ filters: { ...state.filters, ...partial } })),\n     resetFilters: () =>\n       set({ filters: { departments: [], showActive: false, showInactive: false, searchTerm: \"\" } }),\n\nstartDateISO: todayLocalISO(),\ndays: 10 as State[\"days\"],\n\n    hydrate: ({ employees, dates, shifts }) => {\n      // Rakennetaan map shifteistä\n      const map: Record<string, ShiftRow> = {};\n      for (const s of shifts) {\n        map[keyOf(s.employee_id, s.work_date)] = {\n          ...s,\n          hours: s.hours ?? 0,\n          // Varmista että type on unionista (tai normal jos tuntematon)\n          type:\n            s.type === \"normal\" ||\n            s.type === \"locked\" ||\n            s.type === \"absent\" ||\n            s.type === \"holiday\"\n              ? s.type\n              : \"normal\",\n        };\n      }\n      set({\n        employees,\n        dates,\n        shiftsMap: map,\n        pending: {},\n        undoStack: [],\n        redoStack: [],\n        dirty: false,\n      });\n    },\n\n    applyCellChange: ({ employee_id, work_date, hours }) => {\n      const h = typeof hours === \"number\" ? hours : 0;\n      const k = keyOf(employee_id, work_date);\n      const { shiftsMap, pending, undoStack } = get();\n\n      // Laske edellinen arvo (käytetään undo:ssa)\n      const prev = shiftsMap[k];\n\n      // Päivitä live-näkymään:\n      const nextMap = { ...shiftsMap };\n      if (h <= 0) {\n        // 0h => poista vuoro näkyvistä\n        delete nextMap[k];\n      } else {\n        // >0h => laita normal-h vuoro\n        nextMap[k] = {\n          employee_id,\n          work_date,\n          type: \"normal\",\n          hours: h,\n        };\n      }\n\n      // Päivitä pending: 0h => merkkaa poistoksi, muuten upsertiksi\n      const nextPending = { ...pending, [k]: { employee_id, work_date, hours: h } };\n\n      set({\n        shiftsMap: nextMap,\n        pending: nextPending,\n        undoStack: [...undoStack, { employee_id, work_date, hours: prev?.hours ?? 0 }],\n        redoStack: [],\n        dirty: true,\n      });\n    },\n\nsetRange: (startISO, days) => set({ startDateISO: startISO, days }),\nsetStartDate: (startDateISO: string) => set({ startDateISO }),\nshiftRange: (deltaDays: number) => {\n  const { startDateISO, days } = get();\n  const d = new Date(startDateISO + \"T00:00:00Z\");\n  d.setUTCDate(d.getUTCDate() + deltaDays);\n  set({ startDateISO: d.toISOString().slice(0, 10), days });\n},\n\nsaveAll: async () => {\n  const { pending } = get();\n  const changes = Object.values(pending);\n  if (!changes.length) {\n    toast.info(\"Ei tallennettavia muutoksia\");\n    return;\n  }\n\n  const upserts: ShiftRow[] = [];\n  const deletes: { employee_id: string; work_date: string }[] = [];\n\n  for (const c of changes) {\n    if (c.hours <= 0) {\n      deletes.push({ employee_id: c.employee_id, work_date: c.work_date });\n    } else {\n      upserts.push({\n        employee_id: c.employee_id,\n        work_date: c.work_date,\n        type: \"normal\",\n        hours: c.hours,\n      });\n    }\n  }\n\n  try {\n    // 1) Upsertit ensin (turvallista ja idempotenttia)\n    if (upserts.length) {\n      const { error } = await supabase\n        .from(\"shifts\")\n        .upsert(upserts, { onConflict: \"employee_id,work_date\" });\n      if (error) throw error;\n    }\n\n    // 2) Poistot **ilman ristiin-IN-bugia**: ryhmittele työntekijöittäin\n    if (deletes.length) {\n      const byEmp = new Map<string, string[]>();\n      for (const d of deletes) {\n        const arr = byEmp.get(d.employee_id) ?? [];\n        arr.push(d.work_date);\n        byEmp.set(d.employee_id, arr);\n      }\n\n      // Chunkkaa päivämääriä per employee_id, jotta IN-listat eivät kasva liikaa\n      for (const [empId, dates] of byEmp.entries()) {\n        const chunkSize = 1000;\n        for (let i = 0; i < dates.length; i += chunkSize) {\n          const sub = dates.slice(i, i + chunkSize);\n          const { error } = await supabase\n            .from(\"shifts\")\n            .delete()\n            .eq(\"employee_id\", empId) // kriittinen: kohdistus yhteen employeeen\n            .in(\"work_date\", sub);    // vain kyseisen employee_id:n päivät\n          if (error) throw error;\n        }\n      }\n    }\n\n    set({ pending: {}, dirty: false });\n    toast.success(\"Tallennettu\");\n  } catch (e) {\n    console.error(e);\n    toast.error(\"Tallennus epäonnistui\");\n    // Älä nollaa pendingiä epäonnistumisessa\n  }\n},\n\n\n    undo: () => {\n      const { undoStack, shiftsMap, pending, redoStack } = get();\n      if (!undoStack.length) return;\n      const last = undoStack[undoStack.length - 1];\n\n      const k = keyOf(last.employee_id, last.work_date);\n      const current = shiftsMap[k]; // mitä on nyt UI:ssa\n\n      // Palauta entinen tuntimäärä\n      const nextMap = { ...shiftsMap };\n      if (!last.hours || last.hours <= 0) {\n        delete nextMap[k];\n      } else {\n        nextMap[k] = {\n          employee_id: last.employee_id,\n          work_date: last.work_date,\n          type: \"normal\",\n          hours: last.hours,\n        };\n      }\n\n      // Päivitä pending vastaamaan undo-tilaa\n      const nextPending = { ...pending, [k]: { employee_id: last.employee_id, work_date: last.work_date, hours: last.hours ?? 0 } };\n\n      // Siirrä nykyinen tila redo-pinon itemiksi\n      const redoItem: PendingChange = {\n        employee_id: last.employee_id,\n        work_date: last.work_date,\n        hours: current?.hours ?? 0,\n      };\n\n      set({\n        shiftsMap: nextMap,\n        pending: nextPending,\n        undoStack: undoStack.slice(0, -1),\n        redoStack: [...redoStack, redoItem],\n        dirty: true,\n      });\n    },\n\n    redo: () => {\n      const { redoStack, shiftsMap, pending, undoStack } = get();\n      if (!redoStack.length) return;\n      const next = redoStack[redoStack.length - 1];\n\n      const k = keyOf(next.employee_id, next.work_date);\n      const prev = shiftsMap[k];\n\n      const nextMap = { ...shiftsMap };\n      if (!next.hours || next.hours <= 0) {\n        delete nextMap[k];\n      } else {\n        nextMap[k] = {\n          employee_id: next.employee_id,\n          work_date: next.work_date,\n          type: \"normal\",\n          hours: next.hours,\n        };\n      }\n\n      const nextPending = { ...pending, [k]: { ...next } };\n\n      set({\n        shiftsMap: nextMap,\n        pending: nextPending,\n        redoStack: redoStack.slice(0, -1),\n        undoStack: [...undoStack, { employee_id: next.employee_id, work_date: next.work_date, hours: prev?.hours ?? 0 }],\n        dirty: true,\n      });\n    },\n  })),\n    {\n      name: \"schedule-ui\", // avain localStorageen\n      version: 1,\n      storage:\n        typeof window !== \"undefined\"\n          ? createJSONStorage(() => localStorage)\n          : undefined,\n      // persistoi vain nämä (ei esim. shiftsMap tms.)\n      partialize: (state) => ({\n        startDateISO: state.startDateISO,\n        days: state.days,\n      }),\n      // Kun persist-hydraus valmistuu -> merkitse valmiiksi\n      onRehydrateStorage: () => (_state, error) => {\n        if (error) {\n          console.error(\"schedule-ui rehydrate failed\", error);\n          return;\n        }\n        // Ei 'set' scope:ssa -> kutsu action store-instanssin kautta\n        _state?._setHydrated?.(true);\n      },\n  }\n  )\n);\n\n",
        "byteOffset": 0,
        "totalChunks": 1,
        "hasMore": false,
        "startLine": 1,
        "endLine": 359
      }
    ]
  },
  {
    "path": "src/app/components/EmployeeList.tsx",
    "size": 21543,
    "sha256": "c185c01997f0c6279b0765a18dd5c7d60f4c7fc4def77eccd23500ce53e6c8a5",
    "lang": "tsx",
    "lines": 616,
    "modifiedAt": "2025-09-02T01:28:28+03:00",
    "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
    "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/EmployeeList.tsx",
    "chunks": [
      {
        "i": 0,
        "text": "\"use client\";\n\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Badge } from \"./ui/badge\";\nimport { Avatar, AvatarFallback } from \"./ui/avatar\";\nimport { Switch } from \"./ui/switch\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"./ui/dialog\";\nimport { Label } from \"./ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"./ui/select\";\nimport {\n  Users,\n  Plus,\n  Edit3,\n  Trash2,\n  Search,\n  UserCheck,\n  UserX,\n  Mail,\n  Building,\n} from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/lib/supaBaseClient\";\n\n// Sama tyyppi kuin sulla (shifts jätetään tyhjäksi tässä vaiheessa)\ntype Employee = {\n  id: string;\n  name: string;\n  email: string;\n  department: string;\n  isActive: boolean;\n  shifts: Array<unknown>;\n};\n\nconst EmployeeList = () => {\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  // Hakusuodatus\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const [customDepartment, setCustomDepartment] = useState(\"\");\n  const [editCustomDepartment, setEditCustomDepartment] = useState(\"\");\n\n  const [creatingNewDept, setCreatingNewDept] = useState(false);\n  const [editCreatingNewDept, setEditCreatingNewDept] = useState(false);\n\n  // Edit/Add dialogit\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [newEmployee, setNewEmployee] = useState({\n    name: \"\",\n    email: \"\",\n    department: \"\",\n    isActive: true,\n  });\n\n  // 1) HAKU DB:stä\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from(\"employees\")\n        .select(\"id, name, email, department, is_active, created_at\")\n        .order(\"created_at\", { ascending: true });\n\n      if (error) {\n        console.error(error);\n        toast.error(\"Työntekijöiden haku epäonnistui\");\n      } else {\n        // Mapataan snake_case -> camelCase\n\n          type EmployeeRow = {\n          id: string;\n          name: string;\n          email: string;\n          department: string;\n          is_active: boolean;\n          created_at: string; // tai Date, jos haluat käsitellä sitä\n          };\n\n          const mapped: Employee[] = (data ?? []).map((row: EmployeeRow) => ({\n          id: row.id,\n          name: row.name,\n          email: row.email,\n          department: row.department,\n          isActive: !!row.is_active,\n          shifts: [], // ei vielä käytössä\n        }));\n        setEmployees(mapped);\n      }\n      setLoading(false);\n    })();\n  }, []);\n\n  // 2) LISÄYS\nasync function handleAddEmployee() {\n  const name = newEmployee.name.trim();\n  const email = newEmployee.email.trim();\n  const dep = (newEmployee.department ?? \"\").trim();\n\n  if (!name || !email || !dep) {\n    toast.error(\"Täytä kaikki pakolliset kentät\");\n    return;\n  }\n  if (dep.toLowerCase() === \"uusi osasto\") {\n    toast.error(\"Kirjoita osaston nimi.\");\n    return;\n  }\n\n  const { data, error } = await supabase\n    .from(\"employees\")\n    .insert([{\n      name,\n      email,\n      department: dep,\n      is_active: newEmployee.isActive,\n    }])\n    .select(\"id, name, email, department, is_active, created_at\")\n    .single();\n\n    if (error) {\n      console.error(error);\n      toast.error(\"Lisäys epäonnistui\");\n      return;\n    }\n\n    const added: Employee = {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      department: data.department,\n      isActive: !!data.is_active,\n      shifts: [],\n    };\n\n    setEmployees((prev) => [...prev, added]);\n    setNewEmployee({ name: \"\", email: \"\", department: \"\", isActive: true });\n    setIsAddDialogOpen(false);\n    toast.success(`${added.name} lisätty`);\n      \n\n    await supabase.from(\"notifications\").insert({\n      type: \"employee_added\",\n      title: \"Uusi työntekijä lisätty\",\n      message: `${added.name} (${added.department}) lisättiin työntekijälistaan.`,\n    });\n  }\n\n  // 3) POISTO\n  async function handleDeleteEmployee(employeeId: string) {\n    const target = employees.find((e) => e.id === employeeId);\n    const { error } = await supabase.from(\"employees\").delete().eq(\"id\", employeeId);\n    if (error) {\n      console.error(error);\n      toast.error(\"Poisto epäonnistui\");\n      return;\n    }\n    setEmployees((prev) => prev.filter((e) => e.id !== employeeId));\n    toast.success(`${target?.name ?? \"Työntekijä\"} poistettu`);\n  }\n\n  // 4) AKTIIVINEN/EPÄAKTIIVINEN toggle\n  async function handleToggleActive(employeeId: string) {\n    const current = employees.find((e) => e.id === employeeId);\n    if (!current) return;\n\n    const nextActive = !current.isActive;\n    // Optimistic update\n    setEmployees((prev) =>\n      prev.map((e) => (e.id === employeeId ? { ...e, isActive: nextActive } : e))\n    );\n\n    const { error } = await supabase\n      .from(\"employees\")\n      .update({ is_active: nextActive })\n      .eq(\"id\", employeeId);\n\n    if (error) {\n      console.error(error);\n      // Revertoi jos meni pieleen\n      setEmployees((prev) =>\n        prev.map((e) => (e.id === employeeId ? { ...e, isActive: !nextActive } : e))\n      );\n      toast.error(\"Tilan muutos epäonnistui\");\n      return;\n    }\n\n    toast.success(`${current.name} ${nextActive ? \"aktivoitu\" : \"deaktivoitu\"}`);\n  }\n\n  // 5) EDIT / UPDATE\n  function handleEditEmployee(employee: Employee) {\n    setSelectedEmployee(employee);\n  }\n\n  async function handleUpdateEmployee() {\n    if (!selectedEmployee) return;\n\n    const { error } = await supabase\n      .from(\"employees\")\n      .update({\n        name: selectedEmployee.name,\n        email: selectedEmployee.email,\n        department: selectedEmployee.department,\n        is_active: selectedEmployee.isActive,\n      })\n      .eq(\"id\", selectedEmployee.id);\n\n    if (error) {\n      console.error(error);\n      toast.error(\"Päivitys epäonnistui\");\n      return;\n    }\n\n    setEmployees((prev) =>\n      prev.map((e) => (e.id === selectedEmployee.id ? selectedEmployee : e))\n    );\n    setSelectedEmployee(null);\n    toast.success(\"Työntekijätiedot päivitetty\");\n  }\n\n  // Johdetut arvot (kuten ennen)\n  const filteredEmployees = useMemo(() => {\n    const q = searchTerm.toLowerCase();\n    return employees.filter(\n      (e) =>\n        e.name.toLowerCase().includes(q) ||\n        e.email.toLowerCase().includes(q) ||\n        e.department.toLowerCase().includes(q)\n    );\n  }, [employees, searchTerm]);\n\n  const activeEmployees = employees.filter((e) => e.isActive).length;\nconst departments = useMemo(\n  () =>\n    [...new Set(\n      employees\n        .map(e => (e.department ?? \"\").trim())\n        .filter(v => v && v.toLowerCase() !== \"uusi osasto\")\n    )].sort((a, b) => a.localeCompare(b, \"fi\")),\n  [employees]\n);\n\n\n  // —— UI alla: pidetään sun alkuperäinen rakenne ——\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"shadow-lg border-0 bg-gradient-to-r from-background to-secondary/20\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Users className=\"w-6 h-6 text-primary\" />\n              <CardTitle className=\"text-xl text-primary\">Työntekijähallinta</CardTitle>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"secondary\" className=\"px-3 py-1\">\n                <UserCheck className=\"w-4 h-4 mr-2\" />\n                {activeEmployees} aktiivista\n              </Badge>\n\n              <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n                <DialogTrigger asChild>\n                  <div\n                    className=\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2 cursor-pointer\"\n                    onClick={() => setIsAddDialogOpen(true)}\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Lisää työntekijä\n                  </div>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Lisää uusi työntekijä</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"name\">Nimi *</Label>\n                      <Input\n                        id=\"name\"\n                        value={newEmployee.name}\n                        onChange={(e) =>\n                          setNewEmployee((p) => ({ ...p, name: e.target.value }))\n                        }\n                        placeholder=\"Etunimi Sukunimi\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Sähköposti *</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={newEmployee.email}\n                        onChange={(e) =>\n                          setNewEmployee((p) => ({ ...p, email: e.target.value }))\n                        }\n                        placeholder=\"etunimi.sukunimi@company.com\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"department\">Osasto *</Label>\n                      <Select\n  value={\n    creatingNewDept\n      ? \"NEW_DEPT\"\n      : (newEmployee.department || \"\")\n  }\n  onValueChange={(value) => {\n    if (value === \"NEW_DEPT\") {\n      setCreatingNewDept(true);\n      setCustomDepartment(\"\");\n      setNewEmployee(p => ({ ...p, department: \"\" })); // puhdas aloitus\n    } else {\n      setCreatingNewDept(false);\n      setCustomDepartment(\"\");\n      setNewEmployee(p => ({ ...p, department: value }));\n    }\n  }}\n>\n  <SelectTrigger>\n    <SelectValue placeholder=\"Valitse osasto\" />\n  </SelectTrigger>\n  <SelectContent>\n    {departments.map((dept) => (\n      <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n    ))}\n    <SelectItem value=\"NEW_DEPT\">+ Uusi osasto…</SelectItem>\n  </SelectContent>\n</Select>\n\n{creatingNewDept && (\n  <Input\n    placeholder=\"Kirjoita uusi osasto…\"\n    className=\"mt-2\"\n    value={customDepartment}\n    onChange={(e) => {\n      const v = e.target.value;\n      setCustomDepartment(v);\n      setNewEmployee(p => ({ ...p, department: v })); // päivitetään arvo, mutta ei piiloteta inputtia\n    }}\n  />\n)}\n\n\n\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"active\"\n                        checked={newEmployee.isActive}\n                        onCheckedChange={(checked) =>\n                          setNewEmployee((p) => ({ ...p, isActive: checked }))\n                        }\n                      />\n                      <Label htmlFor=\"active\">Aktiivinen työntekijä</Label>\n                    </div>\n                    <div className=\"flex gap-2 pt-4\">\n                      <Button onClick={handleAddEmployee} className=\"flex-1\" disabled={loading}>\n                        Lisää työntekijä\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setIsAddDialogOpen(false)}\n                        className=\"flex-1\"\n                      >\n                        Peruuta\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-4\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              placeholder=\"Hae työntekijöitä nimellä, sähköpostilla tai osastolla...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Employee List */}\n          <div className=\"space-y-3\">\n            {loading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">Ladataan…</div>\n            ) : (\n              filteredEmployees.map((employee) => (\n                <div\n                  key={employee.id}\n                  className=\"border border-border rounded-lg p-4 bg-background hover:shadow-md transition-shadow\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"w-12 h-12\">\n                        <AvatarFallback\n                          className={`${\n                            employee.isActive\n                              ? \"bg-primary text-primary-foreground\"\n                              : \"bg-muted text-muted-foreground\"\n                          }`}\n                        >\n                          {employee.name\n                            .split(\" \")\n                            .map((n) => n[0])\n                            .join(\"\")}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <h4 className=\"font-medium\">{employee.name}</h4>\n                          {employee.isActive ? (\n                            <Badge\n                              variant=\"outline\"\n                              className=\"bg-green-50 text-green-700 border-green-300\"\n                            >\n                              <UserCheck className=\"w-3 h-3 mr-1\" />\n                              Aktiivinen\n                            </Badge>\n                          ) : (\n                            <Badge\n                              variant=\"outline\"\n                              className=\"bg-gray-50 text-gray-700 border-gray-300\"\n                            >\n                              <UserX className=\"w-3 h-3 mr-1\" />\n                              Ei-aktiivinen\n                            </Badge>\n                          )}\n                        </div>\n                        <div className=\"space-y-1 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center gap-2\">\n                            <Mail className=\"w-4 h-4\" />\n                            <span>{employee.email}</span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Building className=\"w-4 h-4\" />\n                            <span>{employee.department}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Label htmlFor={`toggle-${employee.id}`} className=\"text-sm text-muted-foreground\">\n                          Aktiivinen\n                        </Label>\n                        <Switch\n                          id={`toggle-${employee.id}`}\n                          checked={employee.isActive}\n                          onCheckedChange={() => handleToggleActive(employee.id)}\n                        />\n                      </div>\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEditEmployee(employee)}>\n                        <Edit3 className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDeleteEmployee(employee.id)}\n                        className=\"text-destructive hover:text-destructive\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n\n          {!loading && filteredEmployees.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Users className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n              <p>Ei työntekijöitä hakukriteereillä</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Employee Dialog */}\n      <Dialog open={!!selectedEmployee} onOpenChange={() => setSelectedEmployee(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Muokkaa työntekijää</DialogTitle>\n          </DialogHeader>\n          {selectedEmployee && (\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-name\">Nimi</Label>\n                <Input\n                  id=\"edit-name\"\n                  value={selectedEmployee.name}\n                  onChange={(e) =>\n                    setSelectedEmployee((p) => (p ? { ...p, name: e.target.value } : p))\n                  }\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-email\">Sähköposti</Label>\n                <Input\n                  id=\"edit-email\"\n                  type=\"email\"\n                  value={selectedEmployee.email}\n                  onChange={(e) =>\n                    setSelectedEmployee((p) => (p ? { ...p, email: e.target.value } : p))\n                  }\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-department\">Osasto</Label>\n\n<Select\n  value={\n    editCreatingNewDept\n      ? \"NEW_DEPT\"\n      : (selectedEmployee?.department || \"\")\n  }\n  onValueChange={(value) => {\n    if (!selectedEmployee) return;\n    if (value === \"NEW_DEPT\") {\n      setEditCreatingNewDept(true);\n      setEditCustomDepartment(\"\");\n      setSelectedEmployee(p => p ? { ...p, department: \"\" } : p);\n    } else {\n      setEditCreatingNewDept(false);\n      setEditCustomDepartment(\"\");\n      setSelectedEmployee(p => p ? { ...p, department: value } : p);\n    }\n  }}\n>\n  <SelectTrigger>\n    <SelectValue placeholder=\"Valitse osasto\" />\n  </SelectTrigger>\n  <SelectContent>\n    {departments.map((dept) => (\n      <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n    ))}\n    <SelectItem value=\"NEW_DEPT\">+ Uusi osasto…</SelectItem>\n  </SelectContent>\n</Select>\n\n{editCreatingNewDept && (\n  <Input\n    placeholder=\"Kirjoita uusi osasto…\"\n    className=\"mt-2\"\n    value={editCustomDepartment}\n    onChange={(e) => {\n      const v = e.target.value;\n      setEditCustomDepartment(v);\n      setSelectedEmployee(p => p ? { ...p, department: v } : p);\n    }}\n  />\n)}\n\n\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"edit-active\"\n                  checked={selectedEmployee.isActive}\n                  onCheckedChange={(checked) =>\n                    setSelectedEmployee((p) => (p ? { ...p, isActive: checked } : p))\n                  }\n                />\n                <Label htmlFor=\"edit-active\">Aktiivinen työntekijä</Label>\n              </div>\n              <div className=\"flex gap-2 pt-4\">\n                <Button onClick={handleUpdateEmployee} className=\"flex-1\">\n                  Tallenna muutokset\n                </Button>\n                <Button variant=\"outline\" onClick={() => setSelectedEmployee(null)} className=\"flex-1\">\n                  Peruuta\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Department Statistics */}\n      <Card className=\"shadow-md\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Osastotilastot</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {useMemo(() => {\n              const depts = [...new Set(employees.map((e) => e.department))];\n              return depts.map((department) => {\n                const deptEmployees = employees.filter((e) => e.department === department);\n                const activeDeptEmployees = deptEmployees.filter((e) => e.isActive);\n                return (\n                  <div key={department} className=\"text-center p-3 border border-border rounded-lg\">\n                    <h4 className=\"font-medium mb-2\">{department}</h4>\n                    <div className=\"text-2xl font-bold text-primary\">{activeDeptEmployees.length}</div>\n                    <div className=\"text-xs text-muted-foreground\">{deptEmployees.length} yhteensä</div>\n                  </div>\n                );\n              });\n            }, [employees])}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default EmployeeList;\n",
        "byteOffset": 0,
        "totalChunks": 1,
        "hasMore": false,
        "startLine": 1,
        "endLine": 616
      }
    ]
  },
  {
    "path": "src/app/components/Toolbar.tsx",
    "size": 32064,
    "sha256": "cfea0914be5a2ae6d9493642cd4389841b4d5783a16dcaafabf1bd0af7319f8f",
    "lang": "tsx",
    "lines": 938,
    "modifiedAt": "2025-09-02T01:28:28+03:00",
    "commitSha": "29d28ab09b16112f6f64a83fb43e1143e63a0ed0",
    "rawUrl": "https://raw.githubusercontent.com/serlaoravainen/tuukka-chat-exports/main/files/src/app/components/Toolbar.tsx",
    "chunks": [
      {
        "i": 0,
        "text": "\"use client\";\n\nimport { useScheduleStore } from \"@/store/useScheduleStore\";\nimport React, { useMemo, useRef, useState, useEffect } from \"react\";\nimport { Button } from \"./ui/button\";\nimport { Card, CardContent } from \"./ui/card\";\nimport { Checkbox } from \"./ui/checkbox\";\nimport { Badge } from \"./ui/badge\";\nimport { Separator } from \"./ui/separator\";\nimport NotificationsPopover from \"./ui/NotificationsPopover\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"./ui/popover\";\nimport SettingsDialog from \"./SettingsDialog\";\nimport { useSettingsStore } from \"@/store/useSettingsStore\";\nimport {\n  Upload,\n  RefreshCw,\n  Calendar as CalIcon,\n  FileSpreadsheet,\n  FileText,\n  Wand2,\n  Save,\n  Undo,\n  Redo,\n  Filter,\n  Search,\n  Check,\n  ChevronDown,\n  X,\n  Building,\n  Users\n} from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/lib/supaBaseClient\";\nimport { addDaysLocalISO } from \"@/lib/dateUtils\";\n\n\n// ——— Valikoiva, tyypitetty poiminta hashydrate-funktiolle ilman anyä ———\ntype HashydrateFn = (() => void) | undefined;\nconst selectHashydrate = <T extends object>(s: T): HashydrateFn =>\n  (s as unknown as { hashydrate?: () => void }).hashydrate;\n\n\n\n\nfunction formatTime(d = new Date()) {\n  return d.toLocaleTimeString(\"fi-FI\", { hour: \"2-digit\", minute: \"2-digit\" });\n}\n\n\n  function getISOWeek(dateIso: string) {\n  const d = new Date(dateIso + \"T00:00:00\");\n  // ISO week algorithm\n  const dayNum = (d.getUTCDay() + 6) % 7;\n  d.setUTCDate(d.getUTCDate() - dayNum + 3);\n  const firstThursday = new Date(Date.UTC(d.getUTCFullYear(), 0, 4));\n  const week =\n    1 +\n    Math.round(\n      ((d.getTime() - firstThursday.getTime()) / 86400000 - 3 + ((firstThursday.getUTCDay() + 6) % 7)) /\n        7\n    );\n  return week;\n}\n\n\ntype EmpRow = {\n  id: string;\n  name: string;\n  email: string;\n  department: string;\n  is_active: boolean;\n};\n\ntype ShiftRow = {\n  employee_id: string;\n  work_date: string;\n  type: \"normal\" | \"locked\" | \"absent\" | \"holiday\";\n  hours: number | null;\n};\n\nconst Toolbar = () => {\n\n  const [isClient, setIsClient] = useState(false);\n  useEffect(() => { setIsClient(true); }, []);\n\n  const START_ISO = useScheduleStore((s) => s.startDateISO);\n  const DAYS = useScheduleStore((s) => s.days);\n\n\n   const defaultHours = useSettingsStore((s) => s.settings.autoGeneration.defaultHours);\n   const hashydrateSettings = useSettingsStore(selectHashydrate);\n   const hashydrateSchedule = useScheduleStore(selectHashydrate);\n\n  useEffect(() => {\n    // Aja heti mountissa ja aina hashin vaihtuessa.\n    // Järjestys: ensin asetukset -> sitten aikataulu.\n    const run = () => {\n      try { hashydrateSettings?.(); } catch {}\n      try { hashydrateSchedule?.(); } catch {}\n    };\n    run();\n    window.addEventListener(\"hashchange\", run);\n    return () => window.removeEventListener(\"hashchange\", run);\n  }, [hashydrateSettings, hashydrateSchedule]);\n\n\n\n  const range = useMemo(\n  () => Array.from({ length: DAYS }, (_, i) => addDaysLocalISO(START_ISO, i)),\n  [START_ISO, DAYS]\n);\n\n\n\nconst undo = useScheduleStore((s) => s.undo);\nconst redo = useScheduleStore((s) => s.redo);\nconst canUndo = useScheduleStore((s) => s.undoStack.length > 0);\nconst canRedo = useScheduleStore((s) => s.redoStack.length > 0);\n\nconst saveAll = useScheduleStore((s) => s.saveAll);\nconst dirty = useScheduleStore((s) => s.dirty);\n\nasync function handleSave() {\n  await saveAll();\n}\n\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [lastSavedAt, setLastSavedAt] = useState<string | null>(null);\n  const [empCount, setEmpCount] = useState<number | null>(null);\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // ————— data hakuja joita export/healthcheck/auto-gen käyttää —————\n  // Yleinen hakufunktio: includeInactive=true -> ei suodateta is_active:lla\n  async function fetchEmployees(includeInactive: boolean): Promise<EmpRow[]> {\n    let q = supabase\n      .from(\"employees\")\n      .select(\"id, name, email, department, is_active\")\n      .order(\"created_at\", { ascending: true });\n    if (!includeInactive) q = q.eq(\"is_active\", true);\n    const { data, error } = await q;\n    if (error) throw error;\n    const rows = (data ?? []) as EmpRow[];\n    setEmpCount(rows.length);\n    return rows;\n  }\n  // Säilytetään vanha signatuuri muulle koodille (auto-gen, import, PDF…)\n async function fetchActiveEmployees(): Promise<EmpRow[]> {\n    return fetchEmployees(false);\n  }\n\n  async function fetchShiftsByRange(empIds?: string[]): Promise<ShiftRow[]> {\n    const start = range[0];\n    const end = range[range.length - 1];\n    let q = supabase\n      .from(\"shifts\")\n      .select(\"employee_id, work_date, type, hours\")\n      .gte(\"work_date\", start)\n      .lte(\"work_date\", end);\n\n    if (empIds && empIds.length) q = q.in(\"employee_id\", empIds);\n\n    const { data, error } = await q;\n    if (error) throw error;\n    return (data ?? []) as ShiftRow[];\n  }\n\n  type AbsenceRow = {\n  employee_id: string;\n  start_date: string;             // YYYY-MM-DD\n  end_date: string | null;        // voi olla null → käytä start_datea\n  status: \"pending\" | \"approved\" | \"declined\";\n};\n\nasync function fetchAbsencesByRange(empIds: string[]): Promise<AbsenceRow[]> {\n  const { data, error } = await supabase\n    .from(\"absences\")\n    .select(\"employee_id, start_date, end_date, status\")\n    .in(\"employee_id\", empIds)\n    .neq(\"status\", \"declined\"); // vain pending/approved blokkaa\n\n  if (error) throw error;\n  const rows = (data ?? []) as AbsenceRow[];\n\n  // Pidä vain poissaolot, jotka osuvat johonkin RANGE-päivään\n  return rows.filter((r) => {\n    const s = r.start_date;\n    const e = r.end_date ?? s;\n    return range.some((day) => day >= s && day <= e);\n  });\n}\n\n\n  // ————— ACTIONS —————\n\n  // 1) Auto-generointi — täyttää puuttuvat vuorot 8h normaaliksi, jos ei poissaoloa\n  const handleAutoGenerate = async () => {\n    setIsGenerating(true);\n    try {\n      toast.info(\"Aloitetaan automaattinen vuorojen generointi…\");\n\n      const employees = await fetchActiveEmployees();\n      if (!employees.length) {\n        toast.info(\"Ei aktiivisia työntekijöitä.\");\n        return;\n      }\n      const empIds = employees.map((e) => e.id);\n      const [existing, absences] = await Promise.all([\n        fetchShiftsByRange(empIds),\n        fetchAbsencesByRange(empIds),\n      ]);\n\n      // Map helpot tarkistukset\n      const existingSet = new Set(existing.map((s) => `${s.employee_id}|${s.work_date}`));\n      const absenceMap = new Map<string, { s: string; e: string }[]>();\n      absences.forEach((a: { employee_id: string; start_date: string; end_date?: string | null }) => {\n        const arr = absenceMap.get(a.employee_id) ?? [];\n        arr.push({ s: a.start_date, e: a.end_date ?? a.start_date });\n        absenceMap.set(a.employee_id, arr);\n      });\n\n      const batch: ShiftRow[] = [];\n      for (const emp of employees) {\n        for (const d of range) {\n          const key = `${emp.id}|${d}`;\n          if (existingSet.has(key)) continue; // älä koske olemassaolevaan\n\n          // jos poissaolo kattaa päivän, skippaa\n          const ranges = absenceMap.get(emp.id) ?? [];\n          const blocked = ranges.some((r) => d >= r.s && d <= r.e);\n          if (blocked) continue;\n\n          batch.push({\n            employee_id: emp.id,\n            work_date: d,\n            type: \"normal\",\n            hours: defaultHours,\n          });\n        }\n      }\n\n      if (!batch.length) {\n        toast.info(\"Ei täytettäviä tyhjiä soluja tälle jaksolle.\");\n        return;\n      }\n\n      const { error } = await supabase\n        .from(\"shifts\")\n        .upsert(batch, { onConflict: \"employee_id,work_date\" });\n\n      if (error) throw error;\n\n      setLastSavedAt(formatTime());\n      toast.success(`Generoitu ${batch.length} vuoroa.`);\n      // Kirjaa ilmoitus\nawait supabase.from(\"notifications\").insert({\n  type: \"shift_auto\",\n  title: \"Vuorot generoitu\",\n  message: `Generoitu ${batch.length} vuoroa jaksolle ${range[0]} – ${range[range.length - 1]}.`\n});\n   } catch (e) {\n  console.error(e);\n  toast.error(\"Generointi epäonnistui\");\n} finally {\n      setIsGenerating(false);\n    }\n  };\n\n\n  // 3) Export CSV (Excel avaa suoraan)\n  const exportSettings = useSettingsStore((s) => s.settings.export);\n\n\n  const handleExportExcel = async () => {\n    try {\n      // Hae työntekijät asetuksen mukaan (mukaan myös ei-aktiiviset tarvittaessa)\n      const employees = await fetchEmployees(!!exportSettings.includeInactiveEmployees);\n      const empIds = employees.map((e) => e.id);\n      const shifts = await fetchShiftsByRange(empIds);\n      const byId = new Map(employees.map((e) => [e.id, e]));\n\n      // Dynaaminen header asetusten mukaan\n      const header: string[] = [];\n      if (exportSettings.includeNames) header.push(\"employee_name\");\n      if (exportSettings.includeEmails) header.push(\"employee_email\");\n      if (exportSettings.includeDepartments) header.push(\"department\");\n      header.push(\"work_date\", \"type\", \"hours\");\n\n      // Nopeaan lookupiin\n      const shiftMap = new Map<string, ShiftRow>(); // empId|date -> shift\n      shifts.forEach((s) => shiftMap.set(`${s.employee_id}|${s.work_date}`, s));\n\n      // Apuri: muodosta yksi rivi\n      const makeRow = (emp: EmpRow, date: string, s?: ShiftRow): (string | number)[] => {\n        const row: (string | number)[] = [];\n        if (exportSettings.includeNames) row.push(emp?.name ?? \"\");\n        if (exportSettings.includeEmails) row.push(emp?.email ?? \"\");\n        if (exportSettings.includeDepartments) row.push(emp?.department ?? \"\");\n        row.push(date, s?.type ?? \"\", s?.hours ?? 0);\n        return row;\n      };\n\n      // Rivit: includeEmptyShifts = jokaisesta päivästä rivi, muuten vain olemassa olevat\n      const rows: (string | number)[][] = [];\n      if (exportSettings.includeEmptyShifts) {\n        for (const emp of employees) {\n          for (const d of range) {\n            rows.push(makeRow(emp, d, shiftMap.get(`${emp.id}|${d}`)));\n          }\n        }\n      } else {\n        shifts\n          .sort((a, b) => (a.work_date < b.work_date ? -1 : a.work_date > b.work_date ? 1 : 0))\n          .forEach((s) => rows.push(makeRow(byId.get(s.employee_id)!, s.work_date, s)));\n      }\n\n      let csv = [header, ...rows]\n        .map((r) => r.map((v) => `\"${String(v).replace(/\"/g, '\"\"')}\"`).join(\",\"))\n        .join(\"\\n\");\n\n        // Lisätty: tuntisummat loppuun, jos asetus päällä\n      if (exportSettings.includeHourTotals) {\n        const totals = new Map<string, number>(); // empId -> total hours\n        for (const emp of employees) totals.set(emp.id, 0);\n        for (const s of shifts) totals.set(s.employee_id, (totals.get(s.employee_id) ?? 0) + (s.hours ?? 0));\n        const totalsRows = Array.from(totals.entries()).map(([empId, sum]) => {\n          const emp = byId.get(empId)!;\n          // label: nimi > email > id\n          const label =\n            exportSettings.includeNames ? emp.name :\n            exportSettings.includeEmails ? emp.email : emp.id;\n          return [label, String(sum)];\n        });\n        const totalsCsv =\n          \"\\n\\n\" +\n          [\"employee\", \"total_hours\"].join(\",\") +\n          \"\\n\" +\n          totalsRows.map((r) => r.map((v) => `\"${String(v).replace(/\"/g, '\"\"')}\"`).join(\",\")).join(\"\\n\");\n        csv += totalsCsv;\n      }\n\n      const blob = new Blob([csv], { type: \"text/csv;charset=utf-8\" });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n        // Tiedostonimeen yrityksen nimi\n      const company = (exportSettings.companyName || \"vuorot\")\n        .replace(/[^\\p{L}\\p{N}_-]+/gu, \"_\")\n        .replace(/_{2,}/g, \"_\")\n        .replace(/^_|_$/g, \"\");\n      a.download = `${company}_${range[0]}_${range[range.length - 1]}.csv`;\n      a.click();\n      URL.revokeObjectURL(url);\n      toast.success(\"CSV ladattu\");\n    } catch (e) {\n      console.error(e);\n      toast.error(\"CSV-vienti epäonnistui\");\n    }\n  };\n\n  // 4) Export PDF (MVP: tulostusystävällinen näkymä -> print)\n  const handleExportPDF = async () => {\n    try {\n      const employees = await fetchActiveEmployees();\n      const shifts = await fetchShiftsByRange(employees.map((e) => e.id));\n      const byId = new Map(employees.map((e) => [e.id, e]));\n\n      const win = window.open(\"\", \"_blank\", \"width=1024,height=768\");\n      if (!win) {\n        toast.error(\"Ponnahdusikkuna estetty\");\n        return;\n      }\n      const style = `\n        <style>\n          body { font-family: ui-sans-serif, system-ui, -apple-system; padding: 24px; }\n          h1,h2 { margin: 0 0 8px; }\n          table { width: 100%; border-collapse: collapse; font-size: 12px; }\n          th, td { border: 1px solid #ddd; padding: 6px 8px; text-align: left; }\n          th { background: #f3f4f6; }\n          .muted { color: #6b7280; font-size: 12px; margin-bottom: 12px; }\n        </style>`;\n      const header = `<h1>Vuorolistat</h1>\n        <div class=\"muted\">${range[0]} – ${range[range.length - 1]} • ${employees.length} työntekijää</div>`;\n\n      const rowsHtml = shifts\n        .sort((a, b) =>\n          a.employee_id === b.employee_id\n            ? a.work_date.localeCompare(b.work_date)\n            : a.employee_id.localeCompare(b.employee_id)\n        )\n        .map((s) => {\n          const e = byId.get(s.employee_id)!;\n          return `<tr>\n            <td>${e?.name ?? \"\"}</td>\n            <td>${e?.email ?? \"\"}</td>\n            <td>${e?.department ?? \"\"}</td>\n            <td>${s.work_date}</td>\n            <td>${s.type}</td>\n            <td>${s.hours ?? 0}</td>\n          </tr>`;\n        })\n        .join(\"\");\n\n      win.document.write(`\n        <!doctype html><html><head><meta charset=\"utf-8\" />\n        <title>Vuorot</title>${style}</head><body>\n          ${header}\n          <table>\n            <thead><tr>\n              <th>Nimi</th><th>Sähköposti</th><th>Osasto</th>\n              <th>Pvm</th><th>Tyyppi</th><th>Tunnit</th>\n            </tr></thead>\n            <tbody>${rowsHtml}</tbody>\n          </table>\n          <script>window.print();</script>\n        </body></html>\n      `);\n      win.document.close();\n    } catch (e) {\n      console.error(e);\n      toast.error(\"PDF-vienti epäonnistui\");\n    }\n  };\n\n  // 5) Import CSV (email,work_date,hours)\n  const handleImport = () => fileInputRef.current?.click();\n\n  const onImportFile = async (file: File) => {\n    try {\n      const text = await file.text();\n      // Odotettu header: email,work_date,hours\n      const lines = text\n        .split(/\\r?\\n/)\n        .map((l) => l.trim())\n        .filter(Boolean);\n      if (!lines.length) {\n        toast.error(\"Tyhjä tiedosto\");\n        return;\n      }\n\n      const header = lines[0].split(\",\").map((s) => s.trim().toLowerCase());\n      const emailIdx = header.indexOf(\"email\");\n      const dateIdx = header.indexOf(\"work_date\");\n      const hoursIdx = header.indexOf(\"hours\");\n      if (emailIdx === -1 || dateIdx === -1 || hoursIdx === -1) {\n        toast.error('Odotettu header: \"email,work_date,hours\"');\n        return;\n      }\n\n      const employees = await fetchActiveEmployees();\n      const byEmail = new Map(employees.map((e) => [e.email.toLowerCase(), e]));\n\n      const bad: string[] = [];\n      const batch: ShiftRow[] = [];\n      for (let i = 1; i < lines.length; i++) {\n        const cols = lines[i].split(\",\").map((s) => s.trim().replace(/^\"|\"$/g, \"\"));\n        if (cols.length < 3) continue;\n        const email = cols[emailIdx].toLowerCase();\n        const d = cols[dateIdx];\n        const h = parseFloat(cols[hoursIdx]);\n        if (!email || !d || isNaN(h)) continue;\n        const emp = byEmail.get(email);\n        if (!emp) {\n          bad.push(lines[i]);\n          continue;\n        }\n        batch.push({\n          employee_id: emp.id,\n          work_date: d,\n          type: h > 0 ? \"normal\" : \"normal\",\n          hours: h > 0 ? h : 0,\n        });\n      }\n\n      if (!batch.length) {\n        toast.error(\"Ei kelvollisia rivejä importissa\");\n        return;\n      }\n\n      const { error } = await supabase\n        .from(\"shifts\")\n        .upsert(batch, { onConflict: \"employee_id,work_date\" });\n      if (error) throw error;\n\n      setLastSavedAt(formatTime());\n      if (bad.length) {\n        toast.warning(\n          `Import OK (${batch.length} riviä). ${bad.length} riviä jäi väliin tuntemattoman emailin takia.`\n        );\n      } else {\n        toast.success(`Import OK (${batch.length} riviä).`);\n      }\n    } catch (e) {\n      console.error(e);\n      toast.error(\"Import epäonnistui\");\n    } finally {\n      if (fileInputRef.current) fileInputRef.current.value = \"\";\n    }\n  };\n\n  // ————— UI —————\n  const weekNo = useMemo(() => getISOWeek(START_ISO), [START_ISO]);\n  const year = useMemo(() => new Date(START_ISO + \"T00:00:00\").getFullYear(), [START_ISO]);\n\n  return (\n    <Card className=\"shadow-md border-0 bg-gradient-to-r from-background to-secondary/10\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex flex-wrap items-center gap-3 justify-between\">\n          {/* Left Section - Main Actions */}\n          <div className=\"flex items-center gap-2\">\n            <Button\n              onClick={handleAutoGenerate}\n              disabled={isGenerating}\n              className=\"bg-primary hover:bg-primary/90\"\n            >\n              {isGenerating ? (\n                <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n              ) : (\n                <Wand2 className=\"w-4 h-4 mr-2\" />\n              )}\n              {isGenerating ? \"Generoidaan...\" : \"Auto-generointi\"}\n            </Button>\n\n            <Separator orientation=\"vertical\" className=\"h-8\" />\n\n<Button\n  variant=\"outline\"\n  onClick={handleSave}\n  disabled={!dirty}\n  className={dirty ? \"border-amber-500 text-amber-600\" : \"\"}\n>\n  <Save className=\"w-4 h-4 mr-2\" />\n  Tallenna\n  {dirty && (\n    <Badge variant=\"secondary\" className=\"ml-2 bg-amber-100 text-amber-700\">\n      •\n    </Badge>\n  )}\n</Button>\n\n\n<div className=\"flex items-center gap-1\">\n  <Button variant=\"ghost\" size=\"sm\" onClick={undo} disabled={!canUndo}>\n    <Undo className=\"w-4 h-4\" />\n  </Button>\n  <Button variant=\"ghost\" size=\"sm\" onClick={redo} disabled={!canRedo}>\n    <Redo className=\"w-4 h-4\" />\n  </Button>\n</div>\n          </div>\n\n    {/* Center Section - View Options */}\n<div className=\"flex items-center gap-2\">\n  <SearchPopover />  {/* 🆕 oikea haku */}\n  <FilterPopover />\n  {/* Aikajakson valitsin */}\n  <PeriodSelector />\n</div>\n\n\n\n          {/* Right Section - Export/Import */}\n          <div className=\"flex items-center gap-2\">\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\".csv,text/csv\"\n              className=\"hidden\"\n              onChange={(e) => {\n                const f = e.target.files?.[0];\n                if (f) onImportFile(f);\n              }}\n            />\n            <Button variant=\"outline\" onClick={handleImport}>\n              <Upload className=\"w-4 h-4 mr-2\" />\n              Tuo\n            </Button>\n\n            <div className=\"flex items-center gap-1\">\n              <Button variant=\"outline\" size=\"sm\" onClick={handleExportExcel}>\n                <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n                Excel\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={handleExportPDF}>\n                <FileText className=\"w-4 h-4 mr-2\" />\n                PDF\n              </Button>\n            </div>\n\n            <Separator orientation=\"vertical\" className=\"h-8\" />\n            <NotificationsPopover />\n\n\n          <SettingsDialog />\n          </div>\n        </div>\n\n        {/* Status Bar */}\n        <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-border/50\">\n          <div className=\"flex flex-wrap items-center gap-2 text-sm text-muted-foreground\">\n            <span>\n              Viimeksi tallennettu: {lastSavedAt ? lastSavedAt : \"—\"}\n            </span>\n            <span>•</span>\n            <span>{empCount ?? \"…\"} työntekijää</span>\n            <span>•</span>\n            <span>\n              Viikko {weekNo}/{year}\n            </span>\n            <span>•</span>\n            <span>\n              Jakso: {isClient && range.length > 0 ? `${range[0]} – ${range[range.length - 1]}` : \"—\"}\n            </span>\n          </div>\n          \n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// === PeriodSelector ===\ntype PeriodValue = 7 | 10 | 14 | 30;\ntype PeriodItem = { value: PeriodValue; label: string; description: string };\n\nconst PERIODS: PeriodItem[] = [\n  { value: 7,  label: \"7 päivää\",  description: \"Viikkonäkymä\" },\n  { value: 10, label: \"10 päivää\", description: \"Laajennettu\" },\n  { value: 14, label: \"14 päivää\", description: \"Kaksiviikkoinen\" },\n  { value: 30, label: \"30 päivää\", description: \"Kuukausinäkymä\" },\n];\n\nfunction PeriodSelector() {\n  const days = useScheduleStore((s) => s.days);\n  const startISO = useScheduleStore((s) => s.startDateISO);\n  const setRange = useScheduleStore((s) => s.setRange);\n\n\n  const current = PERIODS.find((p) => p.value === days) ?? PERIODS[1];\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" className=\"h-9 px-3 min-w-[160px] justify-start\">\n          <span className=\"inline-flex items-center gap-2\">\n            <CalIcon className=\"w-4 h-4\" />\n            <span>{current.label}</span>\n            <ChevronDown className=\"w-3 h-3\" />\n          </span>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-72 p-2\" align=\"center\">\n        <div className=\"px-2 py-1.5 text-sm font-medium text-muted-foreground\">\n          Valitse aikajakso\n        </div>\n        <div className=\"space-y-1\" role=\"menu\" aria-label=\"Aikajakso\">\n          {PERIODS.map((option) => {\n            const active = days === option.value;\n            return (\n              <button\n                key={option.value}\n                role=\"menuitemradio\"\n                aria-checked={active}\n                onClick={() => {\n  setRange(startISO, option.value); // ei alignointia täällä\n}}\n                className={`w-full flex items-center justify-between p-2 rounded-md text-left hover:bg-accent ${\n                  active ? \"bg-accent\" : \"\"\n                }`}\n              >\n                <div className=\"flex flex-col\">\n                  <span className=\"text-sm font-medium\">{option.label}</span>\n                  <span className=\"text-xs text-muted-foreground\">{option.description}</span>\n                </div>\n                <div className=\"flex items-center\">\n                  {active && <Check className=\"w-4 h-4 text-primary\" />}\n                </div>\n              </button>\n            );\n          })}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\n\n\n\nconst DEFAULT_FILTERS = {\n  departments: [] as string[],\n  showActive: false,\n  showInactive: false,\n  searchTerm: \"\", \n  };\n\nfunction FilterPopover() {\n  const [isOpen, setIsOpen] = useState(false);\n  const filters = useScheduleStore((s) => s.filters) ?? DEFAULT_FILTERS;\n  const setFilters = useScheduleStore((s) => s.setFilters) ?? (() => {});\n  const resetFilters = useScheduleStore((s) => s.resetFilters) ?? (() => {});\n\n const employeesFromStore = useScheduleStore((s) => s.employees);\nconst employees = useMemo(() => employeesFromStore ?? [], [employeesFromStore]);\n\nconst employeeDepartments = useMemo(\n  () => employees.map((e) => e.department),\n  [employees]\n);\n\nconst availableDepartments = useMemo(\n  () => Array.from(new Set(employeeDepartments)).filter(Boolean) as string[],\n  [employeeDepartments]\n);\n\n\n  // 2) Tila-suodatus on aktiivinen vain jos vain toinen toggle on päällä (XOR)\n  const stateFilterActive = filters.showActive !== filters.showInactive;\n\n  // 3) Badge: 1 piste osastofiltteristä (jos valittuja), 1 piste tila-XOR:sta\n  const activeFilterCount =\n    (filters.departments.length > 0 ? 1 : 0) +\n    (stateFilterActive ? 1 : 0);\n\n  const handleDepartmentToggle = (dept: string) => {\n    const exists = filters.departments.includes(dept);\n    setFilters({\n      departments: exists\n        ? filters.departments.filter((d) => d !== dept)\n        : [...filters.departments, dept],\n    });\n  };\n\n  const handleActiveToggle = () => setFilters({ showActive: !filters.showActive });\n  const handleInactiveToggle = () => setFilters({ showInactive: !filters.showInactive });\n\n  const handleClearFilters = () => {\n    resetFilters();\n    setIsOpen(false); // 4) UX: tyhjennä -> sulje\n  };\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <div\n          className={`\n            inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium\n            ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2\n            focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none\n            disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-9 px-3 cursor-pointer\n            ${activeFilterCount > 0 ? \"bg-primary text-primary-foreground hover:bg-primary/90\" : \"\"}\n          `}\n        >\n          <Filter className=\"w-4 h-4 mr-2\" />\n          Suodatin\n          {activeFilterCount > 0 && (\n            <Badge variant=\"secondary\" className=\"ml-2 bg-white text-primary text-xs\">\n              {activeFilterCount}\n            </Badge>\n          )}\n        </div>\n      </PopoverTrigger>\n\n      <PopoverContent className=\"w-80 p-4\" align=\"center\">\n        <div className=\"space-y-4\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-medium\">Suodattimet</h3>\n            {(filters.departments.length > 0 || stateFilterActive) && (\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleClearFilters} className=\"h-6 px-2 text-xs\">\n                <X className=\"w-3 h-3 mr-1\" />\n                Tyhjennä\n              </Button>\n            )}\n          </div>\n\n          <Separator />\n\n          {/* Department Filters */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <Building className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"font-medium text-sm\">Osastot</span>\n            </div>\n            <div className=\"space-y-2 pl-6\">\n              {availableDepartments.map((department) => (\n                <div key={department} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={`dept-${department}`}\n                    checked={filters.departments.includes(department)}\n                    onCheckedChange={() => handleDepartmentToggle(department)}\n                  />\n                  <label htmlFor={`dept-${department}`} className=\"text-sm cursor-pointer\">\n                    {department}\n                  </label>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Employee Status Filters */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <Users className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"font-medium text-sm\">Työntekijöiden tila</span>\n            </div>\n            <div className=\"space-y-2 pl-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox id=\"show-active\" checked={filters.showActive} onCheckedChange={handleActiveToggle} />\n                <label htmlFor=\"show-active\" className=\"text-sm cursor-pointer\">\n                  Näytä aktiiviset työntekijät\n                </label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox id=\"show-inactive\" checked={filters.showInactive} onCheckedChange={handleInactiveToggle} />\n                <label htmlFor=\"show-inactive\" className=\"text-sm cursor-pointer\">\n                  Näytä ei-aktiiviset työntekijät\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {/* Filter Summary */}\n          {(filters.departments.length > 0 || stateFilterActive) && (\n            <>\n              <Separator />\n              <div className=\"text-xs text-muted-foreground\">\n                {filters.departments.length > 0 && <div>Osastot: {filters.departments.join(\", \")}</div>}\n                {stateFilterActive && (\n                  <div>Tila: {filters.showActive ? \"Vain aktiiviset\" : \"Vain ei-aktiiviset\"}</div>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\n\n\nexport default Toolbar;\n\n\nfunction SearchPopover() {\n  const filters = useScheduleStore((s) => s.filters) ?? DEFAULT_FILTERS;\n  const setFilters = useScheduleStore((s) => s.setFilters);\n\n  const [open, setOpen] = useState(false);\n  const [localTerm, setLocalTerm] = useState(filters.searchTerm ?? \"\");\n  const debTimer = React.useRef<number | null>(null);\n\n  const handleSearchChange = (val: string) => {\n    setLocalTerm(val);\n    if (debTimer.current) window.clearTimeout(debTimer.current);\n    debTimer.current = window.setTimeout(() => {\n      setFilters({ searchTerm: val });\n    }, 200);\n  };\n\n  const clear = () => {\n    setLocalTerm(\"\");\n    setFilters({ searchTerm: \"\" });\n  };\n\nReact.useEffect(() => {\n  if (!open) return;\n  const onKey = (e: KeyboardEvent) => {\n    if (e.key === \"Escape\") {\n      setLocalTerm(\"\");\n      setFilters({ searchTerm: \"\" });\n    }\n  };\n  window.addEventListener(\"keydown\", onKey);\n  return () => window.removeEventListener(\"keydown\", onKey);\n}, [open, setFilters]);\n\n  const isActive = (filters.searchTerm ?? \"\").trim().length > 0;\n\n  return (\n      <Popover\n      open={open}\n      onOpenChange={(next) => {\n        setOpen(next);\n        if (next) setLocalTerm(filters.searchTerm ?? \"\");\n      }}\n    >\n      <PopoverTrigger asChild>\n        <Button variant={isActive ? \"default\" : \"ghost\"} size=\"sm\" className=\"h-9\">\n          <Search className=\"w-4 h-4 mr-2\" />\n          Haku\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-96 p-4\" align=\"center\">\n        <div className=\"space-y-3\">\n          <div className=\"text-base font-semibold\">Haku</div>\n          <div className=\"text-sm text-muted-foreground\">Etsi työntekijöitä</div>\n          <div className=\"relative\">\n           <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n           <input\n              className=\"w-full h-9 rounded-md border border-input bg-background px-3 pl-10 pr-10 text-sm outline-none focus:ring-2 focus:ring-ring\"\n              placeholder=\"Hae nimellä, sähköpostilla tai osastolla...\"\n              value={localTerm}\n              onChange={(e) => handleSearchChange(e.target.value)}\n              autoFocus\n            />\n            {localTerm && (\n              <button\n                type=\"button\"\n                aria-label=\"Tyhjennä haku\"\n                className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                onClick={clear}\n              >\n                <X className=\"w-4 h-4\" />\n              </button>\n            )}\n          </div>\n          <div className=\"text-xs text-muted-foreground\">\n            Haku toimii reaaliajassa ja etsii nimestä, sähköpostista ja osastosta\n          </div>\n          {isActive && (\n            <>\n              <Separator />\n              <div className=\"text-xs text-muted-foreground bg-accent/50 p-2 rounded-md\">\n                <Search className=\"w-3 h-3 inline mr-1\" />\n                Hakutermi: “{filters.searchTerm}”\n                <div className=\"mt-1\">Näytetään työntekijät jotka vastaavat hakua</div>\n              </div>\n            </>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}",
        "byteOffset": 0,
        "totalChunks": 1,
        "hasMore": false,
        "startLine": 1,
        "endLine": 938
      }
    ]
  }
]