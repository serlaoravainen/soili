name: DB Schema Dump

on:
  workflow_dispatch: {}

jobs:
  dump:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install pg_dump
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      # Robust: parsii URL:n, pakottaa IPv4:n, käyttää TLS:ää
      - name: Dump schema (parse URL + force IPv4 + TLS)
        env:
          DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          # Esim: postgresql://postgres:<PWD>@db.musrmpblsazxcrhwthtc.supabase.co:5432/postgres?sslmode=require
        run: |
          set -euo pipefail

          mkdir -p supabase

          # --- parse DB_URL turvallisesti Pythonilla ---
          read -r USER PASS HOST PORT DB SSL <<EOF
          $(python3 - <<'PY'
          import os, urllib.parse
          u=os.environ['DB_URL']
          p=urllib.parse.urlparse(u)
          q=dict(urllib.parse.parse_qsl(p.query))
          print(
            (urllib.parse.unquote_plus(p.username or "")) or "",
            (urllib.parse.unquote_plus(p.password or "")) or "",
            p.hostname or "",
            str(p.port or 5432),
            (p.path.lstrip("/") or "postgres"),
            (q.get("sslmode","require")),
          )
          PY
          )
          EOF

          if [ -z "$HOST" ] || [ -z "$USER" ] || [ -z "$DB" ]; then
            echo "FATAL: URL parse failed. Check SUPABASE_DB_URL secret."; exit 2
          fi

          # --- pakota IPv4 ---
          IP=$(getent ahostsv4 "$HOST" | awk '{print $1; exit}')
          if [ -z "${IP:-}" ]; then
            echo "FATAL: Could not resolve IPv4 for $HOST"; exit 2
          fi
          echo "Using IPv4: $IP"

          # --- libpq env: host SNI:lle, hostaddr IPv4:lle ---
          export PGHOST="$HOST"
          export PGHOSTADDR="$IP"
          export PGPORT="$PORT"
          export PGUSER="$USER"
          export PGPASSWORD="$PASS"
          export PGDATABASE="$DB"
          export PGSSLMODE="${SSL:-require}"

          # --- skeema vain, siivoa system-skeemat ---
          pg_dump -s -N extensions -N pg_catalog -N information_schema > supabase/schema.sql

          echo "---- schema.sql head ----"
          head -n 30 supabase/schema.sql || true

      - name: Commit dump
        run: |
          git config user.name "schema-bot"
          git config user.email "bot@example.com"
          git add supabase/schema.sql
          git commit -m "db: update schema.sql" || echo "No changes"
          git push
