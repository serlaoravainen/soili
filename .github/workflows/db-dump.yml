name: DB Schema Dump

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  dump:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Asenna nimenomaan Postgres 17 -clientit PGDG-reposta
      - name: Install PostgreSQL 17 client (psql/pg_dump)
        run: |
          set -euo pipefail
          echo "Adding PGDG repo…"
          source /etc/os-release
          echo "deb http://apt.postgresql.org/pub/repos/apt ${UBUNTU_CODENAME}-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list >/dev/null
          wget -qO- https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo tee /etc/apt/trusted.gpg.d/postgresql.asc >/dev/null
          sudo apt-get update
          sudo apt-get install -y postgresql-client-17
          /usr/lib/postgresql/17/bin/psql    --version
          /usr/lib/postgresql/17/bin/pg_dump --version

      - name: Dump schema via Session Pooler (IPv4 + TLS)
        env:
          DB_URL: ${{ secrets.SUPABASE_DB_URL }}  # esim: postgresql://postgres.<REF>:<PWD>@aws-1-eu-north-1.pooler.supabase.com:5432/postgres?sslmode=require
        run: |
          set -euo pipefail
          mkdir -p supabase

          if [ -z "${DB_URL:-}" ]; then
            echo "FATAL: SUPABASE_DB_URL puuttuu"; exit 2
          fi

          # Pakota TLS parametri varmuuden vuoksi
          URL_TLS="$DB_URL"
          case "$URL_TLS" in
            *sslmode=*) : ;;
            *\?*) URL_TLS="$URL_TLS&sslmode=require" ;;
            *)    URL_TLS="$URL_TLS?sslmode=require" ;;
          esac

          PSQL=/usr/lib/postgresql/17/bin/psql
          PGDUMP=/usr/lib/postgresql/17/bin/pg_dump

          echo "Testing connection with psql 17…"
          PGCONNECT_TIMEOUT=10 "$PSQL" -v ON_ERROR_STOP=1 -Atqc "select current_user, current_database();" "$URL_TLS"
          echo "Connection OK."

          echo "Dumping schema with pg_dump 17…"
          "$PGDUMP" \
            -s --no-owner --no-privileges \
            -N pg_catalog -N information_schema -N pg_toast -N extensions \
            "$URL_TLS" > supabase/schema.sql

          echo "---- schema.sql head ----"
          head -n 40 supabase/schema.sql || true
          echo "Schema dump OK ($(wc -l < supabase/schema.sql) riviä)."

      - name: Commit & push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.name "schema-bot"
          git config user.email "bot@example.com"
          git add supabase/schema.sql
          git commit -m "db: update schema.sql" || echo "No changes"
          git push
