name: DB Schema Dump

on:
  workflow_dispatch: {}

jobs:
  dump:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install pg_dump
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Dump schema (force IPv4 + TLS, no python)
        env:
          DB_URL: ${{ secrets.SUPABASE_DB_URL }} # esim. postgresql://postgres:<PWD>@db.musrmpblsazxcrhwthtc.supabase.co:5432/postgres
        run: |
          set -eo pipefail

          mkdir -p supabase

          # 0) Tarkista että secret on olemassa
          if [ -z "${DB_URL:-}" ]; then
            echo "FATAL: SUPABASE_DB_URL secret puuttuu"; exit 2
          fi

          # 1) IPv4 Supabase-hostille
          HOST="db.musrmpblsazxcrhwthtc.supabase.co"
          IP=$(getent ahostsv4 "$HOST" | awk '{print $1; exit}')
          if [ -z "${IP:-}" ]; then
            echo "FATAL: IPv4 lookup failed for $HOST"; exit 2
          fi
          echo "Using IPv4: $IP"

          # 2) Varmista TLS (lisää ?sslmode=require jos puuttuu)
          URL_TLS="$DB_URL"
          case "$URL_TLS" in
            *sslmode=*) : ;; # ok
            *\?*) URL_TLS="$URL_TLS&sslmode=require" ;;
            *)    URL_TLS="$URL_TLS?sslmode=require" ;;
          esac

          # 3) Korvaa hostname -> IPv4 (pakottaa IPv4; TLS ok koska emme käytä verify-full)
          URL_IPV4="${URL_TLS//$HOST/$IP}"

          # 4) Dump skeema-only, ilman system-skeemoja
          pg_dump -s -N extensions -N pg_catalog -N information_schema "$URL_IPV4" > supabase/schema.sql

          echo "---- schema.sql head ----"
          head -n 30 supabase/schema.sql || true

      - name: Commit dump
        run: |
          git config user.name "schema-bot"
          git config user.email "bot@example.com"
          git add supabase/schema.sql
          git commit -m "db: update schema.sql" || echo "No changes"
          git push
