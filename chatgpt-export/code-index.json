{
  "generatedAt": "2025-09-01T16:22:07.427Z",
  "root": "soili",
  "counts": {
    "files": 29,
    "bytes": 143611,
    "skipped": 0
  },
  "config": {
    "include": [
      "src/**/*",
      "app/**/*",
      "packages/**/*",
      "scripts/**/*"
    ],
    "exclude": [
      "**/node_modules/**",
      ".next/**",
      "dist/**",
      "build/**",
      "out/**",
      ".git/**",
      ".vercel/**",
      "coverage/**",
      "**/*.map",
      "**/*.min.*",
      "**/*.lock",
      "**/*.png",
      "**/*.jpg",
      "**/*.jpeg",
      "**/*.gif",
      "**/*.webp",
      "**/*.svg",
      "**/*.ico",
      "**/*.pdf",
      "**/*.zip",
      "supabase/.branches/**",
      "supabase/.temp/**",
      "scripts/**"
    ],
    "redact": [
      "(?i)api[_-]?key\\s*[:=]\\s*['\\\"][^'\\\"]+['\\\"]",
      "(?i)(secret|token|password)\\s*[:=]\\s*['\\\"][^'\\\"]+['\\\"]",
      "\\b[A-Za-z0-9_-]{32,}\\b",
      "(?m)^(RESEND|SUPABASE|VAPID|STRIPE|GOOGLE|AWS|OPENAI)_[A-Z0-9_]+\\s*=\\s*.+$"
    ],
    "maxPreviewBytes": 250000,
    "chunkBytes": 64000,
    "maxFileBytes": 1500000,
    "formatDump": true
  },
  "files": [
    {
      "path": "src/app/globals.css",
      "size": 5653,
      "sha256": "45ad32c69d21d05c8e114bb7dcee571ed26789588c71258172a932bb0b2849b5",
      "lang": "css",
      "chunks": [
        {
          "i": 0,
          "text": "@import \"tailwindcss\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --font-size: 14px;\n  --background: #ffffff;\n  --foreground: oklch(0.145 0 0);\n  --card: #ffffff;\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: #030213;\n  --primary-foreground: oklch(1 0 0);\n  --secondary: oklch(0.95 0.0058 264.53);\n  --secondary-foreground: #030213;\n  --muted: #ececf0;\n  --muted-foreground: #717182;\n  --accent: #e9ebef;\n  --accent-foreground: #030213;\n  --destructive: #d4183d;\n  --destructive-foreground: #ffffff;\n  --border: rgba(0, 0, 0, 0.1);\n  --input: transparent;\n  --input-background: #f3f3f5;\n  --switch-background: #cbced4;\n  --font-weight-medium: 500;\n  --font-weight-normal: 400;\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: #030213;\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --font-weight-medium: 500;\n  --font-weight-normal: 400;\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-input-background: var(--input-background);\n  --color-switch-background: var(--switch-background);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --[REDACTED]: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n/**\n * Base typography. This is not applied to elements which have an ancestor with a Tailwind text class.\n */\n@layer base {\n  :where(:not(:has([class*=\" text-\"]), :not(:has([class^=\"text-\"])))) {\n    h1 {\n      font-size: var(--text-2xl);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    h2 {\n      font-size: var(--text-xl);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    h3 {\n      font-size: var(--text-lg);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    h4 {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    p {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-normal);\n      line-height: 1.5;\n    }\n\n    label {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    button {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-medium);\n      line-height: 1.5;\n    }\n\n    input {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-normal);\n      line-height: 1.5;\n    }\n  }\n}\n\nhtml {\n  font-size: var(--font-size);\n}"
        }
      ]
    },
    {
      "path": "src/app/layout.tsx",
      "size": 936,
      "sha256": "f93cd8b6a89eccd33ea99c02e8885bb26d15cf45c97b80cb72b707392a8c483d",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "import type { Metadata } from \"next\";\r\nimport { Geist, Geist_Mono } from \"next/font/google\";\r\nimport \"./globals.css\";\r\n\r\nconst geistSans = Geist({\r\n  variable: \"--font-geist-sans\",\r\n  subsets: [\"latin\"],\r\n});\r\n\r\nconst geistMono = Geist_Mono({\r\n  variable: \"--font-geist-mono\",\r\n  subsets: [\"latin\"],\r\n});\r\n\r\nexport const metadata: Metadata = {\r\n  title: \"Create Next App\",\r\n  description: \"Generated by create next app\",\r\n};\r\n\r\nexport default function RootLayout({\r\n  children,\r\n}: Readonly<{\r\n  children: React.ReactNode;\r\n}>) {\r\n  return (\r\n    <html lang=\"en\">\r\n      <body\r\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\r\n      >\r\n        {children}\r\n      </body>\r\n    </html>\r\n  );\r\n}\r\n// vain selaimessa\r\nif (typeof window !== \"undefined\" && \"serviceWorker\" in navigator) {\r\n  window.addEventListener(\"load\", () => {\r\n    navigator.serviceWorker.register(\"/sw.js\").catch(console.error);\r\n  });\r\n}\r\n"
        }
      ]
    },
    {
      "path": "src/app/page.tsx",
      "size": 2102,
      "sha256": "863f7484cf1ebcb308bfbdc6b93bb2f3e48ceb9b3db992db3c28bfb02ab30ef7",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\n\nimport React, { useState } from 'react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';\nimport { Toaster } from './components/ui/sonner';\nimport Toolbar from './components/Toolbar';\nimport ScheduleTable from './components/ScheduleTable';\nimport AbsenceControlPanel from './components/AbsenceControlPanel';\nimport EmployeeList from './components/EmployeeList';\nimport { Calendar, Users, Clock } from 'lucide-react';\n\nexport default function App() {\n  const [activeTab, setActiveTab] = useState('schedule');\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Toast notifications */}\n      <Toaster position=\"top-right\" />\n      \n      <div className=\"container mx-auto p-6 space-y-6\">\n        {/* Toolbar - always visible */}\n        <Toolbar />\n        \n        {/* Main Navigation */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 lg:w-[400px] mx-auto\">\n            <TabsTrigger value=\"schedule\" className=\"flex items-center gap-2\">\n              <Calendar className=\"w-4 h-4\" />\n              Vuorotaulukko\n            </TabsTrigger>\n            <TabsTrigger value=\"employees\" className=\"flex items-center gap-2\">\n              <Users className=\"w-4 h-4\" />\n              Työntekijät\n            </TabsTrigger>\n            <TabsTrigger value=\"absences\" className=\"flex items-center gap-2\">\n              <Clock className=\"w-4 h-4\" />\n              Poissaolot\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Schedule Table Tab */}\n          <TabsContent value=\"schedule\" className=\"space-y-6\">\n            <ScheduleTable />\n          </TabsContent>\n\n          {/* Employee Management Tab */}\n          <TabsContent value=\"employees\" className=\"space-y-6\">\n            <EmployeeList />\n          </TabsContent>\n\n          {/* Absence Control Panel Tab */}\n          <TabsContent value=\"absences\" className=\"space-y-6\">\n            <AbsenceControlPanel />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}"
        }
      ]
    },
    {
      "path": "src/lib/pushClient.ts",
      "size": 1702,
      "sha256": "0c5d527d186d7705e5a0462d4f30c4c84cf5d255c67fa5ed41af2792e64dbfcb",
      "lang": "typescript",
      "chunks": [
        {
          "i": 0,
          "text": "// src/lib/pushClient.ts\r\nimport { supabase } from \"@/lib/supaBaseClient\";\r\n\r\nconst PUBLIC_VAPID = process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY || \"\";\r\n\r\nfunction urlBase64ToUint8Array(base64String: string) {\r\n  const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\r\n  const base64 = (base64String + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n  const raw = atob(base64);\r\n  const output = new Uint8Array(raw.length);\r\n  for (let i = 0; i < raw.length; ++i) output[i] = raw.charCodeAt(i);\r\n  return output;\r\n}\r\n\r\nexport async function ensureServiceWorker() {\r\n  if (!(\"serviceWorker\" in navigator)) throw new Error(\"Service Worker ei tuettu\");\r\n  const reg = await navigator.serviceWorker.register(\"/sw.js\");\r\n  await navigator.serviceWorker.ready;\r\n  return reg;\r\n}\r\n\r\nexport async function requestPermissionAndSubscribe(): Promise<boolean> {\r\n  if (!PUBLIC_VAPID) { console.error(\"NEXT_PUBLIC_VAPID_PUBLIC_KEY puuttuu\"); return false; }\r\n\r\n  const perm = await Notification.requestPermission();\r\n  if (perm !== \"granted\") return false;\r\n\r\n  const reg = await ensureServiceWorker();\r\n  const sub = await reg.pushManager.subscribe({\r\n    userVisibleOnly: true,\r\n    applicationServerKey: urlBase64ToUint8Array(PUBLIC_VAPID),\r\n  });\r\n\r\n  // talleta supabaseen\r\nconst json: PushSubscriptionJSON = sub.toJSON();\r\nconst endpoint: string = json.endpoint!;\r\nconst p256dh: string | undefined = json.keys?.p256dh;\r\nconst auth: string | undefined = json.keys?.auth;\r\n\r\nconst { error } = await supabase\r\n  .from(\"push_subscriptions\")\r\n  .upsert({ endpoint, p256dh, auth, is_active: true }, { onConflict: \"endpoint\" });\r\n\r\nif (error) {\r\n  console.error(error);\r\n  return false;\r\n}\r\nreturn true;\r\n\r\n}\r\n"
        }
      ]
    },
    {
      "path": "src/lib/supaBaseClient.ts",
      "size": 219,
      "sha256": "12a0140716ff3bbd6dccba2926e91a61997cf7312a9412e5d08349f3f454aa56",
      "lang": "typescript",
      "chunks": [
        {
          "i": 0,
          "text": "import { createClient } from \"@supabase/supabase-js\";\r\n\r\nconst url = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\nconst anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\r\n\r\nexport const supabase = createClient(url, anon);\r\n"
        }
      ]
    },
    {
      "path": "src/store/useScheduleStore.ts",
      "size": 9659,
      "sha256": "8e8edd0d4cb2442e10bced96bd6796b744fdc4a3f441da377d56aae057c2deb8",
      "lang": "typescript",
      "chunks": [
        {
          "i": 0,
          "text": "// src/store/useScheduleStore.ts\r\n\"use client\";\r\n\r\nimport { create } from \"zustand\";\r\nimport { devtools } from \"zustand/middleware\";\r\nimport { toast } from \"sonner\";\r\nimport { supabase } from \"@/lib/supaBaseClient\";\r\nimport { persist, createJSONStorage } from \"zustand/middleware\";\r\n\r\n// KÄYTÄ YHTÄ TOTUUTTA: ota tyypit yhdestä paikasta\r\nimport type { Employee, DateInfo } from \"@/app/types\";\r\n\r\n// Sama DateCell kuin muualla\r\nexport type DateCell = DateInfo & { iso: string };\r\n\r\n// Yhden solun persistomuoto\r\nexport type ShiftRow = {\r\n  employee_id: string;\r\n  work_date: string; // YYYY-MM-DD\r\n  type: \"normal\" | \"locked\" | \"absent\" | \"holiday\";\r\n  hours: number | null; // null sallitaan, mutta tallennetaan 0:ksi kun kirjoitetaan DB:hen\r\n};\r\n// Suodattimien tyyppi\r\nexport type Filters = {\r\n  departments: string[];\r\n  showActive: boolean;\r\n  showInactive: boolean;\r\n  searchTerm: string;\r\n};\r\n\r\n// Sisäinen muutos, jota kerätään saveAll:lle\r\ntype PendingChange = {\r\n  employee_id: string;\r\n  work_date: string;\r\n  hours: number; // 0 => poista, >0 => upsert \"normal\"\r\n};\r\n\r\ntype State = {\r\n\r\n  // Hydratoitu perusdata\r\n  employees: Employee[];\r\n  dates: DateCell[];\r\n\r\n  // Vuorot mapattuna\r\n  shiftsMap: Record<string, ShiftRow>;\r\n\r\n  // Muutokset jotka pitää tallentaa\r\n  pending: Record<string, PendingChange>;\r\n\r\n  // Undo/redo pino\r\n  undoStack: PendingChange[];\r\n  redoStack: PendingChange[];\r\n\r\n  // UI-signaalit\r\n  dirty: boolean;\r\n\r\n  // Filtterit\r\n  filters: Filters;\r\n  setFilters: (patch: Partial<Filters>) => void;\r\n  resetFilters: () => void;\r\n\r\n  startDateISO: string;\r\n  days: 7 | 10 | 14 | 30;\r\n\r\n  setRange: (startISO: string, days: State[\"days\"]) => void;\r\n  setStartDate: (startDateISO: string) => void;\r\n  shiftRange: (deltaDays: number) => void;\r\n\r\n  // Toiminnot\r\n  hydrate: (payload: {\r\n    employees: Employee[];\r\n    dates: DateCell[];\r\n    shifts: ShiftRow[];\r\n  }) => void;\r\n\r\n  applyCellChange: (p: { employee_id: string; work_date: string; hours: number | null }) => void;\r\n\r\n  saveAll: () => Promise<void>;\r\n\r\n  undo: () => void;\r\n  redo: () => void;\r\n};\r\n\r\nfunction keyOf(empId: string, iso: string) {\r\n  return `${empId}|${iso}`;\r\n}\r\n\r\nexport const useScheduleStore = create<State>()(\r\n  persist(\r\n  devtools((set, get) => ({\r\n    employees: [],\r\n    dates: [],\r\n    shiftsMap: {},\r\n    pending: {},\r\n    undoStack: [],\r\n    redoStack: [],\r\n    dirty: false,\r\n\r\n    startDateISO: new Date().toISOString().slice(0, 10),\r\n    days: 10,\r\n\r\n    hydrate: ({ employees, dates, shifts }) => {\r\n      // Rakennetaan map shifteistä\r\n      const map: Record<string, ShiftRow> = {};\r\n      for (const s of shifts) {\r\n        map[keyOf(s.employee_id, s.work_date)] = {\r\n          ...s,\r\n          hours: s.hours ?? 0,\r\n          // Varmista että type on unionista (tai normal jos tuntematon)\r\n          type:\r\n            s.type === \"normal\" ||\r\n            s.type === \"locked\" ||\r\n            s.type === \"absent\" ||\r\n            s.type === \"holiday\"\r\n              ? s.type\r\n              : \"normal\",\r\n        };\r\n      }\r\n      set({\r\n        employees,\r\n        dates,\r\n        shiftsMap: map,\r\n        pending: {},\r\n        undoStack: [],\r\n        redoStack: [],\r\n        dirty: false,\r\n\r\n        // ---Filtterit---\r\n        filters: {\r\n          departments: [],\r\n          showActive: false,\r\n          showInactive: false,\r\n          searchTerm: \"\",\r\n        },\r\n\r\n        setFilters: (partial) =>\r\n          set((state) => ({ filters: { ...state.filters, ...partial } })),\r\n\r\n        resetFilters: () =>\r\n          set({\r\n            filters: { departments: [], showActive: false, showInactive: false, searchTerm: \"\", },\r\n            }),\r\n      });\r\n    },\r\n\r\n    applyCellChange: ({ employee_id, work_date, hours }) => {\r\n      const h = typeof hours === \"number\" ? hours : 0;\r\n      const k = keyOf(employee_id, work_date);\r\n      const { shiftsMap, pending, undoStack } = get();\r\n\r\n      // Laske edellinen arvo (käytetään undo:ssa)\r\n      const prev = shiftsMap[k];\r\n\r\n      // Päivitä live-näkymään:\r\n      const nextMap = { ...shiftsMap };\r\n      if (h <= 0) {\r\n        // 0h => poista vuoro näkyvistä\r\n        delete nextMap[k];\r\n      } else {\r\n        // >0h => laita normal-h vuoro\r\n        nextMap[k] = {\r\n          employee_id,\r\n          work_date,\r\n          type: \"normal\",\r\n          hours: h,\r\n        };\r\n      }\r\n\r\n      // Päivitä pending: 0h => merkkaa poistoksi, muuten upsertiksi\r\n      const nextPending = { ...pending, [k]: { employee_id, work_date, hours: h } };\r\n\r\n      set({\r\n        shiftsMap: nextMap,\r\n        pending: nextPending,\r\n        undoStack: [...undoStack, { employee_id, work_date, hours: prev?.hours ?? 0 }],\r\n        redoStack: [],\r\n        dirty: true,\r\n      });\r\n    },\r\n\r\n setRange: (startISO, days) => set({ startDateISO: startISO, days }),\r\n\r\nsetStartDate: (startDateISO: string) => set({ startDateISO }),\r\n\r\nshiftRange: (deltaDays: number) => {\r\n  const { startDateISO, days } = get();\r\n  const d = new Date(startDateISO + \"T00:00:00\");\r\n  d.setDate(d.getDate() + deltaDays);\r\n  const nextStart = d.toISOString().slice(0, 10);\r\n  set({ startDateISO: nextStart, days });\r\n},\r\n\r\n    saveAll: async () => {\r\n      const { pending } = get();\r\n      const changes = Object.values(pending);\r\n      if (!changes.length) {\r\n        toast.info(\"Ei tallennettavia muutoksia\");\r\n        return;\r\n      }\r\n\r\n      const upserts: ShiftRow[] = [];\r\n      const deletes: { employee_id: string; work_date: string }[] = [];\r\n\r\n      for (const c of changes) {\r\n        if (c.hours <= 0) {\r\n          deletes.push({ employee_id: c.employee_id, work_date: c.work_date });\r\n        } else {\r\n          upserts.push({\r\n            employee_id: c.employee_id,\r\n            work_date: c.work_date,\r\n            type: \"normal\",\r\n            hours: c.hours,\r\n          });\r\n        }\r\n      }\r\n\r\n      try {\r\n        // Tee transaktio peräkkäin: ensin upsert, sitten deletet\r\n        if (upserts.length) {\r\n          const { error } = await supabase\r\n            .from(\"shifts\")\r\n            .upsert(upserts, { onConflict: \"employee_id,work_date\" });\r\n          if (error) throw error;\r\n        }\r\n\r\n        if (deletes.length) {\r\n          // Supabasen \"in\" yhdistelmäehdolla: suorita chunkkeina\r\n          const chunkSize = 500;\r\n          for (let i = 0; i < deletes.length; i += chunkSize) {\r\n            const chunk = deletes.slice(i, i + chunkSize);\r\n            const { error } = await supabase\r\n              .from(\"shifts\")\r\n              .delete()\r\n              .in(\r\n                \"employee_id\",\r\n                chunk.map((d) => d.employee_id)\r\n              )\r\n              .in(\r\n                \"work_date\",\r\n                chunk.map((d) => d.work_date)\r\n              );\r\n            if (error) throw error;\r\n          }\r\n        }\r\n\r\n        set({ pending: {}, dirty: false });\r\n        toast.success(\"Tallennettu\");\r\n      } catch (e) {\r\n        console.error(e);\r\n        toast.error(\"Tallennus epäonnistui\");\r\n        // ÄLÄ nollaa pendingiä epäonnistumisessa\r\n      }\r\n    },\r\n\r\n    undo: () => {\r\n      const { undoStack, shiftsMap, pending, redoStack } = get();\r\n      if (!undoStack.length) return;\r\n      const last = undoStack[undoStack.length - 1];\r\n\r\n      const k = keyOf(last.employee_id, last.work_date);\r\n      const current = shiftsMap[k]; // mitä on nyt UI:ssa\r\n\r\n      // Palauta entinen tuntimäärä\r\n      const nextMap = { ...shiftsMap };\r\n      if (!last.hours || last.hours <= 0) {\r\n        delete nextMap[k];\r\n      } else {\r\n        nextMap[k] = {\r\n          employee_id: last.employee_id,\r\n          work_date: last.work_date,\r\n          type: \"normal\",\r\n          hours: last.hours,\r\n        };\r\n      }\r\n\r\n      // Päivitä pending vastaamaan undo-tilaa\r\n      const nextPending = { ...pending, [k]: { employee_id: last.employee_id, work_date: last.work_date, hours: last.hours ?? 0 } };\r\n\r\n      // Siirrä nykyinen tila redo-pinon itemiksi\r\n      const redoItem: PendingChange = {\r\n        employee_id: last.employee_id,\r\n        work_date: last.work_date,\r\n        hours: current?.hours ?? 0,\r\n      };\r\n\r\n      set({\r\n        shiftsMap: nextMap,\r\n        pending: nextPending,\r\n        undoStack: undoStack.slice(0, -1),\r\n        redoStack: [...redoStack, redoItem],\r\n        dirty: true,\r\n      });\r\n    },\r\n\r\n    redo: () => {\r\n      const { redoStack, shiftsMap, pending, undoStack } = get();\r\n      if (!redoStack.length) return;\r\n      const next = redoStack[redoStack.length - 1];\r\n\r\n      const k = keyOf(next.employee_id, next.work_date);\r\n      const prev = shiftsMap[k];\r\n\r\n      const nextMap = { ...shiftsMap };\r\n      if (!next.hours || next.hours <= 0) {\r\n        delete nextMap[k];\r\n      } else {\r\n        nextMap[k] = {\r\n          employee_id: next.employee_id,\r\n          work_date: next.work_date,\r\n          type: \"normal\",\r\n          hours: next.hours,\r\n        };\r\n      }\r\n\r\n      const nextPending = { ...pending, [k]: { ...next } };\r\n\r\n      set({\r\n        shiftsMap: nextMap,\r\n        pending: nextPending,\r\n        redoStack: redoStack.slice(0, -1),\r\n        undoStack: [...undoStack, { employee_id: next.employee_id, work_date: next.work_date, hours: prev?.hours ?? 0 }],\r\n        dirty: true,\r\n      });\r\n    },\r\n  })),\r\n    {\r\n    name: \"schedule-ui\", // avain localStorageen\r\n    version: 1,\r\n    storage:\r\n      typeof window !== \"undefined\"\r\n        ? createJSONStorage(() => localStorage)\r\n        : undefined,\r\n    // tallennetaan vain nämä kentät\r\n    partialize: (state) => ({\r\n      startDateISO: state.startDateISO,\r\n      days: state.days,\r\n    }),\r\n  }\r\n  )\r\n);\r\n\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/AbsenceControlPanel.tsx",
      "size": 13667,
      "sha256": "b698002d14ffa859311dd7e3e3f857f9e683a97c90f448e980c89ee84fe7f88d",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Badge } from './ui/badge';\r\nimport { Avatar, AvatarFallback } from './ui/avatar';\r\nimport { Textarea } from './ui/textarea';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from './ui/dialog';\r\nimport { \r\n  Clock, \r\n  CheckCircle, \r\n  XCircle, \r\n  Calendar,\r\n  MessageSquare,\r\n  User,\r\n  AlertTriangle\r\n} from 'lucide-react';\r\nimport { AbsenceRequest } from '../types';\r\nimport { toast } from 'sonner';\r\nimport { supabase } from '@/lib/supaBaseClient';\r\n\r\nconst AbsenceControlPanel = () => {\r\n  const [requests, setRequests] = useState<AbsenceRequest[]>([]);\r\n  const [adminResponse, setAdminResponse] = useState('');\r\n\r\n  // --- FETCH FROM SUPABASE ---\r\n  useEffect(() => {\r\n    const fetchAbsences = async () => {\r\nconst { data, error } = await supabase\r\n  .from('absences')\r\n  .select(`\r\n    id,\r\n    employee_id,\r\n    start_date,\r\n    end_date,\r\n    reason,\r\n    message,\r\n    status,\r\n    submitted_at,\r\n    employees:employees!absences_employee_id_fkey ( name )\r\n  `)\r\n  .order('submitted_at', { ascending: false });\r\n\r\nif (error) {\r\n  console.error(error);\r\n  toast.error('Poissaolojen haku epäonnistui');\r\n  return;\r\n}\r\n\r\ntype AbsenceRow = {\r\n  id: string;\r\n  employee_id: string;\r\n  start_date: string;\r\n  end_date: string | null;\r\n  reason: string | null;\r\n  message: string | null;\r\n  status: 'pending' | 'approved' | 'declined';\r\n  submitted_at: string;\r\n  employees?: { name: string }[] | { name: string } | null;\r\n};\r\n\r\nconst mapped: AbsenceRequest[] = (data as AbsenceRow[]).map((r) => {\r\n  const employeeName = Array.isArray(r.employees)\r\n    ? r.employees[0]?.name\r\n    : r.employees?.name;\r\n\r\n  return {\r\n    id: r.id,\r\n    employeeId: r.employee_id,\r\n    employeeName: employeeName ?? 'Tuntematon',\r\n    startDate: r.start_date,\r\n    endDate: r.end_date ?? '',\r\n    reason: r.reason ?? '',\r\n    status: r.status,\r\n    submittedAt: r.submitted_at,\r\n    message: r.message ?? '',\r\n  };\r\n});\r\n\r\n\r\n      setRequests(mapped);\r\n      \r\n    };\r\n\r\n    fetchAbsences();\r\n  }, []);\r\n\r\n  // --- STATUS HELPERS (UI) ---\r\n  const getStatusBadge = (status: AbsenceRequest['status']) => {\r\n    switch (status) {\r\n      case 'pending':\r\n        return <Badge variant=\"outline\" className=\"bg-amber-50 text-amber-700 border-amber-300\"><Clock className=\"w-3 h-3 mr-1\" />Odottaa</Badge>;\r\n      case 'approved':\r\n        return <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-300\"><CheckCircle className=\"w-3 h-3 mr-1\" />Hyväksytty</Badge>;\r\n      case 'declined':\r\n        return <Badge variant=\"outline\" className=\"bg-red-50 text-red-700 border-red-300\"><XCircle className=\"w-3 h-3 mr-1\" />Hylätty</Badge>;\r\n    }\r\n  };\r\n\r\n  // --- SUPABASE UPDATES ---\r\nconst handleApprove = async (requestId: string) => {\r\n  // Optimistinen päivitys\r\n  setRequests(prev => prev.map(r => r.id === requestId ? { ...r, status: 'approved' } : r));\r\n\r\n  const target = requests.find(r => r.id === requestId);\r\n  const { error } = await supabase.from('absences').update({ status: 'approved' }).eq('id', requestId);\r\n  if (error) {\r\n    console.error('[ABSENCE APPROVE ERROR]', error.code, error.message, error.details);\r\n    // revert\r\n    setRequests(prev => prev.map(r => r.id === requestId ? { ...r, status: 'pending' } : r));\r\n    toast.error('Hyväksyntä epäonnistui');\r\n    return;\r\n  }\r\n\r\n  // Luo ilmoitus\r\n  if (target) {\r\n    await supabase.from(\"notifications\").insert({\r\n      type: \"absence_approved\",\r\n      title: \"Poissaolo hyväksytty\",\r\n      message: `${target.employeeName}: ${target.startDate}${target.endDate ? \" – \" + target.endDate : \"\"}`,\r\n    });\r\n  }\r\n\r\n  toast.success('Poissaolopyyntö hyväksytty');\r\n};\r\n\r\n\r\nconst handleDecline = async (requestId: string) => {\r\n  setRequests(prev => prev.map(r => r.id === requestId ? { ...r, status: 'declined' } : r));\r\n\r\n  const target = requests.find(r => r.id === requestId);\r\n  const { error } = await supabase.from('absences').update({ status: 'declined' }).eq('id', requestId);\r\n  if (error) {\r\n    console.error('[ABSENCE DECLINE ERROR]', error.code, error.message, error.details);\r\n    setRequests(prev => prev.map(r => r.id === requestId ? { ...r, status: 'pending' } : r));\r\n    toast.error('Hylkäys epäonnistui');\r\n    return;\r\n  }\r\n\r\n  // Luo ilmoitus\r\n  if (target) {\r\n    await supabase.from(\"notifications\").insert({\r\n      type: \"absence_declined\",\r\n      title: \"Poissaolo hylätty\",\r\n      message: `${target.employeeName}: ${target.startDate}${target.endDate ? \" – \" + target.endDate : \"\"}`,\r\n    });\r\n  }\r\n\r\n  toast.success('Poissaolopyyntö hylätty');\r\n};\r\n\r\n\r\n  // --- DERIVED LISTS (UI pysyy samana) ---\r\n  const pendingRequests = requests.filter(req => req.status === 'pending');\r\n  const processedRequests = requests.filter(req => req.status !== 'pending');\r\n\r\n  const formatDate = (dateString: string) => {\r\n    if (!dateString) return '';\r\n    return new Date(dateString).toLocaleDateString('fi-FI', {\r\n      day: 'numeric',\r\n      month: 'numeric',\r\n      year: 'numeric'\r\n    });\r\n  };\r\n\r\n  const formatDateTime = (dateString: string) => {\r\n    if (!dateString) return '';\r\n    return new Date(dateString).toLocaleDateString('fi-FI', {\r\n      day: 'numeric',\r\n      month: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Pending Requests */}\r\n      <Card className=\"shadow-lg border-0 bg-gradient-to-r from-background to-secondary/20\">\r\n        <CardHeader className=\"pb-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <AlertTriangle className=\"w-6 h-6 text-amber-500\" />\r\n              <CardTitle className=\"text-xl text-primary\">Odottavat poissaolopyynnöt</CardTitle>\r\n            </div>\r\n            <Badge variant=\"secondary\" className=\"px-3 py-1\">\r\n              {pendingRequests.length} pyyntöä\r\n            </Badge>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          {pendingRequests.length === 0 ? (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <Calendar className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\r\n              <p>Ei odottavia poissaolopyyntöjä</p>\r\n            </div>\r\n          ) : (\r\n            pendingRequests.map((request) => (\r\n              <div key={request.id} className=\"border border-border rounded-lg p-4 bg-background hover:shadow-md transition-shadow\">\r\n                <div className=\"flex items-start justify-between\">\r\n                  <div className=\"flex items-start space-x-3 flex-1\">\r\n                    <Avatar className=\"w-10 h-10\">\r\n                      <AvatarFallback className=\"bg-primary text-primary-foreground\">\r\n                        {request.employeeName?.split(' ').map(n => n[0]).join('')}\r\n                      </AvatarFallback>\r\n                    </Avatar>\r\n                    <div className=\"flex-1\">\r\n                      <div className=\"flex items-center gap-2 mb-2\">\r\n                        <h4 className=\"font-medium\">{request.employeeName}</h4>\r\n                        {getStatusBadge(request.status)}\r\n                      </div>\r\n                      <div className=\"space-y-1 text-sm text-muted-foreground\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Calendar className=\"w-4 h-4\" />\r\n                          <span>\r\n                            {formatDate(request.startDate)} \r\n                            {request.startDate !== request.endDate && ` - ${formatDate(request.endDate)}`}\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <User className=\"w-4 h-4\" />\r\n                          <span>Syy: {request.reason}</span>\r\n                        </div>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Clock className=\"w-4 h-4\" />\r\n                          <span>Jätetty: {formatDateTime(request.submittedAt || '')}</span>\r\n                        </div>\r\n                      </div>\r\n                      {request.message && (\r\n                        <div className=\"mt-3 p-3 bg-muted/50 rounded-md\">\r\n                          <div className=\"flex items-start gap-2\">\r\n                            <MessageSquare className=\"w-4 h-4 mt-0.5 text-muted-foreground\" />\r\n                            <p className=\"text-sm\">{request.message}</p>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2 ml-4\">\r\n                    <Dialog>\r\n                      <DialogTrigger asChild>\r\n                        <div\r\n                          className=\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-3 cursor-pointer\"\r\n                        >\r\n                          <MessageSquare className=\"w-4 h-4 mr-2\" />\r\n                          Vastaa\r\n                        </div>\r\n                      </DialogTrigger>\r\n                      <DialogContent>\r\n                        <DialogHeader>\r\n                          <DialogTitle>Vastaa poissaolopyyntöön</DialogTitle>\r\n                        </DialogHeader>\r\n                        <div className=\"space-y-4\">\r\n                          <div className=\"space-y-2\">\r\n                            <label className=\"text-sm font-medium\">Viesti työntekijälle:</label>\r\n                            <Textarea \r\n                              value={adminResponse}\r\n                              onChange={(e) => setAdminResponse(e.target.value)}\r\n                              placeholder=\"Kirjoita viesti...\"\r\n                              className=\"min-h-[100px]\"\r\n                            />\r\n                          </div>\r\n                          <div className=\"flex gap-2\">\r\n                            <Button \r\n                              onClick={() => {\r\n                                handleApprove(request.id);\r\n                                setAdminResponse('');\r\n                              }}\r\n                              className=\"flex-1\"\r\n                            >\r\n                              <CheckCircle className=\"w-4 h-4 mr-2\" />\r\n                              Hyväksy\r\n                            </Button>\r\n                            <Button \r\n                              variant=\"destructive\"\r\n                              onClick={() => {\r\n                                handleDecline(request.id);\r\n                                setAdminResponse('');\r\n                              }}\r\n                              className=\"flex-1\"\r\n                            >\r\n                              <XCircle className=\"w-4 h-4 mr-2\" />\r\n                              Hylkää\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </DialogContent>\r\n                    </Dialog>\r\n                    <Button \r\n                      size=\"sm\"\r\n                      onClick={() => handleApprove(request.id)}\r\n                      className=\"bg-green-600 hover:bg-green-700\"\r\n                    >\r\n                      <CheckCircle className=\"w-4 h-4\" />\r\n                    </Button>\r\n                    <Button \r\n                      variant=\"destructive\"\r\n                      size=\"sm\"\r\n                      onClick={() => handleDecline(request.id)}\r\n                    >\r\n                      <XCircle className=\"w-4 h-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Processed Requests */}\r\n      <Card className=\"shadow-md\">\r\n        <CardHeader className=\"pb-4\">\r\n          <CardTitle className=\"text-lg\">Käsitellyt pyynnöt</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-3\">\r\n            {processedRequests.map((request) => (\r\n              <div key={request.id} className=\"flex items-center justify-between p-3 border border-border rounded-md bg-muted/30\">\r\n                <div className=\"flex items-center space-x-3\">\r\n                  <Avatar className=\"w-8 h-8\">\r\n                    <AvatarFallback className=\"text-xs\">\r\n                      {request.employeeName?.split(' ').map(n => n[0]).join('')}\r\n                    </AvatarFallback>\r\n                  </Avatar>\r\n                  <div>\r\n                    <p className=\"font-medium text-sm\">{request.employeeName}</p>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      {formatDate(request.startDate)} - {request.reason}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                {getStatusBadge(request.status)}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AbsenceControlPanel;\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/EmployeeList.tsx",
      "size": 22158,
      "sha256": "76dcf8c66070809dd10b3a6c3bcf6e5abdb7ff8842c60e59fb11f0f2b6a86b23",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\r\nimport { Button } from \"./ui/button\";\r\nimport { Input } from \"./ui/input\";\r\nimport { Badge } from \"./ui/badge\";\r\nimport { Avatar, AvatarFallback } from \"./ui/avatar\";\r\nimport { Switch } from \"./ui/switch\";\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"./ui/dialog\";\r\nimport { Label } from \"./ui/label\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"./ui/select\";\r\nimport {\r\n  Users,\r\n  Plus,\r\n  Edit3,\r\n  Trash2,\r\n  Search,\r\n  UserCheck,\r\n  UserX,\r\n  Mail,\r\n  Building,\r\n} from \"lucide-react\";\r\nimport { toast } from \"sonner\";\r\nimport { supabase } from \"@/lib/supaBaseClient\";\r\n\r\n// Sama tyyppi kuin sulla (shifts jätetään tyhjäksi tässä vaiheessa)\r\ntype Employee = {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  department: string;\r\n  isActive: boolean;\r\n  shifts: Array<unknown>;\r\n};\r\n\r\nconst EmployeeList = () => {\r\n  const [employees, setEmployees] = useState<Employee[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Hakusuodatus\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const [customDepartment, setCustomDepartment] = useState(\"\");\r\n  const [editCustomDepartment, setEditCustomDepartment] = useState(\"\");\r\n\r\n  const [creatingNewDept, setCreatingNewDept] = useState(false);\r\n  const [editCreatingNewDept, setEditCreatingNewDept] = useState(false);\r\n\r\n  // Edit/Add dialogit\r\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\r\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\r\n  const [newEmployee, setNewEmployee] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    department: \"\",\r\n    isActive: true,\r\n  });\r\n\r\n  // 1) HAKU DB:stä\r\n  useEffect(() => {\r\n    (async () => {\r\n      setLoading(true);\r\n      const { data, error } = await supabase\r\n        .from(\"employees\")\r\n        .select(\"id, name, email, department, is_active, created_at\")\r\n        .order(\"created_at\", { ascending: true });\r\n\r\n      if (error) {\r\n        console.error(error);\r\n        toast.error(\"Työntekijöiden haku epäonnistui\");\r\n      } else {\r\n        // Mapataan snake_case -> camelCase\r\n\r\n          type EmployeeRow = {\r\n          id: string;\r\n          name: string;\r\n          email: string;\r\n          department: string;\r\n          is_active: boolean;\r\n          created_at: string; // tai Date, jos haluat käsitellä sitä\r\n          };\r\n\r\n          const mapped: Employee[] = (data ?? []).map((row: EmployeeRow) => ({\r\n          id: row.id,\r\n          name: row.name,\r\n          email: row.email,\r\n          department: row.department,\r\n          isActive: !!row.is_active,\r\n          shifts: [], // ei vielä käytössä\r\n        }));\r\n        setEmployees(mapped);\r\n      }\r\n      setLoading(false);\r\n    })();\r\n  }, []);\r\n\r\n  // 2) LISÄYS\r\nasync function handleAddEmployee() {\r\n  const name = newEmployee.name.trim();\r\n  const email = newEmployee.email.trim();\r\n  const dep = (newEmployee.department ?? \"\").trim();\r\n\r\n  if (!name || !email || !dep) {\r\n    toast.error(\"Täytä kaikki pakolliset kentät\");\r\n    return;\r\n  }\r\n  if (dep.toLowerCase() === \"uusi osasto\") {\r\n    toast.error(\"Kirjoita osaston nimi.\");\r\n    return;\r\n  }\r\n\r\n  const { data, error } = await supabase\r\n    .from(\"employees\")\r\n    .insert([{\r\n      name,\r\n      email,\r\n      department: dep,\r\n      is_active: newEmployee.isActive,\r\n    }])\r\n    .select(\"id, name, email, department, is_active, created_at\")\r\n    .single();\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      toast.error(\"Lisäys epäonnistui\");\r\n      return;\r\n    }\r\n\r\n    const added: Employee = {\r\n      id: data.id,\r\n      name: data.name,\r\n      email: data.email,\r\n      department: data.department,\r\n      isActive: !!data.is_active,\r\n      shifts: [],\r\n    };\r\n\r\n    setEmployees((prev) => [...prev, added]);\r\n    setNewEmployee({ name: \"\", email: \"\", department: \"\", isActive: true });\r\n    setIsAddDialogOpen(false);\r\n    toast.success(`${added.name} lisätty`);\r\n      \r\n\r\n    await supabase.from(\"notifications\").insert({\r\n      type: \"employee_added\",\r\n      title: \"Uusi työntekijä lisätty\",\r\n      message: `${added.name} (${added.department}) lisättiin työntekijälistaan.`,\r\n    });\r\n  }\r\n\r\n  // 3) POISTO\r\n  async function handleDeleteEmployee(employeeId: string) {\r\n    const target = employees.find((e) => e.id === employeeId);\r\n    const { error } = await supabase.from(\"employees\").delete().eq(\"id\", employeeId);\r\n    if (error) {\r\n      console.error(error);\r\n      toast.error(\"Poisto epäonnistui\");\r\n      return;\r\n    }\r\n    setEmployees((prev) => prev.filter((e) => e.id !== employeeId));\r\n    toast.success(`${target?.name ?? \"Työntekijä\"} poistettu`);\r\n  }\r\n\r\n  // 4) AKTIIVINEN/EPÄAKTIIVINEN toggle\r\n  async function handleToggleActive(employeeId: string) {\r\n    const current = employees.find((e) => e.id === employeeId);\r\n    if (!current) return;\r\n\r\n    const nextActive = !current.isActive;\r\n    // Optimistic update\r\n    setEmployees((prev) =>\r\n      prev.map((e) => (e.id === employeeId ? { ...e, isActive: nextActive } : e))\r\n    );\r\n\r\n    const { error } = await supabase\r\n      .from(\"employees\")\r\n      .update({ is_active: nextActive })\r\n      .eq(\"id\", employeeId);\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      // Revertoi jos meni pieleen\r\n      setEmployees((prev) =>\r\n        prev.map((e) => (e.id === employeeId ? { ...e, isActive: !nextActive } : e))\r\n      );\r\n      toast.error(\"Tilan muutos epäonnistui\");\r\n      return;\r\n    }\r\n\r\n    toast.success(`${current.name} ${nextActive ? \"aktivoitu\" : \"deaktivoitu\"}`);\r\n  }\r\n\r\n  // 5) EDIT / UPDATE\r\n  function handleEditEmployee(employee: Employee) {\r\n    setSelectedEmployee(employee);\r\n  }\r\n\r\n  async function handleUpdateEmployee() {\r\n    if (!selectedEmployee) return;\r\n\r\n    const { error } = await supabase\r\n      .from(\"employees\")\r\n      .update({\r\n        name: selectedEmployee.name,\r\n        email: selectedEmployee.email,\r\n        department: selectedEmployee.department,\r\n        is_active: selectedEmployee.isActive,\r\n      })\r\n      .eq(\"id\", selectedEmployee.id);\r\n\r\n    if (error) {\r\n      console.error(error);\r\n      toast.error(\"Päivitys epäonnistui\");\r\n      return;\r\n    }\r\n\r\n    setEmployees((prev) =>\r\n      prev.map((e) => (e.id === selectedEmployee.id ? selectedEmployee : e))\r\n    );\r\n    setSelectedEmployee(null);\r\n    toast.success(\"Työntekijätiedot päivitetty\");\r\n  }\r\n\r\n  // Johdetut arvot (kuten ennen)\r\n  const filteredEmployees = useMemo(() => {\r\n    const q = searchTerm.toLowerCase();\r\n    return employees.filter(\r\n      (e) =>\r\n        e.name.toLowerCase().includes(q) ||\r\n        e.email.toLowerCase().includes(q) ||\r\n        e.department.toLowerCase().includes(q)\r\n    );\r\n  }, [employees, searchTerm]);\r\n\r\n  const activeEmployees = employees.filter((e) => e.isActive).length;\r\nconst departments = useMemo(\r\n  () =>\r\n    [...new Set(\r\n      employees\r\n        .map(e => (e.department ?? \"\").trim())\r\n        .filter(v => v && v.toLowerCase() !== \"uusi osasto\")\r\n    )].sort((a, b) => a.localeCompare(b, \"fi\")),\r\n  [employees]\r\n);\r\n\r\n\r\n  // —— UI alla: pidetään sun alkuperäinen rakenne ——\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card className=\"shadow-lg border-0 bg-gradient-to-r from-background to-secondary/20\">\r\n        <CardHeader className=\"pb-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <Users className=\"w-6 h-6 text-primary\" />\r\n              <CardTitle className=\"text-xl text-primary\">Työntekijähallinta</CardTitle>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Badge variant=\"secondary\" className=\"px-3 py-1\">\r\n                <UserCheck className=\"w-4 h-4 mr-2\" />\r\n                {activeEmployees} aktiivista\r\n              </Badge>\r\n\r\n              <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\r\n                <DialogTrigger asChild>\r\n                  <div\r\n                    className=\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2 cursor-pointer\"\r\n                    onClick={() => setIsAddDialogOpen(true)}\r\n                  >\r\n                    <Plus className=\"w-4 h-4 mr-2\" />\r\n                    Lisää työntekijä\r\n                  </div>\r\n                </DialogTrigger>\r\n                <DialogContent>\r\n                  <DialogHeader>\r\n                    <DialogTitle>Lisää uusi työntekijä</DialogTitle>\r\n                  </DialogHeader>\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"name\">Nimi *</Label>\r\n                      <Input\r\n                        id=\"name\"\r\n                        value={newEmployee.name}\r\n                        onChange={(e) =>\r\n                          setNewEmployee((p) => ({ ...p, name: e.target.value }))\r\n                        }\r\n                        placeholder=\"Etunimi Sukunimi\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"email\">Sähköposti *</Label>\r\n                      <Input\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        value={newEmployee.email}\r\n                        onChange={(e) =>\r\n                          setNewEmployee((p) => ({ ...p, email: e.target.value }))\r\n                        }\r\n                        placeholder=\"etunimi.sukunimi@company.com\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"department\">Osasto *</Label>\r\n                      <Select\r\n  value={\r\n    creatingNewDept\r\n      ? \"NEW_DEPT\"\r\n      : (newEmployee.department || \"\")\r\n  }\r\n  onValueChange={(value) => {\r\n    if (value === \"NEW_DEPT\") {\r\n      setCreatingNewDept(true);\r\n      setCustomDepartment(\"\");\r\n      setNewEmployee(p => ({ ...p, department: \"\" })); // puhdas aloitus\r\n    } else {\r\n      setCreatingNewDept(false);\r\n      setCustomDepartment(\"\");\r\n      setNewEmployee(p => ({ ...p, department: value }));\r\n    }\r\n  }}\r\n>\r\n  <SelectTrigger>\r\n    <SelectValue placeholder=\"Valitse osasto\" />\r\n  </SelectTrigger>\r\n  <SelectContent>\r\n    {departments.map((dept) => (\r\n      <SelectItem key={dept} value={dept}>{dept}</SelectItem>\r\n    ))}\r\n    <SelectItem value=\"NEW_DEPT\">+ Uusi osasto…</SelectItem>\r\n  </SelectContent>\r\n</Select>\r\n\r\n{creatingNewDept && (\r\n  <Input\r\n    placeholder=\"Kirjoita uusi osasto…\"\r\n    className=\"mt-2\"\r\n    value={customDepartment}\r\n    onChange={(e) => {\r\n      const v = e.target.value;\r\n      setCustomDepartment(v);\r\n      setNewEmployee(p => ({ ...p, department: v })); // päivitetään arvo, mutta ei piiloteta inputtia\r\n    }}\r\n  />\r\n)}\r\n\r\n\r\n\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <Switch\r\n                        id=\"active\"\r\n                        checked={newEmployee.isActive}\r\n                        onCheckedChange={(checked) =>\r\n                          setNewEmployee((p) => ({ ...p, isActive: checked }))\r\n                        }\r\n                      />\r\n                      <Label htmlFor=\"active\">Aktiivinen työntekijä</Label>\r\n                    </div>\r\n                    <div className=\"flex gap-2 pt-4\">\r\n                      <Button onClick={handleAddEmployee} className=\"flex-1\" disabled={loading}>\r\n                        Lisää työntekijä\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"outline\"\r\n                        onClick={() => setIsAddDialogOpen(false)}\r\n                        className=\"flex-1\"\r\n                      >\r\n                        Peruuta\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </DialogContent>\r\n              </Dialog>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"space-y-4\">\r\n          {/* Search */}\r\n          <div className=\"relative\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\r\n            <Input\r\n              placeholder=\"Hae työntekijöitä nimellä, sähköpostilla tai osastolla...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"pl-10\"\r\n            />\r\n          </div>\r\n\r\n          {/* Employee List */}\r\n          <div className=\"space-y-3\">\r\n            {loading ? (\r\n              <div className=\"text-center py-8 text-muted-foreground\">Ladataan…</div>\r\n            ) : (\r\n              filteredEmployees.map((employee) => (\r\n                <div\r\n                  key={employee.id}\r\n                  className=\"border border-border rounded-lg p-4 bg-background hover:shadow-md transition-shadow\"\r\n                >\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      <Avatar className=\"w-12 h-12\">\r\n                        <AvatarFallback\r\n                          className={`${\r\n                            employee.isActive\r\n                              ? \"bg-primary text-primary-foreground\"\r\n                              : \"bg-muted text-muted-foreground\"\r\n                          }`}\r\n                        >\r\n                          {employee.name\r\n                            .split(\" \")\r\n                            .map((n) => n[0])\r\n                            .join(\"\")}\r\n                        </AvatarFallback>\r\n                      </Avatar>\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"flex items-center gap-2 mb-1\">\r\n                          <h4 className=\"font-medium\">{employee.name}</h4>\r\n                          {employee.isActive ? (\r\n                            <Badge\r\n                              variant=\"outline\"\r\n                              className=\"bg-green-50 text-green-700 border-green-300\"\r\n                            >\r\n                              <UserCheck className=\"w-3 h-3 mr-1\" />\r\n                              Aktiivinen\r\n                            </Badge>\r\n                          ) : (\r\n                            <Badge\r\n                              variant=\"outline\"\r\n                              className=\"bg-gray-50 text-gray-700 border-gray-300\"\r\n                            >\r\n                              <UserX className=\"w-3 h-3 mr-1\" />\r\n                              Ei-aktiivinen\r\n                            </Badge>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"space-y-1 text-sm text-muted-foreground\">\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <Mail className=\"w-4 h-4\" />\r\n                            <span>{employee.email}</span>\r\n                          </div>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <Building className=\"w-4 h-4\" />\r\n                            <span>{employee.department}</span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Label htmlFor={`toggle-${employee.id}`} className=\"text-sm text-muted-foreground\">\r\n                          Aktiivinen\r\n                        </Label>\r\n                        <Switch\r\n                          id={`toggle-${employee.id}`}\r\n                          checked={employee.isActive}\r\n                          onCheckedChange={() => handleToggleActive(employee.id)}\r\n                        />\r\n                      </div>\r\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEditEmployee(employee)}>\r\n                        <Edit3 className=\"w-4 h-4\" />\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => handleDeleteEmployee(employee.id)}\r\n                        className=\"text-destructive hover:text-destructive\"\r\n                      >\r\n                        <Trash2 className=\"w-4 h-4\" />\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n\r\n          {!loading && filteredEmployees.length === 0 && (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <Users className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\r\n              <p>Ei työntekijöitä hakukriteereillä</p>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Edit Employee Dialog */}\r\n      <Dialog open={!!selectedEmployee} onOpenChange={() => setSelectedEmployee(null)}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Muokkaa työntekijää</DialogTitle>\r\n          </DialogHeader>\r\n          {selectedEmployee && (\r\n            <div className=\"space-y-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"edit-name\">Nimi</Label>\r\n                <Input\r\n                  id=\"edit-name\"\r\n                  value={selectedEmployee.name}\r\n                  onChange={(e) =>\r\n                    setSelectedEmployee((p) => (p ? { ...p, name: e.target.value } : p))\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"edit-email\">Sähköposti</Label>\r\n                <Input\r\n                  id=\"edit-email\"\r\n                  type=\"email\"\r\n                  value={selectedEmployee.email}\r\n                  onChange={(e) =>\r\n                    setSelectedEmployee((p) => (p ? { ...p, email: e.target.value } : p))\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"edit-department\">Osasto</Label>\r\n\r\n<Select\r\n  value={\r\n    editCreatingNewDept\r\n      ? \"NEW_DEPT\"\r\n      : (selectedEmployee?.department || \"\")\r\n  }\r\n  onValueChange={(value) => {\r\n    if (!selectedEmployee) return;\r\n    if (value === \"NEW_DEPT\") {\r\n      setEditCreatingNewDept(true);\r\n      setEditCustomDepartment(\"\");\r\n      setSelectedEmployee(p => p ? { ...p, department: \"\" } : p);\r\n    } else {\r\n      setEditCreatingNewDept(false);\r\n      setEditCustomDepartment(\"\");\r\n      setSelectedEmployee(p => p ? { ...p, department: value } : p);\r\n    }\r\n  }}\r\n>\r\n  <SelectTrigger>\r\n    <SelectValue placeholder=\"Valitse osasto\" />\r\n  </SelectTrigger>\r\n  <SelectContent>\r\n    {departments.map((dept) => (\r\n      <SelectItem key={dept} value={dept}>{dept}</SelectItem>\r\n    ))}\r\n    <SelectItem value=\"NEW_DEPT\">+ Uusi osasto…</SelectItem>\r\n  </SelectContent>\r\n</Select>\r\n\r\n{editCreatingNewDept && (\r\n  <Input\r\n    placeholder=\"Kirjoita uusi osasto…\"\r\n    className=\"mt-2\"\r\n    value={editCustomDepartment}\r\n    onChange={(e) => {\r\n      const v = e.target.value;\r\n      setEditCustomDepartment(v);\r\n      setSelectedEmployee(p => p ? { ...p, department: v } : p);\r\n    }}\r\n  />\r\n)}\r\n\r\n\r\n              </div>\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Switch\r\n                  id=\"edit-active\"\r\n                  checked={selectedEmployee.isActive}\r\n                  onCheckedChange={(checked) =>\r\n                    setSelectedEmployee((p) => (p ? { ...p, isActive: checked } : p))\r\n                  }\r\n                />\r\n                <Label htmlFor=\"edit-active\">Aktiivinen työntekijä</Label>\r\n              </div>\r\n              <div className=\"flex gap-2 pt-4\">\r\n                <Button onClick={handleUpdateEmployee} className=\"flex-1\">\r\n                  Tallenna muutokset\r\n                </Button>\r\n                <Button variant=\"outline\" onClick={() => setSelectedEmployee(null)} className=\"flex-1\">\r\n                  Peruuta\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Department Statistics */}\r\n      <Card className=\"shadow-md\">\r\n        <CardHeader>\r\n          <CardTitle className=\"text-lg\">Osastotilastot</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n            {useMemo(() => {\r\n              const depts = [...new Set(employees.map((e) => e.department))];\r\n              return depts.map((department) => {\r\n                const deptEmployees = employees.filter((e) => e.department === department);\r\n                const activeDeptEmployees = deptEmployees.filter((e) => e.isActive);\r\n                return (\r\n                  <div key={department} className=\"text-center p-3 border border-border rounded-lg\">\r\n                    <h4 className=\"font-medium mb-2\">{department}</h4>\r\n                    <div className=\"text-2xl font-bold text-primary\">{activeDeptEmployees.length}</div>\r\n                    <div className=\"text-xs text-muted-foreground\">{deptEmployees.length} yhteensä</div>\r\n                  </div>\r\n                );\r\n              });\r\n            }, [employees])}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeList;\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ScheduleTable.tsx",
      "size": 20528,
      "sha256": "64692fe0f77aa1acf68883e9c92b0982553c0283b319e326d546864fa3a91094",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\nimport { Badge } from \"./ui/badge\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\r\nimport { Calendar, Clock, Users, AlertCircle, Lock, Plane, Plus, Filter } from \"lucide-react\";\r\nimport { ShiftType, Employee, DateInfo } from \"../types\";\r\nimport { supabase } from \"@/lib/supaBaseClient\";\r\nimport { toast } from \"sonner\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"./ui/popover\";\r\nimport { Button } from \"./ui/button\";\r\nimport { Input } from \"./ui/input\";\r\nimport { useScheduleStore } from \"@/store/useScheduleStore\";\r\n\r\n\r\n\r\n\r\ntype DateCell = DateInfo & { iso: string };\r\n\r\n        type EmployeeRow = {\r\n          id: string;\r\n          name: string;\r\n          email: string;\r\n          department: string;\r\n          is_active: boolean;\r\n        };\r\n\r\n        type AbsenceRow = {\r\n  employee_id: string;\r\n  start_date: string;\r\n  end_date: string | null;\r\n  reason: string | null;\r\n  status: \"pending\" | \"approved\" | \"declined\";\r\n};\r\n\r\n\r\n\r\ninterface ScheduleTableProps {\r\n  employees?: Employee[]; // säilytetään signatuuri\r\n}\r\n\r\n\r\nfunction addDaysISO(iso: string, add: number) {\r\n  // \"T00:00:00\" poistaa aikavyöhykkeen heiton\r\n  const d = new Date(iso + \"T00:00:00\");\r\n  d.setDate(d.getDate() + add);\r\n  return d.toISOString().slice(0, 10);\r\n}\r\n\r\nfunction fiWeekdayShort(d: Date) {\r\n  // su-to klo 0 locale -> FI näyttää ma, ti, ke...\r\n  return d\r\n    .toLocaleDateString(\"fi-FI\", { weekday: \"short\" })\r\n    .replace(\".\", \"\")\r\n    .toUpperCase()\r\n    .slice(0, 2);\r\n}\r\n\r\n function fiDayMonth(d: Date) {\r\n   const day = d.getDate();\r\n   const month = d.getMonth() + 1;\r\n   return `${day}.${month}`;\r\n }\r\n\r\n// 🆕 FI-normalisointi (lowercase + diakriittien poisto)\r\nfunction normalizeFi(s: string) {\r\n  return (s || \"\")\r\n    .toLowerCase()\r\n    .normalize(\"NFD\")\r\n    .replace(/[\\u0300-\\u036f]/g, \"\");\r\n}\r\n\r\n const DEFAULT_FILTERS = {\r\n  departments: [] as string[],\r\n  showActive: false,\r\n  showInactive: false,\r\n  searchTerm: \"\",\r\n}\r\n\r\n\r\nconst ScheduleTable: React.FC<ScheduleTableProps> = () => {\r\n\r\nconst startISO = useScheduleStore((s) => s.startDateISO);\r\nconst days = useScheduleStore((s) => s.days);\r\n\r\n\r\n\r\nconst shiftsMap = useScheduleStore((s) => s.shiftsMap) ?? {};\r\nconst filters = useScheduleStore((s) => s.filters) ?? DEFAULT_FILTERS;\r\n\r\n//tila-filtteri on aktiivinen, jos vain toinen on päällä\r\nconst stateFilterActive = filters.showActive !== filters.showInactive;\r\n\r\nconst employees = useScheduleStore(s => s.employees);\r\nconst filteredEmployees = useMemo(() => {\r\n  const term = normalizeFi((filters.searchTerm ?? \"\").trim());\r\n  return employees.filter((emp) => {\r\n    // department\r\n    if (filters.departments.length > 0 && !filters.departments.includes(emp.department)) {\r\n      return false;\r\n    }\r\n    // active/inactive XOR\r\n    if (stateFilterActive) {\r\n      if (filters.showActive && !emp.isActive) return false;\r\n      if (filters.showInactive && emp.isActive) return false;\r\n    }\r\n    // search (nimi + email + osasto)\r\n    if (term.length > 0) {\r\n      const hay =\r\n        normalizeFi(emp.name) +\r\n        \" \" +\r\n        normalizeFi(emp.email) +\r\n        \" \" +\r\n        normalizeFi(emp.department);\r\n      if (!hay.includes(term)) return false;\r\n    }\r\n    return true;\r\n  });\r\n}, [employees, filters, stateFilterActive]);\r\n  \r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedCell, setSelectedCell] = useState<{ employee: string; day: number } | null>(null);\r\n  const [openPopover, setOpenPopover] = useState<string | null>(null);\r\n\r\n\r\n\r\n\r\n  // Päivärivi tuotetaan ISO:sta -> näyttää täsmälleen sun UI:n kaltaisen otsikon\r\n  const dates: DateCell[] = useMemo(() => {\r\n    return Array.from({ length: days }).map((_, i): DateCell => {\r\n      const iso = addDaysISO(startISO, i);\r\n      const d = new Date(iso + \"T00:00:00\");\r\n      return { day: fiWeekdayShort(d), date: fiDayMonth(d), iso };\r\n    });\r\n  }, [startISO, days]);\r\n\r\n  // Vuorot mapattuna: key = `${employee_id}|${work_date}`\r\n  \r\n\r\n  // 1) Hae työntekijät + 2) hae vuorot valitulle jaksolle\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Employees\r\n        const { data: empData, error: empErr } = await supabase\r\n          .from(\"employees\")\r\n          .select(\"id, name, email, department, is_active, created_at\")\r\n          .order(\"created_at\", { ascending: true });\r\n\r\n        if (empErr) throw empErr;\r\n\r\nconst mappedEmp: Employee[] = (empData ?? []).map((row: EmployeeRow) => ({\r\n  id: row.id,\r\n  name: row.name,\r\n  email: row.email,               // ✅ lisää email\r\n  department: row.department,\r\n  isActive: !!row.is_active,\r\n  shifts: [] as ShiftType[],      // ✅ lisää shifts placeholder\r\n}));\r\n\r\n\r\n        const { data: s, error: sErr } = await supabase\r\n  .from(\"shifts\")\r\n  .select(\"employee_id, work_date, type, hours\")\r\n  .gte(\"work_date\", dates[0].iso)\r\n  .lte(\"work_date\", dates[dates.length - 1].iso)\r\n  .in(\r\n    \"employee_id\",\r\n    mappedEmp.map((e) => e.id)\r\n  );\r\n\r\nif (sErr) throw sErr;\r\n\r\nuseScheduleStore.getState().hydrate({\r\n  employees: mappedEmp,\r\n  dates,\r\n  shifts: (s ?? []).map(r => ({\r\n    employee_id: r.employee_id,\r\n    work_date: r.work_date,\r\n    type: r.type as \"normal\" | \"locked\" | \"absent\" | \"holiday\",\r\n    hours: r.hours ?? 0,\r\n  })),\r\n});\r\nconst { data: abs, error: absErr } = await supabase\r\n  .from(\"absences\")\r\n  .select(\"employee_id, start_date, end_date, reason, status\")\r\n  .eq(\"status\", \"approved\")\r\n  .in(\"employee_id\", mappedEmp.map((e) => e.id));\r\n\r\nif (absErr) throw absErr;\r\n\r\nconst absMap: Record<string, { type: \"absent\" | \"holiday\"; reason: string }> = {};\r\n(abs ?? []).forEach((a: AbsenceRow) => {\r\n  const start = new Date(a.start_date);\r\n  const end = a.end_date ? new Date(a.end_date) : start;\r\n\r\n  for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\r\n    const iso = d.toISOString().slice(0, 10);\r\n    absMap[`${a.employee_id}|${iso}`] = {\r\n      type: a.reason?.toLowerCase() === \"holiday\" ? \"holiday\" : \"absent\",\r\n      reason: a.reason ?? \"\",\r\n    };\r\n  }\r\n});\r\nsetAbsencesMap(absMap);\r\n\r\n      } catch (e) {\r\n        console.error(e);\r\n        toast.error(\"Tietojen haku epäonnistui\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    })();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [startISO, days]);\r\n\r\n\r\n\r\nconst [absencesMap, setAbsencesMap] = useState<Record<string, { type: \"absent\" | \"holiday\"; reason: string }>>({});\r\n\r\n  // Lue solun vuoro mapista\r\nfunction getShift(empId: string, dayIndex: number): ShiftType {\r\n  const iso = dates[dayIndex].iso;\r\n  const key = `${empId}|${iso}`;\r\n  const row = shiftsMap[key];\r\n  if (!row) return { type: \"empty\" };                 // UI-fallback\r\n  if (row.type === \"normal\" || row.type === \"locked\") {\r\n    return { type: row.type, hours: row.hours ?? 0 };\r\n  }\r\n  return { type: row.type }; // absent/holiday\r\n}\r\n\r\n  // Yhteensä tunnit / työntekijä\r\n  const getTotalHours = (employee: Employee) =>\r\n    dates.reduce((sum, _, i) => {\r\n      const s = getShift(employee.id, i);\r\n      return sum + (s.hours || 0);\r\n    }, 0);\r\n\r\n  // Klikkaus: toggle empty <-> normal(8h), upsert DB:hen\r\n// ScheduleTable.tsx\r\n\r\nconst applyCellChange = useScheduleStore(s => s.applyCellChange);\r\n\r\nfunction handleCellClick(employeeId: string, dayIndex: number, hours: number | null) {\r\n  const iso = dates[dayIndex].iso;\r\n  applyCellChange({\r\n    employee_id: employeeId,\r\n    work_date: iso,\r\n    hours\r\n  });\r\n  setSelectedCell({ employee: employeeId, day: dayIndex });\r\n}\r\n\r\n\r\n\r\n\r\n  // UI-helper solun ulkoasuun\r\n  const getShiftDisplay = (shift: ShiftType) => {\r\n    switch (shift.type) {\r\n      case \"normal\":\r\n        return { content: `${shift.hours}h`, color: \"bg-primary text-primary-foreground\", icon: <Clock className=\"w-3 h-3\" /> };\r\n      case \"locked\":\r\n        return { content: `${shift.hours}h`, color: \"bg-amber-500 text-white\", icon: <Lock className=\"w-3 h-3\" /> };\r\n      case \"absent\":\r\n        return { content: \"A\", color: \"bg-destructive text-destructive-foreground\", icon: <AlertCircle className=\"w-3 h-3\" /> };\r\n      case \"holiday\":\r\n        return { content: \"H\", color: \"bg-blue-500 text-white\", icon: <Plane className=\"w-3 h-3\" /> };\r\n      default:\r\n        return { content: \"\", color: \"bg-muted hover:bg-accent\", icon: <Plus className=\"w-3 h-3 opacity-0 group-hover:opacity-50\" /> };\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"text-center py-8 text-muted-foreground\">Ladataan…</div>;\r\n  }\r\n\r\n  return (\r\n  <div className=\"w-full space-y-6\">\r\n    <Card className=\"shadow-lg border-0 bg-gradient-to-r from-background to-secondary/20\">\r\n      <CardHeader className=\"pb-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <Calendar className=\"w-6 h-6 text-primary\" />\r\n            <CardTitle className=\"text-2xl text-primary\">Vuorot</CardTitle>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <Badge variant=\"secondary\" className=\"px-3 py-1\">\r\n            <Users className=\"w-4 h-4 mr-2\" />\r\n            {filteredEmployees.length} työntekijää\r\n            </Badge>\r\n            {(filters.departments.length > 0 || stateFilterActive) && (\r\n              <Badge variant=\"outline\" className=\"px-3 py-1\">\r\n                <Filter className=\"w-3 h-3 mr-1\" />\r\n                Suodatettu\r\n              </Badge>\r\n              )}\r\n              </div>\r\n          </div>\r\n\r\n      </CardHeader>\r\n  {(filters.departments.length > 0 || stateFilterActive || (filters.searchTerm ?? \"\").trim()) && (\r\n    <div className=\"px-6 pb-2\">\r\n      <div className=\"text-sm text-muted-foreground bg-accent/40 px-3 py-2 rounded-md inline-flex items-center gap-3 flex-wrap\">\r\n        <Filter className=\"w-4 h-4\" />\r\n        <div className=\"flex flex-wrap gap-x-3 gap-y-1\">\r\n          {stateFilterActive && (\r\n            <span>{filters.showActive ? \"Vain aktiiviset työntekijät\" : \"Vain ei-aktiiviset työntekijät\"}</span>\r\n          )}\r\n          {filters.departments.length > 0 && (\r\n            <span>Osastot: {filters.departments.join(\", \")}</span>\r\n          )}\r\n          {(filters.searchTerm ?? \"\").trim() && (\r\n            <span>Haku: “{filters.searchTerm.trim()}”</span>\r\n            )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )}\r\n\r\n\r\n      <CardContent className=\"p-0\">\r\n        <div className=\"overflow-x-auto\">\r\n          <div className=\"min-w-full\">\r\n            {/* Header */}\r\n            <div className=\"bg-muted/50 border-b\">\r\n              <div\r\n              className=\"grid gap-px\"\r\n              style={{ gridTemplateColumns: `minmax(200px,280px) repeat(${days}, minmax(96px, 1fr))` }}\r\n              >\r\n                <div className=\"p-4 bg-background\">\r\n                  <span className=\"text-sm font-medium text-muted-foreground\">Työntekijä</span>\r\n                </div>\r\n                {dates.map((date, index) => (\r\n                  <div key={index} className=\"p-3 bg-background text-center\">\r\n                    <div className=\"text-xs font-medium text-muted-foreground\">{date.day}</div>\r\n                    <div className=\"text-sm font-semibold mt-1\">{date.date}</div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Employee Rows */}\r\n              <div className=\"divide-y divide-border\">\r\n              {filteredEmployees.length === 0 ? (\r\n                <div className=\"p-12 text-center text-muted-foreground\">\r\n                  <Filter className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\r\n                  <p>Ei työntekijöitä näytettäväksi nykyisillä suodattimilla</p>\r\n                  <p className=\"text-sm mt-1\">Muuta suodattimia nähdäksesi työntekijöitä</p>\r\n                </div>\r\n              ) : filteredEmployees.map((employee) => (\r\n\r\n                <div\r\n                  key={employee.id}\r\n                  className=\"grid gap-px hover:bg-accent/30 transition-colors\"\r\n                  style={{ gridTemplateColumns: `minmax(200px,280px) repeat(${days}, minmax(96px, 1fr))` }}\r\n                >\r\n                  <div className=\"p-4 bg-background flex items-center justify-between\">\r\n                    <div>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <span className=\"font-medium\">{employee.name}</span>\r\n                        {!employee.isActive && (\r\n                          <Badge variant=\"destructive\" className=\"text-xs\">Ei-aktiivinen</Badge>\r\n                        )}\r\n                      </div>\r\n                      <div className=\"text-xs text-muted-foreground\">{employee.department}</div>\r\n                    </div>\r\n                    <Badge variant=\"outline\" className=\"text-xs\">\r\n                      {getTotalHours(employee)}h\r\n                    </Badge>\r\n                  </div>\r\n\r\n{dates.map((_, dayIndex) => {\r\n  const shift = getShift(employee.id, dayIndex);\r\n  const shiftDisplay = getShiftDisplay(shift);\r\n  const isSelected =\r\n    selectedCell?.employee === employee.id && selectedCell?.day === dayIndex;\r\n\r\n  const key = `${employee.id}|${dates[dayIndex].iso}`;\r\n  const absence = absencesMap[key];\r\n\r\n  return (\r\n    <Popover\r\n  key={dayIndex}\r\n  open={openPopover === `${employee.id}-${dayIndex}`}\r\n  onOpenChange={(o) =>\r\n    setOpenPopover(o ? `${employee.id}-${dayIndex}` : null)\r\n  }\r\n>\r\n  <PopoverTrigger asChild>\r\n    <div\r\n      className={`\r\n        h-16 p-2 m-0 rounded-none border-0 group\r\n        flex items-center justify-center\r\n        ${isSelected ? \"ring-2 ring-ring ring-offset-2\" : \"\"}\r\n        transition-all duration-200 hover:scale-105 hover:shadow-md\r\n        ${\r\n          absence\r\n            ? absence.type === \"holiday\"\r\n              ? \"bg-blue-100 cursor-not-allowed\"\r\n              : \"bg-red-100 cursor-not-allowed\"\r\n            : shiftDisplay.color + \" cursor-pointer\"\r\n        }\r\n      `}\r\n    >\r\n      <div className=\"flex flex-col items-center space-y-1\">\r\n        {absence ? (\r\n          <>\r\n            <span\r\n              className={`text-xs font-medium ${\r\n                absence.type === \"holiday\" ? \"text-blue-600\" : \"text-red-600\"\r\n              }`}\r\n            >\r\n              {absence.type === \"holiday\" ? \"L\" : \"A\"}\r\n            </span>\r\n            <span className=\"text-[10px]\">\r\n              {absence.type === \"holiday\" ? \"Loma\" : \"Poissaolo\"}\r\n            </span>\r\n          </>\r\n        ) : (\r\n          <>\r\n            {shiftDisplay.icon}\r\n            {shiftDisplay.content && (\r\n              <span className=\"text-xs font-medium\">\r\n                {shiftDisplay.content}\r\n              </span>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  </PopoverTrigger>\r\n\r\n  {/* Näytä PopoverContent vain jos ei ole absence */}\r\n{!absence && (\r\n  <PopoverContent className=\"w-64 p-3 space-y-3\" side=\"bottom\" align=\"center\">\r\n    <div className=\"text-sm font-medium text-center\">\r\n      {employee.name} – {dates[dayIndex].day} {dates[dayIndex].date}\r\n    </div>\r\n\r\n    {/* Pikavalinnat */}\r\n    <div className=\"grid grid-cols-2 gap-2\">\r\n      {[4, 6, 7.5, 8].map((h) => (\r\n        <Button\r\n          key={h}\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={() => {\r\n            handleCellClick(employee.id, dayIndex, h);\r\n            setOpenPopover(null);\r\n          }}\r\n          className=\"justify-center\"\r\n        >\r\n          {h}h\r\n        </Button>\r\n      ))}\r\n    </div>\r\n\r\n    {/* Muu-arvo + Tallenna */}\r\n    <div className=\"flex items-center gap-2\">\r\n      <Input\r\n        type=\"number\"\r\n        step=\"0.5\"\r\n        placeholder=\"esim. 5.5\"\r\n        className=\"h-8\"\r\n        onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\r\n          if (e.key === \"Enter\") {\r\n            const val = parseFloat(e.currentTarget.value);\r\n            if (!isNaN(val)) {\r\n              handleCellClick(employee.id, dayIndex, val);\r\n              setOpenPopover(null);\r\n            }\r\n          }\r\n        }}\r\n      />\r\n      <Button\r\n        size=\"sm\"\r\n        onClick={(e) => {\r\n          const input = e.currentTarget.parentElement?.querySelector(\"input\") as HTMLInputElement | null;\r\n          const val = input ? parseFloat(input.value) : NaN;\r\n          if (!isNaN(val)) {\r\n            handleCellClick(employee.id, dayIndex, val);\r\n            setOpenPopover(null);\r\n          }\r\n        }}\r\n      >\r\n        ✓\r\n      </Button>\r\n    </div>\r\n\r\n    {/* Poista vuoro */}\r\n    <div className=\"flex justify-center\">\r\n      <Button\r\n        variant=\"ghost\"\r\n        size=\"sm\"\r\n        onClick={() => {\r\n          handleCellClick(employee.id, dayIndex, 0);\r\n          setOpenPopover(null);\r\n        }}\r\n        className=\"text-destructive\"\r\n      >\r\n        Poista (0h)\r\n      </Button>\r\n    </div>\r\n\r\n    <div className=\"text-xs text-muted-foreground text-center\">\r\n      Vinkki: 0h poistaa vuoron.\r\n    </div>\r\n  </PopoverContent>\r\n)}\r\n\r\n</Popover>\r\n\r\n  );\r\n})}\r\n\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Summary Row */}\r\n            <div className=\"bg-accent/50 border-t-2 border-primary/20\">\r\n              <div\r\n              className=\"grid gap-px\"\r\n              style={{ gridTemplateColumns: `minmax(200px,280px) repeat(${days}, minmax(96px, 1fr))` }}\r\n              >\r\n\r\n                <div className=\"p-4 bg-background\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Users className=\"w-4 h-4 text-muted-foreground\" />\r\n                    <span className=\"font-medium text-sm\">\r\n                      Yhteensä ({filteredEmployees.length} työntekijää)\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                {dates.map((_, dayIndex) => {\r\n                  const dayTotal = filteredEmployees.reduce((total, emp) => {\r\n                    const s = getShift(emp.id, dayIndex);\r\n                    return total + (s?.hours || 0);\r\n                  }, 0);\r\n\r\n                  const filledCount = filteredEmployees.filter(\r\n                    (emp) => getShift(emp.id, dayIndex)?.type !== \"empty\"\r\n                  ).length;\r\n\r\n                  return (\r\n                    <div key={dayIndex} className=\"p-3 bg-background text-center\">\r\n                      <div className=\"text-sm font-semibold text-primary\">{dayTotal}h</div>\r\n                      <div className=\"text-xs text-muted-foreground\">{filledCount} henkilöä</div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n\r\n    {/* Legend */}\r\n    <Card className=\"shadow-md\">\r\n      <CardContent className=\"p-4\">\r\n        <div className=\"flex flex-wrap gap-4 items-center justify-center\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <div className=\"w-4 h-4 bg-primary rounded-sm flex items-center justify-center\">\r\n              <Clock className=\"w-2.5 h-2.5 text-primary-foreground\" />\r\n            </div>\r\n            <span className=\"text-sm\">Normaali vuoro</span>\r\n          </div>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <div className=\"w-4 h-4 bg-amber-500 rounded-sm flex items-center justify-center\">\r\n              <Lock className=\"w-2.5 h-2.5 text-white\" />\r\n            </div>\r\n            <span className=\"text-sm\">Lukittu vuoro</span>\r\n          </div>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <div className=\"w-4 h-4 bg-destructive rounded-sm flex items-center justify-center\">\r\n              <AlertCircle className=\"w-2.5 h-2.5 text-destructive-foreground\" />\r\n            </div>\r\n            <span className=\"text-sm\">Poissaolo</span>\r\n          </div>\r\n          <div className=\"flex items-center space-x-2\">\r\n            <div className=\"w-4 h-4 bg-blue-500 rounded-sm flex items-center justify-center\">\r\n              <Plane className=\"w-2.5 h-2.5 text-white\" />\r\n            </div>\r\n            <span className=\"text-sm\">Loma</span>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n\r\n    {/* Footer Note */}\r\n    <div className=\"text-center text-xs text-muted-foreground bg-muted/30 p-3 rounded-lg\">\r\n      Vinkki: klikkaa solua → valitse tunnit. 0h poistaa vuoron.\r\n    </div>\r\n  </div>\r\n);\r\n}\r\n\r\nexport default ScheduleTable;\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/Toolbar.tsx",
      "size": 29343,
      "sha256": "d204fd573ee37a9d3c49bb97f35b830225ac1989969cbe70e06a80be546388cd",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport { useScheduleStore } from \"@/store/useScheduleStore\";\r\nimport React, { useMemo, useRef, useState } from \"react\";\r\nimport { Button } from \"./ui/button\";\r\nimport { Card, CardContent } from \"./ui/card\";\r\nimport { Checkbox } from \"./ui/checkbox\";\r\nimport { Badge } from \"./ui/badge\";\r\nimport { Separator } from \"./ui/separator\";\r\nimport NotificationsPopover from \"./ui/NotificationsPopover\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"./ui/popover\";\r\nimport {\r\n  Upload,\r\n  RefreshCw,\r\n  Settings,\r\n  Calendar as CalIcon,\r\n  FileSpreadsheet,\r\n  FileText,\r\n  Wand2,\r\n  Save,\r\n  Undo,\r\n  Redo,\r\n  Filter,\r\n  Search,\r\n  Check,\r\n  ChevronDown,\r\n  X,\r\n  Building,\r\n  Users\r\n} from \"lucide-react\";\r\nimport { toast } from \"sonner\";\r\nimport { supabase } from \"@/lib/supaBaseClient\";\r\n\r\n\r\n\r\n\r\n\r\n// pvm apurit\r\nfunction addDaysISO(iso: string, add: number) {\r\n  const d = new Date(iso + \"T00:00:00\");\r\n  d.setDate(d.getDate() + add);\r\n  return d.toISOString().slice(0, 10);\r\n}\r\n\r\n\r\nfunction formatTime(d = new Date()) {\r\n  return d.toLocaleTimeString(\"fi-FI\", { hour: \"2-digit\", minute: \"2-digit\" });\r\n}\r\n\r\n\r\n  function getISOWeek(dateIso: string) {\r\n  const d = new Date(dateIso + \"T00:00:00\");\r\n  // ISO week algorithm\r\n  const dayNum = (d.getUTCDay() + 6) % 7;\r\n  d.setUTCDate(d.getUTCDate() - dayNum + 3);\r\n  const firstThursday = new Date(Date.UTC(d.getUTCFullYear(), 0, 4));\r\n  const week =\r\n    1 +\r\n    Math.round(\r\n      ((d.getTime() - firstThursday.getTime()) / 86400000 - 3 + ((firstThursday.getUTCDay() + 6) % 7)) /\r\n        7\r\n    );\r\n  return week;\r\n}\r\n\r\n\r\ntype EmpRow = {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  department: string;\r\n  is_active: boolean;\r\n};\r\n\r\ntype ShiftRow = {\r\n  employee_id: string;\r\n  work_date: string;\r\n  type: \"normal\" | \"locked\" | \"absent\" | \"holiday\";\r\n  hours: number | null;\r\n};\r\n\r\nconst Toolbar = () => {\r\n  const START_ISO = useScheduleStore((s) => s.startDateISO);\r\n  const DAYS = useScheduleStore((s) => s.days);\r\n  const range = useMemo(() => Array.from({ length: DAYS }, (_, i) => addDaysISO(START_ISO, i)), [START_ISO, DAYS]);\r\n\r\n\r\nconst undo = useScheduleStore((s) => s.undo);\r\nconst redo = useScheduleStore((s) => s.redo);\r\nconst canUndo = useScheduleStore((s) => s.undoStack.length > 0);\r\nconst canRedo = useScheduleStore((s) => s.redoStack.length > 0);\r\n\r\nconst saveAll = useScheduleStore((s) => s.saveAll);\r\nconst dirty = useScheduleStore((s) => s.dirty);\r\n\r\nasync function handleSave() {\r\n  await saveAll();\r\n}\r\n\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [lastSavedAt, setLastSavedAt] = useState<string | null>(null);\r\n  const [empCount, setEmpCount] = useState<number | null>(null);\r\n\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // ————— data hakuja joita export/healthcheck/auto-gen käyttää —————\r\n  async function fetchActiveEmployees(): Promise<EmpRow[]> {\r\n    const { data, error } = await supabase\r\n      .from(\"employees\")\r\n      .select(\"id, name, email, department, is_active\")\r\n      .eq(\"is_active\", true)\r\n      .order(\"created_at\", { ascending: true });\r\n\r\n    if (error) throw error;\r\n    const rows = (data ?? []) as EmpRow[];\r\n    setEmpCount(rows.length);\r\n    return rows;\r\n  }\r\n\r\n\r\n  async function fetchShiftsByRange(empIds?: string[]): Promise<ShiftRow[]> {\r\n    const start = range[0];\r\n    const end = range[range.length - 1];\r\n    let q = supabase\r\n      .from(\"shifts\")\r\n      .select(\"employee_id, work_date, type, hours\")\r\n      .gte(\"work_date\", start)\r\n      .lte(\"work_date\", end);\r\n\r\n    if (empIds && empIds.length) q = q.in(\"employee_id\", empIds);\r\n\r\n    const { data, error } = await q;\r\n    if (error) throw error;\r\n    return (data ?? []) as ShiftRow[];\r\n  }\r\n\r\n  type AbsenceRow = {\r\n  employee_id: string;\r\n  start_date: string;             // YYYY-MM-DD\r\n  end_date: string | null;        // voi olla null → käytä start_datea\r\n  status: \"pending\" | \"approved\" | \"declined\";\r\n};\r\n\r\nasync function fetchAbsencesByRange(empIds: string[]): Promise<AbsenceRow[]> {\r\n  const { data, error } = await supabase\r\n    .from(\"absences\")\r\n    .select(\"employee_id, start_date, end_date, status\")\r\n    .in(\"employee_id\", empIds)\r\n    .neq(\"status\", \"declined\"); // vain pending/approved blokkaa\r\n\r\n  if (error) throw error;\r\n  const rows = (data ?? []) as AbsenceRow[];\r\n\r\n  // Pidä vain poissaolot, jotka osuvat johonkin RANGE-päivään\r\n  return rows.filter((r) => {\r\n    const s = r.start_date;\r\n    const e = r.end_date ?? s;\r\n    return range.some((day) => day >= s && day <= e);\r\n  });\r\n}\r\n\r\n\r\n  // ————— ACTIONS —————\r\n\r\n  // 1) Auto-generointi — täyttää puuttuvat vuorot 8h normaaliksi, jos ei poissaoloa\r\n  const handleAutoGenerate = async () => {\r\n    setIsGenerating(true);\r\n    try {\r\n      toast.info(\"Aloitetaan automaattinen vuorojen generointi…\");\r\n\r\n      const employees = await fetchActiveEmployees();\r\n      if (!employees.length) {\r\n        toast.info(\"Ei aktiivisia työntekijöitä.\");\r\n        return;\r\n      }\r\n      const empIds = employees.map((e) => e.id);\r\n      const [existing, absences] = await Promise.all([\r\n        fetchShiftsByRange(empIds),\r\n        fetchAbsencesByRange(empIds),\r\n      ]);\r\n\r\n      // Map helpot tarkistukset\r\n      const existingSet = new Set(existing.map((s) => `${s.employee_id}|${s.work_date}`));\r\n      const absenceMap = new Map<string, { s: string; e: string }[]>();\r\n      absences.forEach((a: { employee_id: string; start_date: string; end_date?: string | null }) => {\r\n        const arr = absenceMap.get(a.employee_id) ?? [];\r\n        arr.push({ s: a.start_date, e: a.end_date ?? a.start_date });\r\n        absenceMap.set(a.employee_id, arr);\r\n      });\r\n\r\n      const batch: ShiftRow[] = [];\r\n      for (const emp of employees) {\r\n        for (const d of range) {\r\n          const key = `${emp.id}|${d}`;\r\n          if (existingSet.has(key)) continue; // älä koske olemassaolevaan\r\n\r\n          // jos poissaolo kattaa päivän, skippaa\r\n          const ranges = absenceMap.get(emp.id) ?? [];\r\n          const blocked = ranges.some((r) => d >= r.s && d <= r.e);\r\n          if (blocked) continue;\r\n\r\n          batch.push({\r\n            employee_id: emp.id,\r\n            work_date: d,\r\n            type: \"normal\",\r\n            hours: 8,\r\n          });\r\n        }\r\n      }\r\n\r\n      if (!batch.length) {\r\n        toast.info(\"Ei täytettäviä tyhjiä soluja tälle jaksolle.\");\r\n        return;\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from(\"shifts\")\r\n        .upsert(batch, { onConflict: \"employee_id,work_date\" });\r\n\r\n      if (error) throw error;\r\n\r\n      setLastSavedAt(formatTime());\r\n      toast.success(`Generoitu ${batch.length} vuoroa.`);\r\n      // Kirjaa ilmoitus\r\nawait supabase.from(\"notifications\").insert({\r\n  type: \"shift_auto\",\r\n  title: \"Vuorot generoitu\",\r\n  message: `Generoitu ${batch.length} vuoroa jaksolle ${range[0]} – ${range[range.length - 1]}.`\r\n});\r\n   } catch (e) {\r\n  console.error(e);\r\n  toast.error(\"Generointi epäonnistui\");\r\n} finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n\r\n  // 3) Export CSV (Excel avaa suoraan)\r\n  const handleExportExcel = async () => {\r\n    try {\r\n      const employees = await fetchActiveEmployees();\r\n      const shifts = await fetchShiftsByRange(employees.map((e) => e.id));\r\n      const byId = new Map(employees.map((e) => [e.id, e]));\r\n      const header = [\r\n        \"employee_name\",\r\n        \"employee_email\",\r\n        \"department\",\r\n        \"work_date\",\r\n        \"type\",\r\n        \"hours\",\r\n      ];\r\n\r\n      const rows = shifts\r\n        .sort((a, b) => (a.work_date < b.work_date ? -1 : a.work_date > b.work_date ? 1 : 0))\r\n        .map((s) => {\r\n          const emp = byId.get(s.employee_id)!;\r\n          return [\r\n            emp?.name ?? \"\",\r\n            emp?.email ?? \"\",\r\n            emp?.department ?? \"\",\r\n            s.work_date,\r\n            s.type,\r\n            s.hours ?? 0,\r\n          ];\r\n        });\r\n\r\n      // lisää myös puuttuvat (tyhjät) rivit jos haluat: MVP ei lisää\r\n\r\n      const csv = [header, ...rows]\r\n        .map((r) => r.map((v) => `\"${String(v).replace(/\"/g, '\"\"')}\"`).join(\",\"))\r\n        .join(\"\\n\");\r\n\r\n      const blob = new Blob([csv], { type: \"text/csv;charset=utf-8\" });\r\n      const url = URL.createObjectURL(blob);\r\n      const a = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = `vuorot_${range[0]}_${range[range.length - 1]}.csv`;\r\n      a.click();\r\n      URL.revokeObjectURL(url);\r\n      toast.success(\"CSV ladattu\");\r\n    } catch (e) {\r\n      console.error(e);\r\n      toast.error(\"CSV-vienti epäonnistui\");\r\n    }\r\n  };\r\n\r\n  // 4) Export PDF (MVP: tulostusystävällinen näkymä -> print)\r\n  const handleExportPDF = async () => {\r\n    try {\r\n      const employees = await fetchActiveEmployees();\r\n      const shifts = await fetchShiftsByRange(employees.map((e) => e.id));\r\n      const byId = new Map(employees.map((e) => [e.id, e]));\r\n\r\n      const win = window.open(\"\", \"_blank\", \"width=1024,height=768\");\r\n      if (!win) {\r\n        toast.error(\"Ponnahdusikkuna estetty\");\r\n        return;\r\n      }\r\n      const style = `\r\n        <style>\r\n          body { font-family: ui-sans-serif, system-ui, -apple-system; padding: 24px; }\r\n          h1,h2 { margin: 0 0 8px; }\r\n          table { width: 100%; border-collapse: collapse; font-size: 12px; }\r\n          th, td { border: 1px solid #ddd; padding: 6px 8px; text-align: left; }\r\n          th { background: #f3f4f6; }\r\n          .muted { color: #6b7280; font-size: 12px; margin-bottom: 12px; }\r\n        </style>`;\r\n      const header = `<h1>Vuorolistat</h1>\r\n        <div class=\"muted\">${range[0]} – ${range[range.length - 1]} • ${employees.length} työntekijää</div>`;\r\n\r\n      const rowsHtml = shifts\r\n        .sort((a, b) =>\r\n          a.employee_id === b.employee_id\r\n            ? a.work_date.localeCompare(b.work_date)\r\n            : a.employee_id.localeCompare(b.employee_id)\r\n        )\r\n        .map((s) => {\r\n          const e = byId.get(s.employee_id)!;\r\n          return `<tr>\r\n            <td>${e?.name ?? \"\"}</td>\r\n            <td>${e?.email ?? \"\"}</td>\r\n            <td>${e?.department ?? \"\"}</td>\r\n            <td>${s.work_date}</td>\r\n            <td>${s.type}</td>\r\n            <td>${s.hours ?? 0}</td>\r\n          </tr>`;\r\n        })\r\n        .join(\"\");\r\n\r\n      win.document.write(`\r\n        <!doctype html><html><head><meta charset=\"utf-8\" />\r\n        <title>Vuorot</title>${style}</head><body>\r\n          ${header}\r\n          <table>\r\n            <thead><tr>\r\n              <th>Nimi</th><th>Sähköposti</th><th>Osasto</th>\r\n              <th>Pvm</th><th>Tyyppi</th><th>Tunnit</th>\r\n            </tr></thead>\r\n            <tbody>${rowsHtml}</tbody>\r\n          </table>\r\n          <script>window.print();</script>\r\n        </body></html>\r\n      `);\r\n      win.document.close();\r\n    } catch (e) {\r\n      console.error(e);\r\n      toast.error(\"PDF-vienti epäonnistui\");\r\n    }\r\n  };\r\n\r\n  // 5) Import CSV (email,work_date,hours)\r\n  const handleImport = () => fileInputRef.current?.click();\r\n\r\n  const onImportFile = async (file: File) => {\r\n    try {\r\n      const text = await file.text();\r\n      // Odotettu header: email,work_date,hours\r\n      const lines = text\r\n        .split(/\\r?\\n/)\r\n        .map((l) => l.trim())\r\n        .filter(Boolean);\r\n      if (!lines.length) {\r\n        toast.error(\"Tyhjä tiedosto\");\r\n        return;\r\n      }\r\n\r\n      const header = lines[0].split(\",\").map((s) => s.trim().toLowerCase());\r\n      const emailIdx = header.indexOf(\"email\");\r\n      const dateIdx = header.indexOf(\"work_date\");\r\n      const hoursIdx = header.indexOf(\"hours\");\r\n      if (emailIdx === -1 || dateIdx === -1 || hoursIdx === -1) {\r\n        toast.error('Odotettu header: \"email,work_date,hours\"');\r\n        return;\r\n      }\r\n\r\n      const employees = await fetchActiveEmployees();\r\n      const byEmail = new Map(employees.map((e) => [e.email.toLowerCase(), e]));\r\n\r\n      const bad: string[] = [];\r\n      const batch: ShiftRow[] = [];\r\n      for (let i = 1; i < lines.length; i++) {\r\n        const cols = lines[i].split(\",\").map((s) => s.trim().replace(/^\"|\"$/g, \"\"));\r\n        if (cols.length < 3) continue;\r\n        const email = cols[emailIdx].toLowerCase();\r\n        const d = cols[dateIdx];\r\n        const h = parseFloat(cols[hoursIdx]);\r\n        if (!email || !d || isNaN(h)) continue;\r\n        const emp = byEmail.get(email);\r\n        if (!emp) {\r\n          bad.push(lines[i]);\r\n          continue;\r\n        }\r\n        batch.push({\r\n          employee_id: emp.id,\r\n          work_date: d,\r\n          type: h > 0 ? \"normal\" : \"normal\",\r\n          hours: h > 0 ? h : 0,\r\n        });\r\n      }\r\n\r\n      if (!batch.length) {\r\n        toast.error(\"Ei kelvollisia rivejä importissa\");\r\n        return;\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from(\"shifts\")\r\n        .upsert(batch, { onConflict: \"employee_id,work_date\" });\r\n      if (error) throw error;\r\n\r\n      setLastSavedAt(formatTime());\r\n      if (bad.length) {\r\n        toast.warning(\r\n          `Import OK (${batch.length} riviä). ${bad.length} riviä jäi väliin tuntemattoman emailin takia.`\r\n        );\r\n      } else {\r\n        toast.success(`Import OK (${batch.length} riviä).`);\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n      toast.error(\"Import epäonnistui\");\r\n    } finally {\r\n      if (fileInputRef.current) fileInputRef.current.value = \"\";\r\n    }\r\n  };\r\n\r\n  // ————— UI —————\r\n  const weekNo = useMemo(() => getISOWeek(START_ISO), [START_ISO]);\r\n  const year = useMemo(() => new Date(START_ISO + \"T00:00:00\").getFullYear(), [START_ISO]);\r\n\r\n  return (\r\n    <Card className=\"shadow-md border-0 bg-gradient-to-r from-background to-secondary/10\">\r\n      <CardContent className=\"p-4\">\r\n        <div className=\"flex flex-wrap items-center gap-3 justify-between\">\r\n          {/* Left Section - Main Actions */}\r\n          <div className=\"flex items-center gap-2\">\r\n            <Button\r\n              onClick={handleAutoGenerate}\r\n              disabled={isGenerating}\r\n              className=\"bg-primary hover:bg-primary/90\"\r\n            >\r\n              {isGenerating ? (\r\n                <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\r\n              ) : (\r\n                <Wand2 className=\"w-4 h-4 mr-2\" />\r\n              )}\r\n              {isGenerating ? \"Generoidaan...\" : \"Auto-generointi\"}\r\n            </Button>\r\n\r\n            <Separator orientation=\"vertical\" className=\"h-8\" />\r\n\r\n<Button\r\n  variant=\"outline\"\r\n  onClick={handleSave}\r\n  disabled={!dirty}\r\n  className={dirty ? \"border-amber-500 text-amber-600\" : \"\"}\r\n>\r\n  <Save className=\"w-4 h-4 mr-2\" />\r\n  Tallenna\r\n  {dirty && (\r\n    <Badge variant=\"secondary\" className=\"ml-2 bg-amber-100 text-amber-700\">\r\n      •\r\n    </Badge>\r\n  )}\r\n</Button>\r\n\r\n\r\n<div className=\"flex items-center gap-1\">\r\n  <Button variant=\"ghost\" size=\"sm\" onClick={undo} disabled={!canUndo}>\r\n    <Undo className=\"w-4 h-4\" />\r\n  </Button>\r\n  <Button variant=\"ghost\" size=\"sm\" onClick={redo} disabled={!canRedo}>\r\n    <Redo className=\"w-4 h-4\" />\r\n  </Button>\r\n</div>\r\n          </div>\r\n\r\n    {/* Center Section - View Options */}\r\n<div className=\"flex items-center gap-2\">\r\n  <SearchPopover />  {/* 🆕 oikea haku */}\r\n  <FilterPopover />\r\n  {/* Aikajakson valitsin */}\r\n  <PeriodSelector />\r\n</div>\r\n\r\n\r\n\r\n          {/* Right Section - Export/Import */}\r\n          <div className=\"flex items-center gap-2\">\r\n            <input\r\n              ref={fileInputRef}\r\n              type=\"file\"\r\n              accept=\".csv,text/csv\"\r\n              className=\"hidden\"\r\n              onChange={(e) => {\r\n                const f = e.target.files?.[0];\r\n                if (f) onImportFile(f);\r\n              }}\r\n            />\r\n            <Button variant=\"outline\" onClick={handleImport}>\r\n              <Upload className=\"w-4 h-4 mr-2\" />\r\n              Tuo\r\n            </Button>\r\n\r\n            <div className=\"flex items-center gap-1\">\r\n              <Button variant=\"outline\" size=\"sm\" onClick={handleExportExcel}>\r\n                <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\r\n                Excel\r\n              </Button>\r\n              <Button variant=\"outline\" size=\"sm\" onClick={handleExportPDF}>\r\n                <FileText className=\"w-4 h-4 mr-2\" />\r\n                PDF\r\n              </Button>\r\n            </div>\r\n\r\n            <Separator orientation=\"vertical\" className=\"h-8\" />\r\n            <NotificationsPopover />\r\n\r\n\r\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => toast.info(\"Asetukset tulevat pian.\")}>\r\n              <Settings className=\"w-4 h-4\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Status Bar */}\r\n        <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-border/50\">\r\n          <div className=\"flex flex-wrap items-center gap-2 text-sm text-muted-foreground\">\r\n            <span>\r\n              Viimeksi tallennettu: {lastSavedAt ? lastSavedAt : \"—\"}\r\n            </span>\r\n            <span>•</span>\r\n            <span>{empCount ?? \"…\"} työntekijää</span>\r\n            <span>•</span>\r\n            <span>\r\n              Viikko {weekNo}/{year}\r\n            </span>\r\n            <span>•</span>\r\n            <span>\r\n              Jakso: {range[0]} – {range[range.length - 1]}\r\n            </span>\r\n          </div>\r\n          \r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// === PeriodSelector ===\r\ntype PeriodValue = 7 | 10 | 14 | 30;\r\ntype PeriodItem = { value: PeriodValue; label: string; description: string };\r\n\r\nconst PERIODS: PeriodItem[] = [\r\n  { value: 7,  label: \"7 päivää\",  description: \"Viikkonäkymä\" },\r\n  { value: 10, label: \"10 päivää\", description: \"Laajennettu\" },\r\n  { value: 14, label: \"14 päivää\", description: \"Kaksiviikkoinen\" },\r\n  { value: 30, label: \"30 päivää\", description: \"Kuukausinäkymä\" },\r\n];\r\n\r\nfunction PeriodSelector() {\r\n  const days = useScheduleStore((s) => s.days);\r\n  const startISO = useScheduleStore((s) => s.startDateISO);\r\n  const setRange = useScheduleStore((s) => s.setRange);\r\n\r\n  const current = PERIODS.find((p) => p.value === days) ?? PERIODS[1];\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button variant=\"ghost\" size=\"sm\" className=\"h-9 px-3 min-w-[160px] justify-start\">\r\n          <span className=\"inline-flex items-center gap-2\">\r\n             <CalIcon className=\"w-4 h-4\" />\r\n            <span>{current.label}</span>\r\n          <ChevronDown className=\"w-3 h-3\" />\r\n          </span>\r\n        </Button>\r\n      </PopoverTrigger>\r\n\r\n      <PopoverContent className=\"w-72 p-2\" align=\"center\">\r\n        <div className=\"px-2 py-1.5 text-sm font-medium text-muted-foreground\">\r\n          Valitse aikajakso\r\n        </div>\r\n        <div className=\"space-y-1\" role=\"menu\" aria-label=\"Aikajakso\">\r\n          {PERIODS.map((option) => {\r\n            const active = days === option.value;\r\n            return (\r\n              <button\r\n                key={option.value}\r\n                role=\"menuitemradio\"\r\n                aria-checked={active}\r\n                onClick={() => setRange(startISO, option.value)}\r\n                className={`w-full flex items-center justify-between p-2 rounded-md text-left hover:bg-accent ${\r\n                  active ? \"bg-accent\" : \"\"\r\n                }`}\r\n              >\r\n                <div className=\"flex flex-col\">\r\n                  <span className=\"text-sm font-medium\">{option.label}</span>\r\n                  <span className=\"text-xs text-muted-foreground\">{option.description}</span>\r\n                </div>\r\n                <div className=\"flex items-center\">\r\n                  {active && <Check className=\"w-4 h-4 text-primary\" />}\r\n                </div>\r\n                \r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n\r\n\r\nconst DEFAULT_FILTERS = {\r\n  departments: [] as string[],\r\n  showActive: false,\r\n  showInactive: false,\r\n  searchTerm: \"\", \r\n  };\r\n\r\nfunction FilterPopover() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const filters = useScheduleStore((s) => s.filters) ?? DEFAULT_FILTERS;\r\n  const setFilters = useScheduleStore((s) => s.setFilters) ?? (() => {});\r\n  const resetFilters = useScheduleStore((s) => s.resetFilters) ?? (() => {});\r\n\r\n const employeesFromStore = useScheduleStore((s) => s.employees);\r\nconst employees = useMemo(() => employeesFromStore ?? [], [employeesFromStore]);\r\n\r\nconst employeeDepartments = useMemo(\r\n  () => employees.map((e) => e.department),\r\n  [employees]\r\n);\r\n\r\nconst availableDepartments = useMemo(\r\n  () => Array.from(new Set(employeeDepartments)).filter(Boolean) as string[],\r\n  [employeeDepartments]\r\n);\r\n\r\n\r\n  // 2) Tila-suodatus on aktiivinen vain jos vain toinen toggle on päällä (XOR)\r\n  const stateFilterActive = filters.showActive !== filters.showInactive;\r\n\r\n  // 3) Badge: 1 piste osastofiltteristä (jos valittuja), 1 piste tila-XOR:sta\r\n  const activeFilterCount =\r\n    (filters.departments.length > 0 ? 1 : 0) +\r\n    (stateFilterActive ? 1 : 0);\r\n\r\n  const handleDepartmentToggle = (dept: string) => {\r\n    const exists = filters.departments.includes(dept);\r\n    setFilters({\r\n      departments: exists\r\n        ? filters.departments.filter((d) => d !== dept)\r\n        : [...filters.departments, dept],\r\n    });\r\n  };\r\n\r\n  const handleActiveToggle = () => setFilters({ showActive: !filters.showActive });\r\n  const handleInactiveToggle = () => setFilters({ showInactive: !filters.showInactive });\r\n\r\n  const handleClearFilters = () => {\r\n    resetFilters();\r\n    setIsOpen(false); // 4) UX: tyhjennä -> sulje\r\n  };\r\n\r\n  return (\r\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\r\n      <PopoverTrigger asChild>\r\n        <div\r\n          className={`\r\n            inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium\r\n            ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2\r\n            focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none\r\n            disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-9 px-3 cursor-pointer\r\n            ${activeFilterCount > 0 ? \"bg-primary text-primary-foreground hover:bg-primary/90\" : \"\"}\r\n          `}\r\n        >\r\n          <Filter className=\"w-4 h-4 mr-2\" />\r\n          Suodatin\r\n          {activeFilterCount > 0 && (\r\n            <Badge variant=\"secondary\" className=\"ml-2 bg-white text-primary text-xs\">\r\n              {activeFilterCount}\r\n            </Badge>\r\n          )}\r\n        </div>\r\n      </PopoverTrigger>\r\n\r\n      <PopoverContent className=\"w-80 p-4\" align=\"center\">\r\n        <div className=\"space-y-4\">\r\n          {/* Header */}\r\n          <div className=\"flex items-center justify-between\">\r\n            <h3 className=\"font-medium\">Suodattimet</h3>\r\n            {(filters.departments.length > 0 || stateFilterActive) && (\r\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleClearFilters} className=\"h-6 px-2 text-xs\">\r\n                <X className=\"w-3 h-3 mr-1\" />\r\n                Tyhjennä\r\n              </Button>\r\n            )}\r\n          </div>\r\n\r\n          <Separator />\r\n\r\n          {/* Department Filters */}\r\n          <div className=\"space-y-3\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Building className=\"w-4 h-4 text-muted-foreground\" />\r\n              <span className=\"font-medium text-sm\">Osastot</span>\r\n            </div>\r\n            <div className=\"space-y-2 pl-6\">\r\n              {availableDepartments.map((department) => (\r\n                <div key={department} className=\"flex items-center space-x-2\">\r\n                  <Checkbox\r\n                    id={`dept-${department}`}\r\n                    checked={filters.departments.includes(department)}\r\n                    onCheckedChange={() => handleDepartmentToggle(department)}\r\n                  />\r\n                  <label htmlFor={`dept-${department}`} className=\"text-sm cursor-pointer\">\r\n                    {department}\r\n                  </label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <Separator />\r\n\r\n          {/* Employee Status Filters */}\r\n          <div className=\"space-y-3\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Users className=\"w-4 h-4 text-muted-foreground\" />\r\n              <span className=\"font-medium text-sm\">Työntekijöiden tila</span>\r\n            </div>\r\n            <div className=\"space-y-2 pl-6\">\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Checkbox id=\"show-active\" checked={filters.showActive} onCheckedChange={handleActiveToggle} />\r\n                <label htmlFor=\"show-active\" className=\"text-sm cursor-pointer\">\r\n                  Näytä aktiiviset työntekijät\r\n                </label>\r\n              </div>\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Checkbox id=\"show-inactive\" checked={filters.showInactive} onCheckedChange={handleInactiveToggle} />\r\n                <label htmlFor=\"show-inactive\" className=\"text-sm cursor-pointer\">\r\n                  Näytä ei-aktiiviset työntekijät\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Filter Summary */}\r\n          {(filters.departments.length > 0 || stateFilterActive) && (\r\n            <>\r\n              <Separator />\r\n              <div className=\"text-xs text-muted-foreground\">\r\n                {filters.departments.length > 0 && <div>Osastot: {filters.departments.join(\", \")}</div>}\r\n                {stateFilterActive && (\r\n                  <div>Tila: {filters.showActive ? \"Vain aktiiviset\" : \"Vain ei-aktiiviset\"}</div>\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Toolbar;\r\n\r\n\r\nfunction SearchPopover() {\r\n  const filters = useScheduleStore((s) => s.filters) ?? DEFAULT_FILTERS;\r\n  const setFilters = useScheduleStore((s) => s.setFilters);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [localTerm, setLocalTerm] = useState(filters.searchTerm ?? \"\");\r\n  const debTimer = React.useRef<number | null>(null);\r\n\r\n  const handleSearchChange = (val: string) => {\r\n    setLocalTerm(val);\r\n    if (debTimer.current) window.clearTimeout(debTimer.current);\r\n    debTimer.current = window.setTimeout(() => {\r\n      setFilters({ searchTerm: val });\r\n    }, 200);\r\n  };\r\n\r\n  const clear = () => {\r\n    setLocalTerm(\"\");\r\n    setFilters({ searchTerm: \"\" });\r\n  };\r\n\r\nReact.useEffect(() => {\r\n  if (!open) return;\r\n  const onKey = (e: KeyboardEvent) => {\r\n    if (e.key === \"Escape\") {\r\n      setLocalTerm(\"\");\r\n      setFilters({ searchTerm: \"\" });\r\n    }\r\n  };\r\n  window.addEventListener(\"keydown\", onKey);\r\n  return () => window.removeEventListener(\"keydown\", onKey);\r\n}, [open, setFilters]);\r\n\r\n  const isActive = (filters.searchTerm ?? \"\").trim().length > 0;\r\n\r\n  return (\r\n      <Popover\r\n      open={open}\r\n      onOpenChange={(next) => {\r\n        setOpen(next);\r\n        if (next) setLocalTerm(filters.searchTerm ?? \"\");\r\n      }}\r\n    >\r\n      <PopoverTrigger asChild>\r\n        <Button variant={isActive ? \"default\" : \"ghost\"} size=\"sm\" className=\"h-9\">\r\n          <Search className=\"w-4 h-4 mr-2\" />\r\n          Haku\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-96 p-4\" align=\"center\">\r\n        <div className=\"space-y-3\">\r\n          <div className=\"text-base font-semibold\">Haku</div>\r\n          <div className=\"text-sm text-muted-foreground\">Etsi työntekijöitä</div>\r\n          <div className=\"relative\">\r\n           <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground w-4 h-4\" />\r\n           <input\r\n              className=\"w-full h-9 rounded-md border border-input bg-background px-3 pl-10 pr-10 text-sm outline-none focus:ring-2 focus:ring-ring\"\r\n              placeholder=\"Hae nimellä, sähköpostilla tai osastolla...\"\r\n              value={localTerm}\r\n              onChange={(e) => handleSearchChange(e.target.value)}\r\n              autoFocus\r\n            />\r\n            {localTerm && (\r\n              <button\r\n                type=\"button\"\r\n                aria-label=\"Tyhjennä haku\"\r\n                className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\r\n                onClick={clear}\r\n              >\r\n                <X className=\"w-4 h-4\" />\r\n              </button>\r\n            )}\r\n          </div>\r\n          <div className=\"text-xs text-muted-foreground\">\r\n            Haku toimii reaaliajassa ja etsii nimestä, sähköpostista ja osastosta\r\n          </div>\r\n          {isActive && (\r\n            <>\r\n              <Separator />\r\n              <div className=\"text-xs text-muted-foreground bg-accent/50 p-2 rounded-md\">\r\n                <Search className=\"w-3 h-3 inline mr-1\" />\r\n                Hakutermi: “{filters.searchTerm}”\r\n                <div className=\"mt-1\">Näytetään työntekijät jotka vastaavat hakua</div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}"
        }
      ]
    },
    {
      "path": "src/app/types/index.ts",
      "size": 617,
      "sha256": "2e9aa1a397fa54807febca93c79202f6589001ec640a6a8e99e539b218bca77a",
      "lang": "typescript",
      "chunks": [
        {
          "i": 0,
          "text": "export interface ShiftType {\r\n  type: 'normal' | 'locked' | 'absent' | 'holiday' | 'empty';\r\n  hours?: number;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\nexport interface Employee {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  department: string;\r\n  isActive: boolean;\r\n  shifts: ShiftType[];\r\n}\r\n\r\nexport interface AbsenceRequest {\r\n  id: string;\r\n  employeeId: string;\r\n  employeeName: string;\r\n  startDate: string;\r\n  endDate: string;\r\n  reason: string;\r\n  status: 'pending' | 'approved' | 'declined';\r\n  submittedAt: string;\r\n  message?: string;\r\n}\r\n\r\nexport interface DateInfo {\r\n  day: string;\r\n  date: string;\r\n}"
        }
      ]
    },
    {
      "path": "src/app/components/ui/avatar.tsx",
      "size": 1157,
      "sha256": "98043caa32447ca64eecb4bd4ffa676a7310164ef50b1d80333ff478620da461",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nfunction Avatar({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\r\n  return (\r\n    <AvatarPrimitive.Root\r\n      data-slot=\"avatar\"\r\n      className={cn(\r\n        \"relative flex size-10 shrink-0 overflow-hidden rounded-full\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction AvatarImage({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\r\n  return (\r\n    <AvatarPrimitive.Image\r\n      data-slot=\"avatar-image\"\r\n      className={cn(\"aspect-square size-full\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction AvatarFallback({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\r\n  return (\r\n    <AvatarPrimitive.Fallback\r\n      data-slot=\"avatar-fallback\"\r\n      className={cn(\r\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { Avatar, AvatarImage, AvatarFallback };\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/badge.tsx",
      "size": 1682,
      "sha256": "7bf74709270b375dcfd4b8ff1109196fd9b0260feb884ce960fa5060ec8b9846",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "import * as React from \"react\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nconst badgeVariants = cva(\r\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\r\n        secondary:\r\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\r\n        destructive:\r\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\r\n        outline:\r\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\nfunction Badge({\r\n  className,\r\n  variant,\r\n  asChild = false,\r\n  ...props\r\n}: React.ComponentProps<\"span\"> &\r\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\r\n  const Comp = asChild ? Slot : \"span\";\r\n\r\n  return (\r\n    <Comp\r\n      data-slot=\"badge\"\r\n      className={cn(badgeVariants({ variant }), className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { Badge, badgeVariants };\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/button.tsx",
      "size": 2164,
      "sha256": "577936340e816ace37b76009b27583d26a9374562543a4b485f8bbd8fa36387d",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "import * as React from \"react\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\r\n        outline:\r\n          \"border bg-background text-foreground hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost:\r\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\r\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\r\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\r\n        icon: \"size-9 rounded-md\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\nfunction Button({\r\n  className,\r\n  variant,\r\n  size,\r\n  asChild = false,\r\n  ...props\r\n}: React.ComponentProps<\"button\"> &\r\n  VariantProps<typeof buttonVariants> & {\r\n    asChild?: boolean;\r\n  }) {\r\n  const Comp = asChild ? Slot : \"button\";\r\n\r\n  return (\r\n    <Comp\r\n      data-slot=\"button\"\r\n      className={cn(buttonVariants({ variant, size, className }))}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { Button, buttonVariants };\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/card.tsx",
      "size": 2080,
      "sha256": "ad9cf10701d7e02796eaad6ea943a808351f7710d7557fa3b5b54a6db870cb3a",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "import * as React from \"react\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"card\"\r\n      className={cn(\r\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"card-header\"\r\n      className={cn(\r\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 pt-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <h4\r\n      data-slot=\"card-title\"\r\n      className={cn(\"leading-none\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <p\r\n      data-slot=\"card-description\"\r\n      className={cn(\"text-muted-foreground\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"card-action\"\r\n      className={cn(\r\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"card-content\"\r\n      className={cn(\"px-6 [&:last-child]:pb-6\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"card-footer\"\r\n      className={cn(\"flex items-center px-6 pb-6 [.border-t]:pt-6\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport {\r\n  Card,\r\n  CardHeader,\r\n  CardFooter,\r\n  CardTitle,\r\n  CardAction,\r\n  CardDescription,\r\n  CardContent,\r\n};\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/checkbox.tsx",
      "size": 1276,
      "sha256": "3ceecfc1db863bb7c80945941f86c8e75d03c200c77000f473188cc843644b7a",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\r\nimport { CheckIcon } from \"lucide-react\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nfunction Checkbox({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\r\n  return (\r\n    <CheckboxPrimitive.Root\r\n      data-slot=\"checkbox\"\r\n      className={cn(\r\n        \"peer border bg-input-background dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    >\r\n      <CheckboxPrimitive.Indicator\r\n        data-slot=\"checkbox-indicator\"\r\n        className=\"flex items-center justify-center text-current transition-none\"\r\n      >\r\n        <CheckIcon className=\"size-3.5\" />\r\n      </CheckboxPrimitive.Indicator>\r\n    </CheckboxPrimitive.Root>\r\n  );\r\n}\r\n\r\nexport { Checkbox };\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/dialog.tsx",
      "size": 3963,
      "sha256": "4df8ef421d5b6c8d090c4d15f7c50d42087ad2627dba154eb7cc7d0b1983dc7a",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\r\nimport { XIcon } from \"lucide-react\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nfunction Dialog({\r\n  ...props\r\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\r\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />;\r\n}\r\n\r\nfunction DialogTrigger({\r\n  ...props\r\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\r\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />;\r\n}\r\n\r\nfunction DialogPortal({\r\n  ...props\r\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\r\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />;\r\n}\r\n\r\nfunction DialogClose({\r\n  ...props\r\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\r\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />;\r\n}\r\n\r\nfunction DialogOverlay({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\r\n  return (\r\n    <DialogPrimitive.Overlay\r\n      data-slot=\"dialog-overlay\"\r\n      className={cn(\r\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DialogContent({\r\n  className,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\r\n  return (\r\n    <DialogPortal data-slot=\"dialog-portal\">\r\n      <DialogOverlay />\r\n      <DialogPrimitive.Content\r\n        data-slot=\"dialog-content\"\r\n        className={cn(\r\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        {children}\r\n        <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\r\n          <XIcon />\r\n          <span className=\"sr-only\">Close</span>\r\n        </DialogPrimitive.Close>\r\n      </DialogPrimitive.Content>\r\n    </DialogPortal>\r\n  );\r\n}\r\n\r\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"dialog-header\"\r\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"dialog-footer\"\r\n      className={cn(\r\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DialogTitle({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\r\n  return (\r\n    <DialogPrimitive.Title\r\n      data-slot=\"dialog-title\"\r\n      className={cn(\"text-lg leading-none font-semibold\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DialogDescription({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\r\n  return (\r\n    <DialogPrimitive.Description\r\n      data-slot=\"dialog-description\"\r\n      className={cn(\"text-muted-foreground text-sm\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport {\r\n  Dialog,\r\n  DialogClose,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogOverlay,\r\n  DialogPortal,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n};\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/input.tsx",
      "size": 984,
      "sha256": "a36b91cd41f456a403bf634978a64c3f67b6f053dc5814fff81c295571828c18",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "import * as React from \"react\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\r\n  return (\r\n    <input\r\n      type={type}\r\n      data-slot=\"input\"\r\n      className={cn(\r\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border px-3 py-1 text-base bg-input-background transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\r\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\r\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { Input };\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/label.tsx",
      "size": 638,
      "sha256": "8503b639cc9352f011e6db1c949ab092cf57dd712d59455406620e071a575ff1",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nfunction Label({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\r\n  return (\r\n    <LabelPrimitive.Root\r\n      data-slot=\"label\"\r\n      className={cn(\r\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { Label };\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/NotificationsPopover.tsx",
      "size": 7457,
      "sha256": "ed5127e3c75113c940a357d17157ba65aafed3320f2327ddf9e0f961bd992ee5",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"./popover\";\r\nimport { Button } from \"./button\";\r\nimport { Badge } from \"./badge\";\r\nimport { Separator } from \"./separator\";\r\nimport { Bell, Check, Calendar, UserPlus, Wand2, AlertCircle } from \"lucide-react\";\r\nimport { supabase } from \"@/lib/supaBaseClient\";\r\nimport { toast } from \"sonner\";\r\nimport { requestPermissionAndSubscribe } from \"@/lib/pushClient\";\r\n\r\n// NotificationsPopover.tsx, importtien jälkeen\r\n\r\n\r\n// korvaa koko enablePush\r\nasync function enablePush() {\r\n  try {\r\n    await requestPermissionAndSubscribe();\r\n    toast.success(\"Push-ilmoitukset käytössä\");\r\n  } catch (e) {\r\n    console.error(e);\r\n    toast.error(\"Pushin käyttöönotto epäonnistui\");\r\n  }\r\n}\r\n\r\n\r\nasync function disablePush() {\r\n  try {\r\n    // Poistetaan kaikki tämän SW-rekisterin tilaukset\r\n    const reg = await navigator.serviceWorker.getRegistration();\r\n    if (reg) {\r\n      const sub = await reg.pushManager.getSubscription();\r\n      if (sub) {\r\n        await supabase.from(\"push_subscriptions\").delete().eq(\"endpoint\", sub.endpoint);\r\n        await sub.unsubscribe();\r\n      }\r\n    }\r\n    toast.success(\"Push-ilmoitukset poistettu käytöstä\");\r\n  } catch (e) {\r\n    console.error(e);\r\n    toast.error(\"Pushin poisto epäonnistui\");\r\n  }\r\n}\r\n\r\n\r\ntype NotiType =\r\n  | \"absence_request\"\r\n  | \"absence_approved\"\r\n  | \"absence_declined\"\r\n  | \"employee_added\"\r\n  | \"shift_auto\";\r\n\r\ntype Noti = {\r\n  id: string;\r\n  created_at: string;\r\n  type: NotiType;\r\n  title: string;\r\n  message: string;\r\n  is_read: boolean;\r\n};\r\n\r\nfunction iconFor(type: Noti[\"type\"]) {\r\n  switch (type) {\r\n    case \"absence_request\":\r\n      return <AlertCircle className=\"w-4 h-4 text-amber-600\" />;\r\n    case \"absence_approved\":\r\n      return <Check className=\"w-4 h-4 text-green-600\" />;\r\n    case \"absence_declined\":\r\n      return <AlertCircle className=\"w-4 h-4 text-red-600\" />;\r\n    case \"employee_added\":\r\n      return <UserPlus className=\"w-4 h-4 text-blue-600\" />;\r\n    case \"shift_auto\":\r\n      return <Wand2 className=\"w-4 h-4 text-indigo-600\" />;\r\n    default:\r\n      return <Bell className=\"w-4 h-4\" />;\r\n  }\r\n}\r\n\r\n\r\nfunction timeAgo(iso: string) {\r\n  const diff = Math.max(0, Date.now() - new Date(iso).getTime());\r\n  const m = Math.floor(diff / 60000);\r\n  if (m < 1) return \"juuri äsken\";\r\n  if (m < 60) return `${m} min sitten`;\r\n  const h = Math.floor(m / 60);\r\n  if (h < 24) return `${h} h sitten`;\r\n  const d = Math.floor(h / 24);\r\n  return `${d} pv sitten`;\r\n}\r\n\r\nexport default function NotificationsPopover() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [items, setItems] = React.useState<Noti[]>([]);\r\n  const unread = items.filter((n) => !n.is_read).length;\r\n\r\n\r\n  React.useEffect(() => {\r\n    (async () => {\r\n      const { data, error } = await supabase\r\n        .from(\"notifications\")\r\n        .select(\"*\")\r\n        .order(\"created_at\", { ascending: false })\r\n        .limit(50);\r\n      if (error) {\r\n        console.error(\"[notifications initial fetch]\", error);\r\n      } else {\r\n        setItems((data ?? []) as Noti[]);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n    React.useEffect(() => {\r\n    if (!open) return;\r\n    (async () => {\r\n      const { data, error } = await supabase\r\n        .from(\"notifications\")\r\n        .select(\"*\")\r\n        .order(\"created_at\", { ascending: false })\r\n        .limit(50);\r\n      if (!error) setItems((data ?? []) as Noti[]);\r\n    })();\r\n  }, [open]);\r\n\r\n\r\nReact.useEffect(() => {\r\n  const ch = supabase\r\n    .channel(\"notifications-rt\")\r\n    .on(\r\n      \"postgres_changes\",\r\n      { event: \"*\", schema: \"public\", table: \"notifications\" },\r\n(payload) => {\r\n  const newRow = payload.new as Noti | null;\r\n  if (!newRow) return;\r\n\r\n  if (payload.eventType === \"INSERT\") {\r\n    setItems((prev) => [newRow, ...prev].slice(0, 50));\r\n  } else if (payload.eventType === \"UPDATE\") {\r\n    setItems((prev) =>\r\n      prev.map((n) => (n.id === newRow.id ? newRow : n))\r\n    );\r\n  }\r\n}\r\n\r\n    )\r\n    .subscribe();\r\n  return () => void supabase.removeChannel(ch);\r\n}, []);\r\n\r\n\r\n  async function markAllRead() {\r\n    const { error } = await supabase\r\n      .from(\"notifications\")\r\n      .update({ is_read: true })\r\n      .eq(\"is_read\", false);\r\n    if (error) {\r\n      console.error(error);\r\n      toast.error(\"Merkintä epäonnistui\");\r\n      return;\r\n    }\r\n    setItems((prev) => prev.map((n) => ({ ...n, is_read: true })));\r\n  }\r\n\r\n // markRead – tee optimistic päivitys vain jos klikattu\r\nasync function markRead(id: string) {\r\n  setItems((prev) => prev.map((n) => (n.id === id ? { ...n, is_read: true } : n)));\r\n  const { error } = await supabase.from(\"notifications\").update({ is_read: true }).eq(\"id\", id);\r\n  if (error) {\r\n    console.error(error);\r\n    toast.error(\"Merkintä epäonnistui\");\r\n  }\r\n}\r\n\r\n\r\n  return (\r\n    <Popover open={open} onOpenChange={setOpen}>\r\n      <PopoverTrigger asChild>\r\n        <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\r\n          <Bell className=\"w-4 h-4\" />\r\n          {unread > 0 && (\r\n            <Badge variant=\"destructive\" className=\"absolute -top-1 -right-1 h-5 min-w-[20px] px-1 justify-center\">\r\n              {unread}\r\n            </Badge>\r\n          )}\r\n        </Button>\r\n      </PopoverTrigger>\r\n\r\n      <PopoverContent className=\"w-[420px] p-0\" align=\"end\">\r\n        <div className=\"p-3 flex items-center justify-between\">\r\n          <div className=\"font-medium\">Ilmoitukset</div>\r\n          <div className=\"text-xs text-muted-foreground\">{unread} lukematonta</div>\r\n        </div>\r\n        <Separator />\r\n        {items.length === 0 ? (\r\n          <div className=\"p-6 text-sm text-muted-foreground flex flex-col items-center gap-2\">\r\n            <Calendar className=\"w-5 h-5 opacity-60\" />\r\n            Ei ilmoituksia\r\n          </div>\r\n        ) : (\r\n          <div className=\"max-h-[360px] overflow-auto\">\r\n            {items.map((n) => (\r\n              <button\r\n                key={n.id}\r\n                onClick={() => markRead(n.id)}\r\n                className={`w-full text-left px-3 py-2 flex gap-2 hover:bg-accent transition ${\r\n                  n.is_read ? \"opacity-75\" : \"\"\r\n                }`}\r\n              >\r\n                <div className=\"mt-0.5\">{iconFor(n.type)}</div>\r\n                <div className=\"flex-1\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className=\"font-medium text-sm\">{n.title}</div>\r\n                    {!n.is_read && <span className=\"w-1.5 h-1.5 rounded-full bg-foreground inline-block\" />}\r\n                  </div>\r\n                  <div className=\"text-xs text-muted-foreground\">{n.message}</div>\r\n                  <div className=\"text-[10px] text-muted-foreground mt-0.5\">{timeAgo(n.created_at)}</div>\r\n                </div>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        )}\r\n<Separator />\r\n<div className=\"p-2 flex flex-wrap items-center justify-between gap-2\">\r\n  <Button variant=\"ghost\" size=\"sm\" className=\"shrink-0\" onClick={markAllRead}>\r\n    Merkitse kaikki luetuiksi\r\n  </Button>\r\n  <div className=\"flex flex-wrap gap-2\">\r\n    <Button variant=\"outline\" size=\"sm\" className=\"shrink-0\" onClick={enablePush}>\r\n      Ota push käyttöön\r\n    </Button>\r\n    <Button variant=\"ghost\" size=\"sm\" className=\"shrink-0\" onClick={disablePush}>\r\n      Poista push\r\n    </Button>\r\n  </div>\r\n</div>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/popover.tsx",
      "size": 1689,
      "sha256": "cb136dd80dbaa2fffb59ba6a7fa08e5388fd85746d811aacc4c1ca62968ea616",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nfunction Popover({\r\n  ...props\r\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\r\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />;\r\n}\r\n\r\nfunction PopoverTrigger({\r\n  ...props\r\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\r\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />;\r\n}\r\n\r\nfunction PopoverContent({\r\n  className,\r\n  align = \"center\",\r\n  sideOffset = 4,\r\n  ...props\r\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\r\n  return (\r\n    <PopoverPrimitive.Portal>\r\n      <PopoverPrimitive.Content\r\n        data-slot=\"popover-content\"\r\n        align={align}\r\n        sideOffset={sideOffset}\r\n        className={cn(\r\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--[REDACTED]) rounded-md border p-4 shadow-md outline-hidden\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    </PopoverPrimitive.Portal>\r\n  );\r\n}\r\n\r\nfunction PopoverAnchor({\r\n  ...props\r\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\r\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />;\r\n}\r\n\r\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/select.tsx",
      "size": 6464,
      "sha256": "aafe9bb0ce1ab56eff006fe27a62499a77df281c7856ba8f51f9ea490eada453",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\r\nimport {\r\n  CheckIcon,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n} from \"lucide-react\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nfunction Select({\r\n  ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\r\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />;\r\n}\r\n\r\nfunction SelectGroup({\r\n  ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\r\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\r\n}\r\n\r\nfunction SelectValue({\r\n  ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\r\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\r\n}\r\n\r\nfunction SelectTrigger({\r\n  className,\r\n  size = \"default\",\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\r\n  size?: \"sm\" | \"default\";\r\n}) {\r\n  return (\r\n    <SelectPrimitive.Trigger\r\n      data-slot=\"select-trigger\"\r\n      data-size={size}\r\n      className={cn(\r\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-full items-center justify-between gap-2 rounded-md border bg-input-background px-3 py-2 text-sm whitespace-nowrap transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <SelectPrimitive.Icon asChild>\r\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\r\n      </SelectPrimitive.Icon>\r\n    </SelectPrimitive.Trigger>\r\n  );\r\n}\r\n\r\nfunction SelectContent({\r\n  className,\r\n  children,\r\n  position = \"popper\",\r\n  ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\r\n  return (\r\n    <SelectPrimitive.Portal>\r\n      <SelectPrimitive.Content\r\n        data-slot=\"select-content\"\r\n        className={cn(\r\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--[REDACTED]) min-w-[8rem] origin-(--[REDACTED]) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\r\n          position === \"popper\" &&\r\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\r\n          className,\r\n        )}\r\n        position={position}\r\n        {...props}\r\n      >\r\n        <SelectScrollUpButton />\r\n        <SelectPrimitive.Viewport\r\n          className={cn(\r\n            \"p-1\",\r\n            position === \"popper\" &&\r\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\",\r\n          )}\r\n        >\r\n          {children}\r\n        </SelectPrimitive.Viewport>\r\n        <SelectScrollDownButton />\r\n      </SelectPrimitive.Content>\r\n    </SelectPrimitive.Portal>\r\n  );\r\n}\r\n\r\nfunction SelectLabel({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\r\n  return (\r\n    <SelectPrimitive.Label\r\n      data-slot=\"select-label\"\r\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction SelectItem({\r\n  className,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\r\n  return (\r\n    <SelectPrimitive.Item\r\n      data-slot=\"select-item\"\r\n      className={cn(\r\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    >\r\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\r\n        <SelectPrimitive.ItemIndicator>\r\n          <CheckIcon className=\"size-4\" />\r\n        </SelectPrimitive.ItemIndicator>\r\n      </span>\r\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\r\n    </SelectPrimitive.Item>\r\n  );\r\n}\r\n\r\nfunction SelectSeparator({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\r\n  return (\r\n    <SelectPrimitive.Separator\r\n      data-slot=\"select-separator\"\r\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction SelectScrollUpButton({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\r\n  return (\r\n    <SelectPrimitive.ScrollUpButton\r\n      data-slot=\"select-scroll-up-button\"\r\n      className={cn(\r\n        \"flex cursor-default items-center justify-center py-1\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    >\r\n      <ChevronUpIcon className=\"size-4\" />\r\n    </SelectPrimitive.ScrollUpButton>\r\n  );\r\n}\r\n\r\nfunction SelectScrollDownButton({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\r\n  return (\r\n    <SelectPrimitive.ScrollDownButton\r\n      data-slot=\"select-scroll-down-button\"\r\n      className={cn(\r\n        \"flex cursor-default items-center justify-center py-1\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    >\r\n      <ChevronDownIcon className=\"size-4\" />\r\n    </SelectPrimitive.ScrollDownButton>\r\n  );\r\n}\r\n\r\nexport {\r\n  Select,\r\n  SelectContent,\r\n  SelectGroup,\r\n  SelectItem,\r\n  SelectLabel,\r\n  SelectScrollDownButton,\r\n  SelectScrollUpButton,\r\n  SelectSeparator,\r\n  SelectTrigger,\r\n  SelectValue,\r\n};\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/separator.tsx",
      "size": 735,
      "sha256": "4c960bd3ca2e2c6627e215243e57bfbe6daa651520ab30c7f4c355345b2733a1",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nfunction Separator({\r\n  className,\r\n  orientation = \"horizontal\",\r\n  decorative = true,\r\n  ...props\r\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\r\n  return (\r\n    <SeparatorPrimitive.Root\r\n      data-slot=\"separator-root\"\r\n      decorative={decorative}\r\n      orientation={orientation}\r\n      className={cn(\r\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { Separator };\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/sonner.tsx",
      "size": 596,
      "sha256": "9dbb0ca919af53e53294dc0326628187ff45afa756c7caf6b162a7895db0e52a",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport { useTheme } from \"next-themes\";\r\nimport { Toaster as Sonner, ToasterProps } from \"sonner\";\r\n\r\nconst Toaster = ({ ...props }: ToasterProps) => {\r\n  const { theme = \"system\" } = useTheme();\r\n\r\n  return (\r\n    <Sonner\r\n      theme={theme as ToasterProps[\"theme\"]}\r\n      className=\"toaster group\"\r\n      style={\r\n        {\r\n          \"--normal-bg\": \"var(--popover)\",\r\n          \"--normal-text\": \"var(--popover-foreground)\",\r\n          \"--normal-border\": \"var(--border)\",\r\n        } as React.CSSProperties\r\n      }\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport { Toaster };\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/switch.tsx",
      "size": 1213,
      "sha256": "dba1f3139d5f9d6ddeba36d4201efbac68a74ed68479b89e62665a9822b0b3f8",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as SwitchPrimitive from \"@radix-ui/react-switch\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nfunction Switch({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\r\n  return (\r\n    <SwitchPrimitive.Root\r\n      data-slot=\"switch\"\r\n      className={cn(\r\n        \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-switch-background focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    >\r\n      <SwitchPrimitive.Thumb\r\n        data-slot=\"switch-thumb\"\r\n        className={cn(\r\n          \"bg-card dark:data-[state=unchecked]:bg-card-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\",\r\n        )}\r\n      />\r\n    </SwitchPrimitive.Root>\r\n  );\r\n}\r\n\r\nexport { Switch };\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/tabs.tsx",
      "size": 2011,
      "sha256": "606bc2facf72fa27e40d6e4c21d14d3bba26bb93390a74ebbb14cdf828c2c277",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nfunction Tabs({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\r\n  return (\r\n    <TabsPrimitive.Root\r\n      data-slot=\"tabs\"\r\n      className={cn(\"flex flex-col gap-2\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction TabsList({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\r\n  return (\r\n    <TabsPrimitive.List\r\n      data-slot=\"tabs-list\"\r\n      className={cn(\r\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-xl p-[3px] flex\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction TabsTrigger({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\r\n  return (\r\n    <TabsPrimitive.Trigger\r\n      data-slot=\"tabs-trigger\"\r\n      className={cn(\r\n        \"data-[state=active]:bg-card dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-xl border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction TabsContent({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\r\n  return (\r\n    <TabsPrimitive.Content\r\n      data-slot=\"tabs-content\"\r\n      className={cn(\"flex-1 outline-none\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/textarea.tsx",
      "size": 785,
      "sha256": "f99c2b5ea05044530548241398b633ec8b34c5aaa3b8269455630f32d251de33",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "import * as React from \"react\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\r\n  return (\r\n    <textarea\r\n      data-slot=\"textarea\"\r\n      className={cn(\r\n        \"resize-none border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-input-background px-3 py-2 text-base transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { Textarea };\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/tooltip.tsx",
      "size": 1958,
      "sha256": "2a6e6f5c4853222af2274cf5c186eac7998c824d94caa1b750db3f329a4e4b42",
      "lang": "tsx",
      "chunks": [
        {
          "i": 0,
          "text": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\r\n\r\nimport { cn } from \"./utils\";\r\n\r\nfunction TooltipProvider({\r\n  delayDuration = 0,\r\n  ...props\r\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\r\n  return (\r\n    <TooltipPrimitive.Provider\r\n      data-slot=\"tooltip-provider\"\r\n      delayDuration={delayDuration}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction Tooltip({\r\n  ...props\r\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\r\n  return (\r\n    <TooltipProvider>\r\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\r\n    </TooltipProvider>\r\n  );\r\n}\r\n\r\nfunction TooltipTrigger({\r\n  ...props\r\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\r\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\r\n}\r\n\r\nfunction TooltipContent({\r\n  className,\r\n  sideOffset = 0,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\r\n  return (\r\n    <TooltipPrimitive.Portal>\r\n      <TooltipPrimitive.Content\r\n        data-slot=\"tooltip-content\"\r\n        sideOffset={sideOffset}\r\n        className={cn(\r\n          \"bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--[REDACTED]) rounded-md px-3 py-1.5 text-xs text-balance\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        {children}\r\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\r\n      </TooltipPrimitive.Content>\r\n    </TooltipPrimitive.Portal>\r\n  );\r\n}\r\n\r\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\r\n"
        }
      ]
    },
    {
      "path": "src/app/components/ui/utils.ts",
      "size": 175,
      "sha256": "c0adf27efbfa148d5abcf99e860f8e3e6c8fc77a1f99e023c08ef4f12e6ece29",
      "lang": "typescript",
      "chunks": [
        {
          "i": 0,
          "text": "import { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n"
        }
      ]
    }
  ]
}